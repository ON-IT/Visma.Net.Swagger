//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.0.0 (NJsonSchema v9.3.0.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace VismaNetIntegrations
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SubscriptionClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SubscriptionClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get all events</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EventDto>> GetAllEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("resources/v1/event");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<EventDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<EventDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<EventDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get all subscriptions made by the current user</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SubscriptionDto>> GetAllSubscriptionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("resources/v1/subscription");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SubscriptionDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SubscriptionDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new VismaNetException("successful operation", status_, responseData_, headers_, null);
                    }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SubscriptionDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a new subscription for the current user</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SubscriptionDto> CreateSubscriptionAsync(SubscriptionDto subscription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("resources/v1/subscription");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(subscription, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SubscriptionDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriptionDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new VismaNetException("successful operation", status_, responseData_, headers_, null);
                    }
            
                        return default(SubscriptionDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific subscription</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SubscriptionDto> FindSubscriptionByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("resources/v1/subscription/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SubscriptionDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriptionDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new VismaNetException("successful operation", status_, responseData_, headers_, null);
                    }
            
                        return default(SubscriptionDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific subscription</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateSubscriptionAsync(long id, SubscriptionDto subscription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("resources/v1/subscription/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(subscription, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new VismaNetException("successful operation", status_, responseData_, headers_, null);
                    }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Delete a specific subscription</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteSubscriptionAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("resources/v1/subscription/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new VismaNetException("successful operation", status_, responseData_, headers_, null);
                    }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SecurityClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SecurityClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Test connection</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> TestConnectionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("security/api/v1/testconnection");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(string); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RevokeSecurityTokenAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("security/api/v1/token");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the companies available for this token.</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContextInformation>> GetAvailableUserContextsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("security/api/v1/token/usercontexts");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ContextInformation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ContextInformation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ContextInformation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class AccountClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public AccountClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get specific Account</summary>
        /// <param name="accountCd">Identifies the account</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccountDto> GetByaccountCdAsync(string accountCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (accountCd == null)
                throw new System.ArgumentNullException("accountCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/account/{accountCd}");
            urlBuilder_.Replace("{accountCd}", System.Uri.EscapeDataString(System.Convert.ToString(accountCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AccountDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AccountDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(AccountDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a range of Accounts</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AccountDto>> GetAllAsync(string greaterThanValue = null, int? publicCode = null, string externalCode1 = null, string externalCode2 = null, string analysisCode = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/account?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (publicCode != null) urlBuilder_.Append("publicCode=").Append(System.Uri.EscapeDataString(System.Convert.ToString(publicCode.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (externalCode1 != null) urlBuilder_.Append("externalCode1=").Append(System.Uri.EscapeDataString(System.Convert.ToString(externalCode1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (externalCode2 != null) urlBuilder_.Append("externalCode2=").Append(System.Uri.EscapeDataString(System.Convert.ToString(externalCode2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (analysisCode != null) urlBuilder_.Append("analysisCode=").Append(System.Uri.EscapeDataString(System.Convert.ToString(analysisCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<AccountDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<AccountDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<AccountDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class AttachmentClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public AttachmentClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get latest revision of a specific Attachment</summary>
        /// <param name="attachmentId">Identifies the attachment</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetByattachmentIdAsync(System.Guid attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (attachmentId == null)
                throw new System.ArgumentNullException("attachmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/attachment/{attachmentId}");
            urlBuilder_.Replace("{attachmentId}", System.Uri.EscapeDataString(System.Convert.ToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Attachment</summary>
        /// <param name="attachmentId">Identifies the Attachment to update</param>
        /// <param name="metadataDto">Defines the data for the Attachment to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByattachmentIdAsync(System.Guid attachmentId, AttachmentMetadataUpdateDto metadataDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (attachmentId == null)
                throw new System.ArgumentNullException("attachmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/attachment/{attachmentId}");
            urlBuilder_.Replace("{attachmentId}", System.Uri.EscapeDataString(System.Convert.ToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(metadataDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class BranchClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public BranchClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific branch</summary>
        /// <param name="branchNumber">Identifies the branch</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BranchDto> GetSpecificBranchBybranchNumberAsync(string branchNumber, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (branchNumber == null)
                throw new System.ArgumentNullException("branchNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/branch/{branchNumber}?");
            urlBuilder_.Replace("{branchNumber}", System.Uri.EscapeDataString(System.Convert.ToString(branchNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BranchDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BranchDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(BranchDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Branches</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BranchDto>> GetAllBranchesAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/branch?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<BranchDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<BranchDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<BranchDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class BudgetClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public BudgetClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of General Ledger Budget Figures</summary>
        /// <param name="ledger">Mandatory</param>
        /// <param name="financialYear">Mandatory</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BudgetDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, string branch = null, string ledger = null, string financialYear = null, string subaccount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/budget?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (branch != null) urlBuilder_.Append("branch=").Append(System.Uri.EscapeDataString(System.Convert.ToString(branch, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (ledger != null) urlBuilder_.Append("ledger=").Append(System.Uri.EscapeDataString(System.Convert.ToString(ledger, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financialYear != null) urlBuilder_.Append("financialYear=").Append(System.Uri.EscapeDataString(System.Convert.ToString(financialYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (subaccount != null) urlBuilder_.Append("subaccount=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subaccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<BudgetDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<BudgetDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<BudgetDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Budget</summary>
        /// <param name="budget">Defines the data for the Budget to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutAsync(BudgetUpdateDto budget, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/budget");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(budget, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Budget</summary>
        /// <param name="budget">Defines the data for the Budget to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateBudgetAsync(BudgetUpdateDto budget, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/budget");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(budget, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CarrierClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CarrierClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Carrier</summary>
        /// <param name="carrierName">Identifies the Carrier</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CarrierDto> GetCarrierBycarrierNameAsync(string carrierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (carrierName == null)
                throw new System.ArgumentNullException("carrierName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/carrier/{carrierName}");
            urlBuilder_.Replace("{carrierName}", System.Uri.EscapeDataString(System.Convert.ToString(carrierName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CarrierDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CarrierDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Carriers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CarrierDto>> GetAllCarriersAsync(int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/carrier?");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CarrierDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CarrierDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CarrierDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CashAccountClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CashAccountClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific cash account</summary>
        /// <param name="accountNumber">Identifies the cash account</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CashAccountDto> GetByaccountNumberAsync(string accountNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashaccount/{accountNumber}");
            urlBuilder_.Replace("{accountNumber}", System.Uri.EscapeDataString(System.Convert.ToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CashAccountDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CashAccountDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CashAccountDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get all Cash Accounts</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CashAccountDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashaccount?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CashAccountDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CashAccountDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CashAccountDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CashSaleClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CashSaleClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Cash Sale</summary>
        /// <param name="documentNumber">Identifies the Cash Sale Document</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CashSaleDto> GetBydocumentNumberAsync(string documentNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (documentNumber == null)
                throw new System.ArgumentNullException("documentNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashsale/{documentNumber}");
            urlBuilder_.Replace("{documentNumber}", System.Uri.EscapeDataString(System.Convert.ToString(documentNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CashSaleDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CashSaleDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CashSaleDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Cash Sales</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CashSaleDto>> GetAllCashSalesAsync(DocumentType? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashsale?");
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CashSaleDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CashSaleDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CashSaleDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Cash Sale</summary>
        /// <param name="cashSaleUpdateDto">Defines the data for the Cash Sale to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(CashSaleUpdateDto cashSaleUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashsale");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(cashSaleUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Cash Sale</summary>
        /// <param name="documentnumber">Identifies the Cash Sale to update</param>
        /// <param name="cashSaleUpdateDto">Defines the data for the Cash Sale to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBydocumentnumberAsync(string documentnumber, CashSaleUpdateDto cashSaleUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (documentnumber == null)
                throw new System.ArgumentNullException("documentnumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashsale/{documentnumber}");
            urlBuilder_.Replace("{documentnumber}", System.Uri.EscapeDataString(System.Convert.ToString(documentnumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(cashSaleUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CashTransactionClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CashTransactionClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Transaction</summary>
        /// <param name="referenceNumber">Identifies the Transaction</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CashTransactionDto> GetByreferenceNumberAsync(string referenceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (referenceNumber == null)
                throw new System.ArgumentNullException("referenceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashTransaction/{referenceNumber}");
            urlBuilder_.Replace("{referenceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CashTransactionDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CashTransactionDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CashTransactionDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get all Transaction</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CashTransactionDto>> GetAllAsync(int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashTransaction?");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CashTransactionDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CashTransactionDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CashTransactionDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Cash Transaction</summary>
        /// <param name="cashTransaction">Defines the data for the Cash Transaction to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateCashTransactionAsync(CashTransactionUpdateDto cashTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashTransaction");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(cashTransaction, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release cash transaction</summary>
        /// <param name="referenceNbr">Reference number of the cash transaction to be released.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseCashTransactionActionResultDto> ReleaseByreferenceNbrAsync(string referenceNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (referenceNbr == null)
                throw new System.ArgumentNullException("referenceNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashTransaction/{referenceNbr}/action/release");
            urlBuilder_.Replace("{referenceNbr}", System.Uri.EscapeDataString(System.Convert.ToString(referenceNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseCashTransactionActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseCashTransactionActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseCashTransactionActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Reverse a Cash Transaction</summary>
        /// <param name="referenceNbr">Reference number of the cash transaction to be reversed.</param>
        /// <param name="reverseActionDto">The action dto use to condition the action</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReverseCashTransactionActionResultDto> ReverseByreferenceNbrAsync(string referenceNbr, ReverseCashTransactionActionDto reverseActionDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (referenceNbr == null)
                throw new System.ArgumentNullException("referenceNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashTransaction/{referenceNbr}/action/reverse");
            urlBuilder_.Replace("{referenceNbr}", System.Uri.EscapeDataString(System.Convert.ToString(referenceNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(reverseActionDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReverseCashTransactionActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReverseCashTransactionActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReverseCashTransactionActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific CashTransaction</summary>
        /// <param name="cashTransactionNumber">Identifies the Cash Transaction to update</param>
        /// <param name="cashTransaction">Defines the data for the Cash Transaction to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBycashTransactionNumberAsync(string cashTransactionNumber, CashTransactionUpdateDto cashTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (cashTransactionNumber == null)
                throw new System.ArgumentNullException("cashTransactionNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/cashTransaction/{cashTransactionNumber}");
            urlBuilder_.Replace("{cashTransactionNumber}", System.Uri.EscapeDataString(System.Convert.ToString(cashTransactionNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(cashTransaction, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class ContactClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public ContactClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Contact</summary>
        /// <param name="contactId">Identifies the Contact</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContactDto> GetBycontactIdAsync(int contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contactId == null)
                throw new System.ArgumentNullException("contactId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contact/{contactId}");
            urlBuilder_.Replace("{contactId}", System.Uri.EscapeDataString(System.Convert.ToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ContactDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContactDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ContactDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Contact</summary>
        /// <param name="contactId">Identifies the Contact to update</param>
        /// <param name="contact">Defines the data for the Contact to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBycontactIdAsync(int contactId, ContactUpdateDto contact, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contactId == null)
                throw new System.ArgumentNullException("contactId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contact/{contactId}");
            urlBuilder_.Replace("{contactId}", System.Uri.EscapeDataString(System.Convert.ToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contact, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Contacts</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContactDto>> GetAllContactsAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contact?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ContactDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ContactDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ContactDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Contact</summary>
        /// <param name="contact">Defines the data for the Contact to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateContactAsync(ContactUpdateDto contact, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contact");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contact, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class ContractTemplateClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public ContractTemplateClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of Contract Templates</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContractTemplateDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contractTemplate?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ContractTemplateDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ContractTemplateDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ContractTemplateDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class ContractUsageClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public ContractUsageClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Contract Usage</summary>
        /// <param name="contractId">Identify the Contract Usage</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContractUsageDto> GetSpecificBycontractIdAsync(string contractId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contractUsage/{contractId}");
            urlBuilder_.Replace("{contractId}", System.Uri.EscapeDataString(System.Convert.ToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ContractUsageDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContractUsageDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ContractUsageDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Contract Usage</summary>
        /// <param name="contractId">Identifies the Contract Usage to update</param>
        /// <param name="contractUsage">Defines the data for the Contract Usage to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBycontractIdAsync(string contractId, ContractUsageUpdateDto contractUsage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contractUsage/{contractId}");
            urlBuilder_.Replace("{contractId}", System.Uri.EscapeDataString(System.Convert.ToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contractUsage, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Contract Usage</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContractUsageDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/contractUsage?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ContractUsageDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ContractUsageDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ContractUsageDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CreditNoteClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CreditNoteClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Credit Note</summary>
        /// <param name="creditNoteNumber">Identifies the Credit Note</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreditNoteDto> GetBycreditNoteNumberAsync(string creditNoteNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (creditNoteNumber == null)
                throw new System.ArgumentNullException("creditNoteNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/creditNote/{creditNoteNumber}");
            urlBuilder_.Replace("{creditNoteNumber}", System.Uri.EscapeDataString(System.Convert.ToString(creditNoteNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CreditNoteDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CreditNoteDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CreditNoteDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Credit Note</summary>
        /// <param name="creditNoteNumber">Identifies the Credit Note to update</param>
        /// <param name="creditNoteUpdateDto">Defines the data for the Credit Note to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBycreditNoteNumberAsync(string creditNoteNumber, CreditNoteUpdateDto creditNoteUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (creditNoteNumber == null)
                throw new System.ArgumentNullException("creditNoteNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/creditNote/{creditNoteNumber}");
            urlBuilder_.Replace("{creditNoteNumber}", System.Uri.EscapeDataString(System.Convert.ToString(creditNoteNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(creditNoteUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Credit Notes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CreditNoteDto>> GetAllCreditNotesDtoAsync(DocumentType2? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/creditNote?");
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CreditNoteDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CreditNoteDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CreditNoteDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Credit Note</summary>
        /// <param name="creditNoteUpdateDto">Defines the data for the Credit Note to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateCreditNoteAsync(CreditNoteUpdateDto creditNoteUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/creditNote");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(creditNoteUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a Credit Note. If the file already exists, a new revision is created.</summary>
        /// <param name="creditNoteNumber">Identifies the Credit Note</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateHeaderAttachmentBycreditNoteNumberAsync(string creditNoteNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (creditNoteNumber == null)
                throw new System.ArgumentNullException("creditNoteNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/creditNote/{creditNoteNumber}/attachment");
            urlBuilder_.Replace("{creditNoteNumber}", System.Uri.EscapeDataString(System.Convert.ToString(creditNoteNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a certain Credit Note line. If the file already exists, a new revision is created.</summary>
        /// <param name="creditNoteNumber">Identifies the Credit Note</param>
        /// <param name="lineNumber">Specifies line number</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateLineAttachmentBycreditNoteNumberlineNumberAsync(string creditNoteNumber, int lineNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (creditNoteNumber == null)
                throw new System.ArgumentNullException("creditNoteNumber");
    
            if (lineNumber == null)
                throw new System.ArgumentNullException("lineNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/creditNote/{creditNoteNumber}/{lineNumber}/attachment");
            urlBuilder_.Replace("{creditNoteNumber}", System.Uri.EscapeDataString(System.Convert.ToString(creditNoteNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lineNumber}", System.Uri.EscapeDataString(System.Convert.ToString(lineNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release credit note operation</summary>
        /// <param name="creditNoteNumber">Reference number of the credit note to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseInvoiceActionResultDto> ReleaseInvoiceBycreditNoteNumberAsync(string creditNoteNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (creditNoteNumber == null)
                throw new System.ArgumentNullException("creditNoteNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/creditNote/{creditNoteNumber}/action/release");
            urlBuilder_.Replace("{creditNoteNumber}", System.Uri.EscapeDataString(System.Convert.ToString(creditNoteNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseInvoiceActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInvoiceActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseInvoiceActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CurrencyClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CurrencyClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Currency</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CurrencyDto> GetSpecificCurrencyBycuryIdAsync(string curyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (curyId == null)
                throw new System.ArgumentNullException("curyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/currency/{curyId}");
            urlBuilder_.Replace("{curyId}", System.Uri.EscapeDataString(System.Convert.ToString(curyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrencyDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CurrencyDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets all available Currencies</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CurrencyDto>> GetAllCurrenciesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/currency");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CurrencyDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CurrencyDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CurrencyDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CustomerClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CustomerClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get Customer Classes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerClassDto>> GetCustomerClassesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/customerClass");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerClassDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerClassDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerClassDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific customer class</summary>
        /// <param name="customerClassId">Identifies the customer class</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerClassDto> GetSpecificCustomerClassBycustomerClassIdAsync(string customerClassId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerClassId == null)
                throw new System.ArgumentNullException("customerClassId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/customerClass/{customerClassId}");
            urlBuilder_.Replace("{customerClassId}", System.Uri.EscapeDataString(System.Convert.ToString(customerClassId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerClassDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerClassDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerClassDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific customer's balance</summary>
        /// <param name="customerCd">Identifies the customer for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerBalanceDto> GetCustomerBalanceBycustomerCdAsync(string customerCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}/balance");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerBalanceDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBalanceDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerBalanceDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get direct debit information for a specific customer(only for Netherlands)</summary>
        /// <param name="customerCd">Identifies the customer for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitDto>> GetCustomerDirectDebitBycustomerCdAsync(string customerCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}/directdebit");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of SO Orders of a specific customer</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>> GetAllOrderForCustomerBycustomerCdAsync(string customerCd, string orderType = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}/salesorder?");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
            if (orderType != null) urlBuilder_.Append("orderType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of SO Orders Basic of a specific customer</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>> GetAllSalesOrderBasicForCustomerBycustomerCdAsync(string customerCd, string orderType = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}/salesorderbasic?");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
            if (orderType != null) urlBuilder_.Append("orderType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Contacts of a specific customer</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContactDto>> GetAllContactsForCustomerBycustomerCdAsync(string customerCd, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}/contact?");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ContactDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ContactDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ContactDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the balance for a range of customers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerBalanceDto>> GetAllCustomerBalanceAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/balance?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerBalanceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerBalanceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerBalanceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific customer's note</summary>
        /// <param name="customerCd">Identifies the customer for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NoteDto> GetCustomerNoteBycustomerCdAsync(string customerCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}/note");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(NoteDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NoteDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(NoteDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific customer</summary>
        /// <param name="customerCd">Identifies the customer</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerDto> GetBycustomerCdAsync(string customerCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a specific customer</summary>
        /// <param name="customerCd">Identifies the customer to update</param>
        /// <param name="customer">The data to update for the customer</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBycustomerCdAsync(string customerCd, CustomerUpdateDto customer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerCd == null)
                throw new System.ArgumentNullException("customerCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerCd}");
            urlBuilder_.Replace("{customerCd}", System.Uri.EscapeDataString(System.Convert.ToString(customerCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(customer, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of customers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string name = null, Status? status = null, string corporateId = null, string vatRegistrationId = null, string email = null, string phone = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, string createdDateTime = null, string createdDateTimeCondition = null, string attributes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (name != null) urlBuilder_.Append("name=").Append(System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (corporateId != null) urlBuilder_.Append("corporateId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(corporateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (vatRegistrationId != null) urlBuilder_.Append("vatRegistrationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(vatRegistrationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (email != null) urlBuilder_.Append("email=").Append(System.Uri.EscapeDataString(System.Convert.ToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (phone != null) urlBuilder_.Append("phone=").Append(System.Uri.EscapeDataString(System.Convert.ToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdDateTime != null) urlBuilder_.Append("createdDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(createdDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdDateTimeCondition != null) urlBuilder_.Append("createdDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(createdDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (attributes != null) urlBuilder_.Append("attributes=").Append(System.Uri.EscapeDataString(System.Convert.ToString(attributes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a customer</summary>
        /// <param name="customer">Defines the data for the customer to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(CustomerUpdateDto customer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(customer, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of invoices for a specific customer</summary>
        /// <param name="customerNumber">Identifies the customer for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>> GetAllInvoicesForCustomerBycustomerNumberAsync(string customerNumber, DocumentType3? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerNumber == null)
                throw new System.ArgumentNullException("customerNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerNumber}/invoice?");
            urlBuilder_.Replace("{customerNumber}", System.Uri.EscapeDataString(System.Convert.ToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of cash sales for a specific customer</summary>
        /// <param name="customerNumber">Identifies the customer for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CashSaleDto>> GetAllCashSalesForCustomerBycustomerNumberAsync(string customerNumber, DocumentType4? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerNumber == null)
                throw new System.ArgumentNullException("customerNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerNumber}/cashSale?");
            urlBuilder_.Replace("{customerNumber}", System.Uri.EscapeDataString(System.Convert.ToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CashSaleDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CashSaleDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CashSaleDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a range of documents for a specific customer</summary>
        /// <param name="customerNumber">Identifies the customer for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>> GetAllDocumentsForCustomerBycustomerNumberAsync(string customerNumber, DocumentType5? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerNumber == null)
                throw new System.ArgumentNullException("customerNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customerNumber}/document?");
            urlBuilder_.Replace("{customerNumber}", System.Uri.EscapeDataString(System.Convert.ToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates dunning letters for a specific customer</summary>
        /// <param name="customer">Reference number of the customer for which the dunning letters will be created</param>
        /// <param name="createDunningLetterActionDto">Defines the data for the dunning letters to be created</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateDunningLetterActionResultDto> CreateDunningLetterActionBycustomerAsync(string customer, CreateDunningLetterActionDto createDunningLetterActionDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customer == null)
                throw new System.ArgumentNullException("customer");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customer/{customer}/action/createDunningLetter");
            urlBuilder_.Replace("{customer}", System.Uri.EscapeDataString(System.Convert.ToString(customer, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createDunningLetterActionDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CreateDunningLetterActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateDunningLetterActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CreateDunningLetterActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CustomerContractClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CustomerContractClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Customer Contract</summary>
        /// <param name="contractId">Identifies the customer contract</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerContractDto> GetCustomerContractBycontractIdAsync(string contractId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerContract/{contractId}");
            urlBuilder_.Replace("{contractId}", System.Uri.EscapeDataString(System.Convert.ToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerContractDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerContractDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Customer Contracts, a filter needs to be specified</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerContractDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, string contractTemplate = null, Status2? status = null, string customer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerContract?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (contractTemplate != null) urlBuilder_.Append("contractTemplate=").Append(System.Uri.EscapeDataString(System.Convert.ToString(contractTemplate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customer != null) urlBuilder_.Append("customer=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerContractDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerContractDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerContractDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a CustomerContract</summary>
        /// <param name="customerContract">Defines the data for the CustomerContract to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateCustomerContractAsync(CustomerContractUpdateDto customerContract, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerContract");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(customerContract, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Customer Contract Summary</summary>
        /// <param name="contractId">Identifies the customer contract</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerContractSummaryDto> GetCustomerContractSummaryBycontractIdAsync(string contractId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerContract/{contractId}/summary");
            urlBuilder_.Replace("{contractId}", System.Uri.EscapeDataString(System.Convert.ToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerContractSummaryDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractSummaryDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerContractSummaryDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Customer Contract Details</summary>
        /// <param name="contractId">Identifies the customer contract</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerContractDetailsDto> GetCustomerContractDetailsBycontractIdAsync(string contractId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerContract/{contractId}/details");
            urlBuilder_.Replace("{contractId}", System.Uri.EscapeDataString(System.Convert.ToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerContractDetailsDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractDetailsDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerContractDetailsDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Customer Contract Recurring Summary</summary>
        /// <param name="contractId">Identifies the customer contract</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerContractRecurringSummaryDto> GetCustomerContractRecurringSummaryBycontractIdAsync(string contractId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerContract/{contractId}/recurringSummary");
            urlBuilder_.Replace("{contractId}", System.Uri.EscapeDataString(System.Convert.ToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerContractRecurringSummaryDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractRecurringSummaryDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerContractRecurringSummaryDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific CustomerContract</summary>
        /// <param name="customerContractId">Identifies the CustomerContract to update</param>
        /// <param name="customerContract">Defines the data for the CustomerContract to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBycustomerContractIdAsync(string customerContractId, CustomerContractUpdateDto customerContract, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerContractId == null)
                throw new System.ArgumentNullException("customerContractId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerContract/{customerContractId}");
            urlBuilder_.Replace("{customerContractId}", System.Uri.EscapeDataString(System.Convert.ToString(customerContractId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(customerContract, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CustomerDocumentClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CustomerDocumentClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Gets a range of Customer Documents</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>> GetAllDocumentsAsync(DocumentType6? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerdocument?");
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerDocumentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CustomerInvoiceClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CustomerInvoiceClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get all Work Types</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WorkTypeDto>> GetWorkTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/worktypes");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<WorkTypeDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<WorkTypeDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<WorkTypeDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Invoice</summary>
        /// <param name="invoiceNumber">Identifies the Invoice</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerInvoiceDto> GetByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/{invoiceNumber}");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerInvoiceDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInvoiceDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerInvoiceDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Invoice</summary>
        /// <param name="invoiceNumber">Identifies the Invoice to update</param>
        /// <param name="invoice">Defines the data for the Invoice to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByinvoiceNumberAsync(string invoiceNumber, CustomerInvoiceUpdateDto invoice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/{invoiceNumber}");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(invoice, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Invoices</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>> GetAllInvoicesAsync(DocumentType7? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice?");
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an Invoice</summary>
        /// <param name="invoice">Defines the data for the Invoice to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateInvoiceAsync(CustomerInvoiceUpdateDto invoice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(invoice, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Rot Rut informations for a Customer Invoice</summary>
        /// <param name="refNbr">Identify the customer invoice for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RotRutDto> GetRotRutByrefNbrAsync(string refNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (refNbr == null)
                throw new System.ArgumentNullException("refNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/{refNbr}/rotrut");
            urlBuilder_.Replace("{refNbr}", System.Uri.EscapeDataString(System.Convert.ToString(refNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(RotRutDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<RotRutDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(RotRutDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with an invoice. If the file already exists, a new revision is created.</summary>
        /// <param name="invoiceNumber">Identifies the invoice</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateHeaderAttachmentByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/{invoiceNumber}/attachment");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a certain invoice line. If the file already exists, a new revision is created.</summary>
        /// <param name="invoiceNumber">Identifies the invoice</param>
        /// <param name="lineNumber">Specifies line number</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateLineAttachmentByinvoiceNumberlineNumberAsync(string invoiceNumber, int lineNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            if (lineNumber == null)
                throw new System.ArgumentNullException("lineNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/{invoiceNumber}/{lineNumber}/attachment");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lineNumber}", System.Uri.EscapeDataString(System.Convert.ToString(lineNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release invoice operation</summary>
        /// <param name="invoiceNumber">Reference number of the invoice to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseInvoiceActionResultDto> ReleaseInvoiceByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/{invoiceNumber}/action/release");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseInvoiceActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInvoiceActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseInvoiceActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Reverse an Invoice</summary>
        /// <param name="invoiceNumber">Reference number of the released invoice to be reversed</param>
        /// <param name="reverseActionDto">The action the dto use to condition the action</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReverseInvoiceActionResultDto> ReverseInvoiceByinvoiceNumberAsync(string invoiceNumber, ReverseInvoiceActionDto reverseActionDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerinvoice/{invoiceNumber}/action/reverse");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(reverseActionDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReverseInvoiceActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReverseInvoiceActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReverseInvoiceActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class CustomerSalesPriceClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public CustomerSalesPriceClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of Customer Sales Prices</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CustomerSalesPriceDto>> GetCustomerSalesPricesAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, PriceType? priceType = null, string priceCode = null, string inventoryId = null, System.DateTimeOffset? effectiveAsOf = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/customerSalesPrice?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (priceType != null) urlBuilder_.Append("priceType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(priceType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (priceCode != null) urlBuilder_.Append("priceCode=").Append(System.Uri.EscapeDataString(System.Convert.ToString(priceCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (inventoryId != null) urlBuilder_.Append("inventoryId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(inventoryId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (effectiveAsOf != null) urlBuilder_.Append("effectiveAsOf=").Append(System.Uri.EscapeDataString(effectiveAsOf.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<CustomerSalesPriceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<CustomerSalesPriceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<CustomerSalesPriceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class DepartmentClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public DepartmentClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific department</summary>
        /// <param name="departmentId">Identifies the department</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DepartmentDto> GetDepartmentBydepartmentIdAsync(string departmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (departmentId == null)
                throw new System.ArgumentNullException("departmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/department/{departmentId}");
            urlBuilder_.Replace("{departmentId}", System.Uri.EscapeDataString(System.Convert.ToString(departmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DepartmentDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DepartmentDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DepartmentDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a specific department</summary>
        /// <param name="departmentId">Identifies the department to update</param>
        /// <param name="departmentUpdateDto">The data to update the department with</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> UpdateDepartmentBydepartmentIdAsync(string departmentId, DepartmentUpdateBaseDto departmentUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (departmentId == null)
                throw new System.ArgumentNullException("departmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/department/{departmentId}");
            urlBuilder_.Replace("{departmentId}", System.Uri.EscapeDataString(System.Convert.ToString(departmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(departmentUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of department</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DepartmentDto>> GetAllDepartmentDtosAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/department?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<DepartmentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<DepartmentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<DepartmentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a department</summary>
        /// <param name="departmentUpdateDto">Defines the data for the department to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateDepartmentAsync(DepartmentUpdateBaseDto departmentUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/department");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(departmentUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class DimensionClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public DimensionClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a list of all Dimension names/IDs</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetDimensionListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/dimension");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Dimension</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DtoDimension> GetDimensionBydimensionIdAsync(string dimensionId, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (dimensionId == null)
                throw new System.ArgumentNullException("dimensionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/dimension/{dimensionId}?");
            urlBuilder_.Replace("{dimensionId}", System.Uri.EscapeDataString(System.Convert.ToString(dimensionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DtoDimension); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DtoDimension>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DtoDimension);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Segment for a specific Dimension</summary>
        /// <param name="dimensionId">Identifies the Dimension</param>
        /// <param name="segmentId">Identifies the Segment</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DtoSegment> GetSegmentBydimensionIdsegmentIdAsync(string dimensionId, int segmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (dimensionId == null)
                throw new System.ArgumentNullException("dimensionId");
    
            if (segmentId == null)
                throw new System.ArgumentNullException("segmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/dimension/{dimensionId}/{segmentId}");
            urlBuilder_.Replace("{dimensionId}", System.Uri.EscapeDataString(System.Convert.ToString(dimensionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segmentId}", System.Uri.EscapeDataString(System.Convert.ToString(segmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DtoSegment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DtoSegment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DtoSegment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a Segment</summary>
        /// <param name="dimensionId">Identifies the Dimension for which the Segment is defined</param>
        /// <param name="segmentId">Identifies the Segment</param>
        /// <param name="update">Defines the data for the Segment to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> UpdateSegmentBydimensionIdsegmentIdAsync(string dimensionId, int segmentId, DtoSegmentUpdateDto update, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (dimensionId == null)
                throw new System.ArgumentNullException("dimensionId");
    
            if (segmentId == null)
                throw new System.ArgumentNullException("segmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/dimension/{dimensionId}/{segmentId}");
            urlBuilder_.Replace("{dimensionId}", System.Uri.EscapeDataString(System.Convert.ToString(dimensionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segmentId}", System.Uri.EscapeDataString(System.Convert.ToString(segmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(update, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific SegmentValue for a specific Segment for a specific Dimension</summary>
        /// <param name="dimensionId">Identifies the Dimension</param>
        /// <param name="segmentId">Identifies the Segment</param>
        /// <param name="valueId">Identifies the SegmentValue by Id. Must be Base64 encoded.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DtoSegmentValue> GetSegmentValueBydimensionIdsegmentIdvalueIdAsync(string dimensionId, int segmentId, string valueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (dimensionId == null)
                throw new System.ArgumentNullException("dimensionId");
    
            if (segmentId == null)
                throw new System.ArgumentNullException("segmentId");
    
            if (valueId == null)
                throw new System.ArgumentNullException("valueId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/dimension/{dimensionId}/{segmentId}/{valueId}");
            urlBuilder_.Replace("{dimensionId}", System.Uri.EscapeDataString(System.Convert.ToString(dimensionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segmentId}", System.Uri.EscapeDataString(System.Convert.ToString(segmentId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{valueId}", System.Uri.EscapeDataString(System.Convert.ToString(valueId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DtoSegmentValue); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DtoSegmentValue>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DtoSegmentValue);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific SegmentValue for a specific Segment for a specific Dimension</summary>
        /// <param name="dimensionId">Identifies the Dimension</param>
        /// <param name="segmentId">Identifies the Segment</param>
        /// <param name="publicId">Identifies the SegmentValue by its publicId</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DtoSegmentValue> GetSegmentValueBydimensionIdsegmentIdpublicIdAsync(string dimensionId, int segmentId, System.Guid publicId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (dimensionId == null)
                throw new System.ArgumentNullException("dimensionId");
    
            if (segmentId == null)
                throw new System.ArgumentNullException("segmentId");
    
            if (publicId == null)
                throw new System.ArgumentNullException("publicId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/dimension/{dimensionId}/{segmentId}/publicid/{publicId}");
            urlBuilder_.Replace("{dimensionId}", System.Uri.EscapeDataString(System.Convert.ToString(dimensionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segmentId}", System.Uri.EscapeDataString(System.Convert.ToString(segmentId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{publicId}", System.Uri.EscapeDataString(System.Convert.ToString(publicId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DtoSegmentValue); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DtoSegmentValue>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DtoSegmentValue);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class EmployeeClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public EmployeeClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific employee</summary>
        /// <param name="employeeCd">Identifies the employee</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EmployeeDto> GetEmployeeByemployeeCdAsync(string employeeCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeCd == null)
                throw new System.ArgumentNullException("employeeCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/employee/{employeeCd}");
            urlBuilder_.Replace("{employeeCd}", System.Uri.EscapeDataString(System.Convert.ToString(employeeCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(EmployeeDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<EmployeeDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(EmployeeDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of employees</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EmployeeDto>> GetAllEmplyeeAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/employee?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<EmployeeDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<EmployeeDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<EmployeeDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific employee time cards</summary>
        /// <param name="employeeCd">Identifies the employee</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeCardDto>> GetEmployeeTimeCardsByemployeeCdAsync(string employeeCd, Status3? status = null, string week = null, Type? type = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeCd == null)
                throw new System.ArgumentNullException("employeeCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/employee/{employeeCd}/timecards?");
            urlBuilder_.Replace("{employeeCd}", System.Uri.EscapeDataString(System.Convert.ToString(employeeCd, System.Globalization.CultureInfo.InvariantCulture)));
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (week != null) urlBuilder_.Append("week=").Append(System.Uri.EscapeDataString(System.Convert.ToString(week, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (type != null) urlBuilder_.Append("type=").Append(System.Uri.EscapeDataString(System.Convert.ToString(type.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<TimeCardDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<TimeCardDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<TimeCardDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get expense claims for a specific employee</summary>
        /// <param name="employeeCd">Identifies the employee</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>> GetEmployeeExpenseClaimsByemployeeCdAsync(string employeeCd, Status4? status = null, System.DateTimeOffset? date = null, string customer = null, string departmentId = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeCd == null)
                throw new System.ArgumentNullException("employeeCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/employee/{employeeCd}/expenseClaim?");
            urlBuilder_.Replace("{employeeCd}", System.Uri.EscapeDataString(System.Convert.ToString(employeeCd, System.Globalization.CultureInfo.InvariantCulture)));
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (date != null) urlBuilder_.Append("date=").Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customer != null) urlBuilder_.Append("customer=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (departmentId != null) urlBuilder_.Append("departmentId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(departmentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get expense receipts for a specific employee</summary>
        /// <param name="employeeCd">Identifies the employee</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>> GetEmployeeExpenseReceiptsByemployeeCdAsync(string employeeCd, string date = null, string dateCondition = null, string inventory = null, string project = null, string claimedBy = null, string projectTask = null, bool? invoiceable = null, Status5? status = null, string customer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeCd == null)
                throw new System.ArgumentNullException("employeeCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/employee/{employeeCd}/expenseReceipt?");
            urlBuilder_.Replace("{employeeCd}", System.Uri.EscapeDataString(System.Convert.ToString(employeeCd, System.Globalization.CultureInfo.InvariantCulture)));
            if (date != null) urlBuilder_.Append("date=").Append(System.Uri.EscapeDataString(System.Convert.ToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dateCondition != null) urlBuilder_.Append("dateCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dateCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (inventory != null) urlBuilder_.Append("inventory=").Append(System.Uri.EscapeDataString(System.Convert.ToString(inventory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (project != null) urlBuilder_.Append("project=").Append(System.Uri.EscapeDataString(System.Convert.ToString(project, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (claimedBy != null) urlBuilder_.Append("claimedBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(claimedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (projectTask != null) urlBuilder_.Append("projectTask=").Append(System.Uri.EscapeDataString(System.Convert.ToString(projectTask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (invoiceable != null) urlBuilder_.Append("invoiceable=").Append(System.Uri.EscapeDataString(System.Convert.ToString(invoiceable.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customer != null) urlBuilder_.Append("customer=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class ExpenseClaimClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public ExpenseClaimClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Expense Claim</summary>
        /// <param name="expenseClaimCd">Identifies the expense claim</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExpenseClaimDto> GetExpenseClaimByexpenseClaimCdAsync(string expenseClaimCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (expenseClaimCd == null)
                throw new System.ArgumentNullException("expenseClaimCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseClaim/{expenseClaimCd}");
            urlBuilder_.Replace("{expenseClaimCd}", System.Uri.EscapeDataString(System.Convert.ToString(expenseClaimCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExpenseClaimDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseClaimDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ExpenseClaimDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Expense Claims, a filter needs to be specified</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>> GetAllAsync(Status6? status = null, System.DateTimeOffset? date = null, string customer = null, string departmentId = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseClaim?");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (date != null) urlBuilder_.Append("date=").Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customer != null) urlBuilder_.Append("customer=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (departmentId != null) urlBuilder_.Append("departmentId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(departmentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an ExpenseClaim</summary>
        /// <param name="expenseClaim">Defines the data for the ExpenseClaim to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateExpenseClaimAsync(ExpenseClaimUpdateDto expenseClaim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseClaim");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(expenseClaim, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific ExpenseClaim</summary>
        /// <param name="expenseClaimNbr">Identifies the ExpenseClaim to update</param>
        /// <param name="expenseClaim">Defines the data for the ExpenseClaim to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByexpenseClaimNbrAsync(string expenseClaimNbr, ExpenseClaimUpdateDto expenseClaim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (expenseClaimNbr == null)
                throw new System.ArgumentNullException("expenseClaimNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseClaim/{expenseClaimNbr}");
            urlBuilder_.Replace("{expenseClaimNbr}", System.Uri.EscapeDataString(System.Convert.ToString(expenseClaimNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(expenseClaim, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class ExpenseReceiptClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public ExpenseReceiptClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific ExpenseReceipt</summary>
        /// <param name="receiptNumber">Identifies the ExpenseReceipt</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExpenseReceiptDto> GetByreceiptNumberAsync(string receiptNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptNumber == null)
                throw new System.ArgumentNullException("receiptNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseReceipt/{receiptNumber}");
            urlBuilder_.Replace("{receiptNumber}", System.Uri.EscapeDataString(System.Convert.ToString(receiptNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExpenseReceiptDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseReceiptDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ExpenseReceiptDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a Expense Receipt</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByreceiptNumberAsync(string receiptNumber, ExpenseReceiptUpdateDto expenseReceiptUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptNumber == null)
                throw new System.ArgumentNullException("receiptNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseReceipt/{receiptNumber}");
            urlBuilder_.Replace("{receiptNumber}", System.Uri.EscapeDataString(System.Convert.ToString(receiptNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(expenseReceiptUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Expense Receipts, a filter needs to be specified</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>> GetAllAsync(string date = null, string dateCondition = null, string inventory = null, string project = null, string claimedBy = null, string projectTask = null, bool? invoiceable = null, Status7? status = null, string customer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseReceipt?");
            if (date != null) urlBuilder_.Append("date=").Append(System.Uri.EscapeDataString(System.Convert.ToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dateCondition != null) urlBuilder_.Append("dateCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dateCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (inventory != null) urlBuilder_.Append("inventory=").Append(System.Uri.EscapeDataString(System.Convert.ToString(inventory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (project != null) urlBuilder_.Append("project=").Append(System.Uri.EscapeDataString(System.Convert.ToString(project, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (claimedBy != null) urlBuilder_.Append("claimedBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(claimedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (projectTask != null) urlBuilder_.Append("projectTask=").Append(System.Uri.EscapeDataString(System.Convert.ToString(projectTask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (invoiceable != null) urlBuilder_.Append("invoiceable=").Append(System.Uri.EscapeDataString(System.Convert.ToString(invoiceable.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customer != null) urlBuilder_.Append("customer=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ExpenseReceiptDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Expense Receipt</summary>
        /// <param name="expenseReceiptUpdateDto">Defines the data for the Expense Receipt to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(ExpenseReceiptUpdateDto expenseReceiptUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/expenseReceipt");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(expenseReceiptUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class FinancialPeriodClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public FinancialPeriodClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of Financial Periods</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FinancialPeriodDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/financialPeriod?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<FinancialPeriodDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<FinancialPeriodDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<FinancialPeriodDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Financial Period</summary>
        /// <param name="financialPeriodId">Identifies the Financial Period</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FinancialPeriodDto> GetByfinancialPeriodIdAsync(string financialPeriodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (financialPeriodId == null)
                throw new System.ArgumentNullException("financialPeriodId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/financialPeriod/{financialPeriodId}");
            urlBuilder_.Replace("{financialPeriodId}", System.Uri.EscapeDataString(System.Convert.ToString(financialPeriodId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(FinancialPeriodDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialPeriodDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(FinancialPeriodDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class GeneralLedgerBalanceClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public GeneralLedgerBalanceClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of General Ledger Balances</summary>
        /// <param name="orderBy">Order Options: AccountId, FinancialPeriod</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeneralLedgerBalanceDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string periodId = null, string periodIdCondition = null, string orderBy = null, string accountId = null, int? yearClosed = null, BalanceType? balanceType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/generalLedgerBalance?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (periodId != null) urlBuilder_.Append("periodId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(periodId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (periodIdCondition != null) urlBuilder_.Append("periodIdCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(periodIdCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (accountId != null) urlBuilder_.Append("accountId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(accountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (yearClosed != null) urlBuilder_.Append("yearClosed=").Append(System.Uri.EscapeDataString(System.Convert.ToString(yearClosed.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (balanceType != null) urlBuilder_.Append("balanceType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(balanceType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<GeneralLedgerBalanceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<GeneralLedgerBalanceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<GeneralLedgerBalanceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class GeneralLedgerTransactionsClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public GeneralLedgerTransactionsClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of General Ledger Transactions</summary>
        /// <param name="ledger">Mandatory</param>
        /// <param name="fromPeriod">Mandatory</param>
        /// <param name="toPeriod">Mandatory</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeneralLedgerTransactionDetailsDto>> GetAllAsync(string branch = null, string ledger = null, string fromPeriod = null, string toPeriod = null, string account = null, string subaccountId = null, string fromDate = null, string toDate = null, bool? includeUnposted = null, bool? includeUnreleased = null, int? skipRecords = null, int? numberToRead = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/GeneralLedgerTransactions?");
            if (branch != null) urlBuilder_.Append("branch=").Append(System.Uri.EscapeDataString(System.Convert.ToString(branch, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (ledger != null) urlBuilder_.Append("ledger=").Append(System.Uri.EscapeDataString(System.Convert.ToString(ledger, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromPeriod != null) urlBuilder_.Append("fromPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(fromPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toPeriod != null) urlBuilder_.Append("toPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(toPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (account != null) urlBuilder_.Append("account=").Append(System.Uri.EscapeDataString(System.Convert.ToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (subaccountId != null) urlBuilder_.Append("subaccountId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subaccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromDate != null) urlBuilder_.Append("fromDate=").Append(System.Uri.EscapeDataString(System.Convert.ToString(fromDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toDate != null) urlBuilder_.Append("toDate=").Append(System.Uri.EscapeDataString(System.Convert.ToString(toDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (includeUnposted != null) urlBuilder_.Append("includeUnposted=").Append(System.Uri.EscapeDataString(System.Convert.ToString(includeUnposted.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (includeUnreleased != null) urlBuilder_.Append("includeUnreleased=").Append(System.Uri.EscapeDataString(System.Convert.ToString(includeUnreleased.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<GeneralLedgerTransactionDetailsDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<GeneralLedgerTransactionDetailsDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<GeneralLedgerTransactionDetailsDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class InventoryClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public InventoryClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get Inventory Item Classes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ItemClassDto>> GetItemClassesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventory/itemClass");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ItemClassDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ItemClassDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ItemClassDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Specific Inventory Item Class</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ItemClassDto> GetSpecificItemClassByitemClassNumberAsync(string itemClassNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (itemClassNumber == null)
                throw new System.ArgumentNullException("itemClassNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventory/itemclass/{itemClassNumber}");
            urlBuilder_.Replace("{itemClassNumber}", System.Uri.EscapeDataString(System.Convert.ToString(itemClassNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ItemClassDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ItemClassDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ItemClassDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Inventory Item Post Classes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PostingClassDto>> GetItemPostClassesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventory/itemPostClass");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PostingClassDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PostingClassDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PostingClassDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Inventory item</summary>
        /// <param name="inventoryNumber">Identifies the Inventory item</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InventoryDto> GetByinventoryNumberAsync(string inventoryNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inventoryNumber == null)
                throw new System.ArgumentNullException("inventoryNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventory/{inventoryNumber}");
            urlBuilder_.Replace("{inventoryNumber}", System.Uri.EscapeDataString(System.Convert.ToString(inventoryNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(InventoryDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(InventoryDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Inventory items</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InventoryDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, string alternateID = null, int? salesCategory = null, string attributes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventory?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (alternateID != null) urlBuilder_.Append("alternateID=").Append(System.Uri.EscapeDataString(System.Convert.ToString(alternateID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (salesCategory != null) urlBuilder_.Append("salesCategory=").Append(System.Uri.EscapeDataString(System.Convert.ToString(salesCategory.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (attributes != null) urlBuilder_.Append("attributes=").Append(System.Uri.EscapeDataString(System.Convert.ToString(attributes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<InventoryDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<InventoryDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<InventoryDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an inventory item</summary>
        /// <param name="inventory">Define the data for the inventory item to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(InventoryUpdateDto inventory, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventory");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(inventory, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific inventory item</summary>
        /// <param name="inventoryCd">Identifies the inventory item to update</param>
        /// <param name="inventory">The data to update for inventory item</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByinventoryCdAsync(string inventoryCd, InventoryUpdateDto inventory, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inventoryCd == null)
                throw new System.ArgumentNullException("inventoryCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventory/{inventoryCd}");
            urlBuilder_.Replace("{inventoryCd}", System.Uri.EscapeDataString(System.Convert.ToString(inventoryCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(inventory, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class InventoryAdjustmentClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public InventoryAdjustmentClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Inventory Adjustment document</summary>
        /// <param name="inventoryAdjustmentNumber">Identifies the Inventory Adjustment document</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InventoryAdjustmentDto> GetByinventoryAdjustmentNumberAsync(string inventoryAdjustmentNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inventoryAdjustmentNumber == null)
                throw new System.ArgumentNullException("inventoryAdjustmentNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryadjustment/{inventoryAdjustmentNumber}");
            urlBuilder_.Replace("{inventoryAdjustmentNumber}", System.Uri.EscapeDataString(System.Convert.ToString(inventoryAdjustmentNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(InventoryAdjustmentDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryAdjustmentDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(InventoryAdjustmentDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Inventory Adjustment Dto</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryadjustment?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an inventory item</summary>
        /// <param name="inventoryAdjustment">Define the data for the inventory adjustment to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(InventoryAdjustmentUpdateDto inventoryAdjustment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryadjustment");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(inventoryAdjustment, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release inventory document action</summary>
        /// <param name="adjRefNumber">Reference number of the released adjustment to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseInventoryDocumentActionResultDto> ReleaseDocumentByadjRefNumberAsync(string adjRefNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (adjRefNumber == null)
                throw new System.ArgumentNullException("adjRefNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryadjustment/{adjRefNumber}/action/release");
            urlBuilder_.Replace("{adjRefNumber}", System.Uri.EscapeDataString(System.Convert.ToString(adjRefNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseInventoryDocumentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInventoryDocumentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseInventoryDocumentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific inventory item</summary>
        /// <param name="adjRefNumber">Identifies the inventory item to update</param>
        /// <param name="adjustment">The data to update for inventory item</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByadjRefNumberAsync(string adjRefNumber, InventoryAdjustmentUpdateDto adjustment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (adjRefNumber == null)
                throw new System.ArgumentNullException("adjRefNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryadjustment/{adjRefNumber}");
            urlBuilder_.Replace("{adjRefNumber}", System.Uri.EscapeDataString(System.Convert.ToString(adjRefNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(adjustment, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class InventoryIssueClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public InventoryIssueClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Inventory Issue document</summary>
        /// <param name="inventoryIssueNumber">Identifies the Inventory Issue document</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InventoryIssueDto> GetByinventoryIssueNumberAsync(string inventoryIssueNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inventoryIssueNumber == null)
                throw new System.ArgumentNullException("inventoryIssueNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryissue/{inventoryIssueNumber}");
            urlBuilder_.Replace("{inventoryIssueNumber}", System.Uri.EscapeDataString(System.Convert.ToString(inventoryIssueNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(InventoryIssueDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryIssueDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(InventoryIssueDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Inventory items</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InventoryIssueDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryissue?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<InventoryIssueDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<InventoryIssueDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<InventoryIssueDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an inventory item</summary>
        /// <param name="inventoryIssue">Define the data for the inventory issue to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(InventoryIssueUpdateDto inventoryIssue, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryissue");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(inventoryIssue, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release inventory operation</summary>
        /// <param name="invoiceNumber">Reference number of the released issue to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseInventoryDocumentActionResultDto> ReleaseDocumentByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryissue/{invoiceNumber}/action/release");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseInventoryDocumentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInventoryDocumentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseInventoryDocumentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific inventory item</summary>
        /// <param name="issueRefNumber">Identifies the inventory item to update</param>
        /// <param name="issue">The data to update for inventory item</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByissueRefNumberAsync(string issueRefNumber, InventoryIssueUpdateDto issue, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (issueRefNumber == null)
                throw new System.ArgumentNullException("issueRefNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryissue/{issueRefNumber}");
            urlBuilder_.Replace("{issueRefNumber}", System.Uri.EscapeDataString(System.Convert.ToString(issueRefNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(issue, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class InventoryReceiptClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public InventoryReceiptClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Inventory Receipt document</summary>
        /// <param name="inventoryReceiptNumber">Identifies the Inventory Issue document</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InventoryReceiptDto> GetByinventoryReceiptNumberAsync(string inventoryReceiptNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inventoryReceiptNumber == null)
                throw new System.ArgumentNullException("inventoryReceiptNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryReceipt/{inventoryReceiptNumber}");
            urlBuilder_.Replace("{inventoryReceiptNumber}", System.Uri.EscapeDataString(System.Convert.ToString(inventoryReceiptNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(InventoryReceiptDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryReceiptDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(InventoryReceiptDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Inventory Receipts</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InventoryReceiptDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryReceipt?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<InventoryReceiptDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<InventoryReceiptDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<InventoryReceiptDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an inventory item</summary>
        /// <param name="inventoryReceipt">Define the data for the inventory issue to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(InventoryReceiptUpdateDto inventoryReceipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryReceipt");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(inventoryReceipt, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release inventory operation</summary>
        /// <param name="invoiceNumber">Reference number of the released issue to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseInventoryDocumentActionResultDto> ReleaseDocumentByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryReceipt/{invoiceNumber}/action/release");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseInventoryDocumentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInventoryDocumentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseInventoryDocumentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific inventory item</summary>
        /// <param name="receiptRefNumber">Identifies the inventory receipt to update</param>
        /// <param name="receipt">The data to update for inventory receipt</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByreceiptRefNumberAsync(string receiptRefNumber, InventoryReceiptUpdateDto receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptRefNumber == null)
                throw new System.ArgumentNullException("receiptRefNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryReceipt/{receiptRefNumber}");
            urlBuilder_.Replace("{receiptRefNumber}", System.Uri.EscapeDataString(System.Convert.ToString(receiptRefNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(receipt, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class InventorySummaryClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public InventorySummaryClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of InventorySummary</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InventorySummaryDto>> GetAllInventorySummaryByinventoryNumberAsync(string inventoryNumber, string warehouse = null, string location = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inventoryNumber == null)
                throw new System.ArgumentNullException("inventoryNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventorysummary/{inventoryNumber}?");
            urlBuilder_.Replace("{inventoryNumber}", System.Uri.EscapeDataString(System.Convert.ToString(inventoryNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (warehouse != null) urlBuilder_.Append("warehouse=").Append(System.Uri.EscapeDataString(System.Convert.ToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (location != null) urlBuilder_.Append("location=").Append(System.Uri.EscapeDataString(System.Convert.ToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<InventorySummaryDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<InventorySummaryDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<InventorySummaryDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class InventoryTransferClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public InventoryTransferClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Inventory Transfer document</summary>
        /// <param name="inventoryTransferNumber">Identifies the Inventory Transfer document</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InventoryTransferDto> GetByinventoryTransferNumberAsync(string inventoryTransferNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inventoryTransferNumber == null)
                throw new System.ArgumentNullException("inventoryTransferNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryTransfer/{inventoryTransferNumber}");
            urlBuilder_.Replace("{inventoryTransferNumber}", System.Uri.EscapeDataString(System.Convert.ToString(inventoryTransferNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(InventoryTransferDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryTransferDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(InventoryTransferDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Inventory Transfers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InventoryTransferDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryTransfer?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<InventoryTransferDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<InventoryTransferDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<InventoryTransferDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an inventory transfer</summary>
        /// <param name="inventoryTransfer">Define the data for the inventory transfer to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(InventoryTransferUpdateDto inventoryTransfer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryTransfer");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(inventoryTransfer, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release inventory operation</summary>
        /// <param name="transferNumber">Reference number of the released transfer to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseInventoryDocumentActionResultDto> ReleaseDocumentBytransferNumberAsync(string transferNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (transferNumber == null)
                throw new System.ArgumentNullException("transferNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryTransfer/{transferNumber}/action/release");
            urlBuilder_.Replace("{transferNumber}", System.Uri.EscapeDataString(System.Convert.ToString(transferNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseInventoryDocumentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInventoryDocumentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseInventoryDocumentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific inventory transfer</summary>
        /// <param name="transferRefNumber">Identifies the inventory transfer to update</param>
        /// <param name="transfer">The data to update for inventory transfer</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBytransferRefNumberAsync(string transferRefNumber, InventoryTransferUpdateDto transfer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (transferRefNumber == null)
                throw new System.ArgumentNullException("transferRefNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/inventoryTransfer/{transferRefNumber}");
            urlBuilder_.Replace("{transferRefNumber}", System.Uri.EscapeDataString(System.Convert.ToString(transferRefNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(transfer, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class JournalTransactionClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public JournalTransactionClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Journal Transaction</summary>
        /// <param name="journalTransactionNumber">Identifies the Journal Transaction</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JournalTransactionDto> GetSpecificJournalTransactionsByjournalTransactionNumberAsync(string journalTransactionNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (journalTransactionNumber == null)
                throw new System.ArgumentNullException("journalTransactionNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/journaltransaction/{journalTransactionNumber}");
            urlBuilder_.Replace("{journalTransactionNumber}", System.Uri.EscapeDataString(System.Convert.ToString(journalTransactionNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(JournalTransactionDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<JournalTransactionDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(JournalTransactionDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a Journal Transaction</summary>
        /// <param name="journalTransactionNumber">Identifies the Journal Transaction to update</param>
        /// <param name="journalTransaction">Defines the data for the Journal Transaction to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByjournalTransactionNumberAsync(string journalTransactionNumber, JournalTransactionUpdateDto journalTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (journalTransactionNumber == null)
                throw new System.ArgumentNullException("journalTransactionNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/journaltransaction/{journalTransactionNumber}");
            urlBuilder_.Replace("{journalTransactionNumber}", System.Uri.EscapeDataString(System.Convert.ToString(journalTransactionNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(journalTransaction, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Journal Transactions</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JournalTransactionDto>> GetAllJournalTransactionsAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, string customerSupplierStart = null, string customerSupplierEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/journaltransaction?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerSupplierStart != null) urlBuilder_.Append("customerSupplierStart=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customerSupplierStart, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerSupplierEnd != null) urlBuilder_.Append("customerSupplierEnd=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customerSupplierEnd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<JournalTransactionDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<JournalTransactionDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<JournalTransactionDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Journal Transaction</summary>
        /// <param name="journalTransaction">Defines the data for the Journal Transaction to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(JournalTransactionUpdateDto journalTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/journaltransaction");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(journalTransaction, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class LedgerClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public LedgerClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a range of Ledgers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LedgerDto>> GetAllLedgersAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/ledger?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<LedgerDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<LedgerDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<LedgerDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class NumberSequenceClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public NumberSequenceClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Numbering</summary>
        /// <param name="numberingId">Identifies the Numbering</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NumberingDto> GetBynumberingIdAsync(string numberingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (numberingId == null)
                throw new System.ArgumentNullException("numberingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/numberSequence/{numberingId}");
            urlBuilder_.Replace("{numberingId}", System.Uri.EscapeDataString(System.Convert.ToString(numberingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(NumberingDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NumberingDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(NumberingDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific Numbering</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<NumberingDto>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/numberSequence");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<NumberingDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<NumberingDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<NumberingDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class PackagingTypeClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public PackagingTypeClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific PackagingType</summary>
        /// <param name="boxId">Identifies the PackagingType</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PackagingTypeDto> GetByboxIdAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (boxId == null)
                throw new System.ArgumentNullException("boxId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/packagingType/{boxId}");
            urlBuilder_.Replace("{boxId}", System.Uri.EscapeDataString(System.Convert.ToString(boxId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PackagingTypeDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PackagingTypeDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PackagingTypeDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of SO PackagingTypes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PackagingTypeDto>> GetAllPackagingTypesAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/packagingType?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PackagingTypeDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PackagingTypeDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PackagingTypeDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class PaymentClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public PaymentClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Payment</summary>
        /// <param name="paymentNumber">Identifies the Payment</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PaymentDto> GetBypaymentNumberAsync(string paymentNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (paymentNumber == null)
                throw new System.ArgumentNullException("paymentNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/payment/{paymentNumber}");
            urlBuilder_.Replace("{paymentNumber}", System.Uri.EscapeDataString(System.Convert.ToString(paymentNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PaymentDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PaymentDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Payment</summary>
        /// <param name="paymentNumber">Identifies the Payment to update</param>
        /// <param name="payment">Defines the data for the Payment to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBypaymentNumberAsync(string paymentNumber, PaymentUpdateDto payment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (paymentNumber == null)
                throw new System.ArgumentNullException("paymentNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/payment/{paymentNumber}");
            urlBuilder_.Replace("{paymentNumber}", System.Uri.EscapeDataString(System.Convert.ToString(paymentNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payment, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Payments</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PaymentDto>> GetAllPaymentsAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/payment?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PaymentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PaymentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PaymentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Payment</summary>
        /// <param name="payment">Defines the data for the Payment to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreatePaymentAsync(PaymentUpdateDto payment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/payment");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payment, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release payment operation</summary>
        /// <param name="paymentNumber">Reference number of the payment to be released</param>
        /// <param name="releaseActionDto">Contains the type of the payment</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleasePaymentActionResultDto> ReleasePaymentBypaymentNumberAsync(string paymentNumber, ReleasePaymentActionDto releaseActionDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (paymentNumber == null)
                throw new System.ArgumentNullException("paymentNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/payment/{paymentNumber}/action/release");
            urlBuilder_.Replace("{paymentNumber}", System.Uri.EscapeDataString(System.Convert.ToString(paymentNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(releaseActionDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleasePaymentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleasePaymentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleasePaymentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class PaymentMethodClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public PaymentMethodClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Payment Method</summary>
        /// <param name="paymentMethodNumber">Identifies the Payment Method</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PaymentMethodDto> GetBypaymentMethodNumberAsync(string paymentMethodNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (paymentMethodNumber == null)
                throw new System.ArgumentNullException("paymentMethodNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/paymentmethod/{paymentMethodNumber}");
            urlBuilder_.Replace("{paymentMethodNumber}", System.Uri.EscapeDataString(System.Convert.ToString(paymentMethodNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PaymentMethodDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentMethodDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PaymentMethodDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Payment Method</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PaymentMethodDto>> GetAllPaymentMethodAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/paymentmethod?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PaymentMethodDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PaymentMethodDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PaymentMethodDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class ProjectClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public ProjectClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Project</summary>
        /// <param name="projectID">Identifies the Project</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProjectDto> GetByprojectIDAsync(string projectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (projectID == null)
                throw new System.ArgumentNullException("projectID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/project/{projectID}");
            urlBuilder_.Replace("{projectID}", System.Uri.EscapeDataString(System.Convert.ToString(projectID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ProjectDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ProjectDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Projects</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ProjectDto>> GetAllAsync(Status8? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/project?");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ProjectDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ProjectDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ProjectDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an project</summary>
        /// <param name="projectUpdateDto">Define the data for the project to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(ProjectUpdateDto projectUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/project");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(projectUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Project</summary>
        /// <param name="projectId">Identifies the Project to update</param>
        /// <param name="projectUpdateDto">Defines the data for the Project to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByprojectIdAsync(string projectId, ProjectUpdateDto projectUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (projectId == null)
                throw new System.ArgumentNullException("projectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/project/{projectId}");
            urlBuilder_.Replace("{projectId}", System.Uri.EscapeDataString(System.Convert.ToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(projectUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class PurchaseOrderClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public PurchaseOrderClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Purchase Order</summary>
        /// <param name="orderNbr">Identifies the Purchase Order</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PurchaseOrderDto> GetOrderByorderNbrAsync(string orderNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNbr == null)
                throw new System.ArgumentNullException("orderNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorder/{orderNbr}");
            urlBuilder_.Replace("{orderNbr}", System.Uri.EscapeDataString(System.Convert.ToString(orderNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PurchaseOrderDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PurchaseOrderDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Purchase Order</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PurchaseOrderDto>> GetAllOrderAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, OrderType? orderType = null, OrderStatus? orderStatus = null, string supplier = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorder?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderType != null) urlBuilder_.Append("orderType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderStatus != null) urlBuilder_.Append("orderStatus=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderStatus.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (supplier != null) urlBuilder_.Append("supplier=").Append(System.Uri.EscapeDataString(System.Convert.ToString(supplier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PurchaseOrderDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PurchaseOrderDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PurchaseOrderDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Purchase Order</summary>
        /// <param name="purchaseOrderUpdateDto">Defines the data for the Purchase Order to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(PurchaseOrderUpdateDto purchaseOrderUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorder");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(purchaseOrderUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a Purchase Order</summary>
        /// <param name="purchaseOrderNumber">Identifies the Purchase Order to update</param>
        /// <param name="purchaseOrderUpdateDto">Defines the data for the Purchase Order to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBypurchaseOrderNumberAsync(string purchaseOrderNumber, PurchaseOrderUpdateDto purchaseOrderUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (purchaseOrderNumber == null)
                throw new System.ArgumentNullException("purchaseOrderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorder/{purchaseOrderNumber}");
            urlBuilder_.Replace("{purchaseOrderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(purchaseOrderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(purchaseOrderUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class PurchaseOrderBasicClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public PurchaseOrderBasicClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Purchase Order</summary>
        /// <param name="orderNbr">Identifies the Purchase Order</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PurchaseOrderBasicDto> GetPurchaseOrderBasicByorderNbrAsync(string orderNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNbr == null)
                throw new System.ArgumentNullException("orderNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorderbasic/{orderNbr}");
            urlBuilder_.Replace("{orderNbr}", System.Uri.EscapeDataString(System.Convert.ToString(orderNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PurchaseOrderBasicDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderBasicDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PurchaseOrderBasicDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Purchase Order</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PurchaseOrderBasicDto>> GetAllOrderBasicAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, OrderType2? orderType = null, OrderStatus2? orderStatus = null, string supplier = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorderbasic?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderType != null) urlBuilder_.Append("orderType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderStatus != null) urlBuilder_.Append("orderStatus=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderStatus.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (supplier != null) urlBuilder_.Append("supplier=").Append(System.Uri.EscapeDataString(System.Convert.ToString(supplier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PurchaseOrderBasicDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PurchaseOrderBasicDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PurchaseOrderBasicDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Purchase Order Basic</summary>
        /// <param name="purchaseOrderBasicUpdateDto">Defines the data for the Purchase Order to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(PurchaseOrderBasicUpdateDto purchaseOrderBasicUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorderbasic");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(purchaseOrderBasicUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a Purchase Order Basic</summary>
        /// <param name="purchaseOrderNumber">Identifies the Purchase Order to update</param>
        /// <param name="purchaseOrderBasicUpdateDto">Defines the data for the Purchase Order to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBypurchaseOrderNumberAsync(string purchaseOrderNumber, PurchaseOrderBasicUpdateDto purchaseOrderBasicUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (purchaseOrderNumber == null)
                throw new System.ArgumentNullException("purchaseOrderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/purchaseorderbasic/{purchaseOrderNumber}");
            urlBuilder_.Replace("{purchaseOrderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(purchaseOrderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(purchaseOrderBasicUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class PurchaseReceiptClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public PurchaseReceiptClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Purchase Receipt</summary>
        /// <param name="receiptNbr">Identifies the Purchase Receipt</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PurchaseReceiptDto> GetPurchaseReceiptBasicByreceiptNbrAsync(string receiptNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptNbr == null)
                throw new System.ArgumentNullException("receiptNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceipt/{receiptNbr}");
            urlBuilder_.Replace("{receiptNbr}", System.Uri.EscapeDataString(System.Convert.ToString(receiptNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PurchaseReceiptDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PurchaseReceiptDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Purchase Receipts</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptDto>> GetAllReceiptBasicAsync(ReceiptType? receiptType = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceipt?");
            if (receiptType != null) urlBuilder_.Append("receiptType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(receiptType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Purchase Receipt</summary>
        /// <param name="poReceiptUpdateDto">Defines the data for the  Purchase Receipt to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(PurchaseReceiptUpdateDto poReceiptUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceipt");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(poReceiptUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the print report of a Purchase Receipt</summary>
        /// <param name="receiptNbr">Identifies the receipt</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PrintPurchaseReceiptByreceiptNbrAsync(string receiptNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptNbr == null)
                throw new System.ArgumentNullException("receiptNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceipt/{receiptNbr}/print");
            urlBuilder_.Replace("{receiptNbr}", System.Uri.EscapeDataString(System.Convert.ToString(receiptNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release purchase receipt operation</summary>
        /// <param name="receiptNumber">Reference number of the receipt to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleasePurchaseReceiptActionResultDto> ReleaseInvoiceByreceiptNumberAsync(string receiptNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptNumber == null)
                throw new System.ArgumentNullException("receiptNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceipt/{receiptNumber}/action/release");
            urlBuilder_.Replace("{receiptNumber}", System.Uri.EscapeDataString(System.Convert.ToString(receiptNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleasePurchaseReceiptActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleasePurchaseReceiptActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleasePurchaseReceiptActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Purchase Receipt</summary>
        /// <param name="poReceiptNumber">Identifies the  Purchase Receipt  to update</param>
        /// <param name="poReceiptUpdateDto">Defines the data for the  Purchase Receipt  to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBypoReceiptNumberAsync(string poReceiptNumber, PurchaseReceiptUpdateDto poReceiptUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (poReceiptNumber == null)
                throw new System.ArgumentNullException("poReceiptNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceipt/{poReceiptNumber}");
            urlBuilder_.Replace("{poReceiptNumber}", System.Uri.EscapeDataString(System.Convert.ToString(poReceiptNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(poReceiptUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class PurchaseReceiptBasicClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public PurchaseReceiptBasicClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Purchase Receipt</summary>
        /// <param name="receiptNbr">Identifies the Purchase Receipt</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PurchaseReceiptBasicDto> GetPurchaseReceiptBasicByreceiptNbrAsync(string receiptNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptNbr == null)
                throw new System.ArgumentNullException("receiptNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceiptBasic/{receiptNbr}");
            urlBuilder_.Replace("{receiptNbr}", System.Uri.EscapeDataString(System.Convert.ToString(receiptNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PurchaseReceiptBasicDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptBasicDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PurchaseReceiptBasicDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptBasicDto>> GetAllReceiptBasicAsync(ReceiptType2? receiptType = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceiptBasic?");
            if (receiptType != null) urlBuilder_.Append("receiptType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(receiptType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptBasicDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptBasicDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptBasicDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Purchase Receipt</summary>
        /// <param name="poReceiptUpdateDto">Defines the data for the  Purchase Receipt to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(PurchaseReceiptBasicUpdateDto poReceiptUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceiptBasic");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(poReceiptUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release purchase receipt operation</summary>
        /// <param name="receiptNumber">Reference number of the receipt to be released</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleasePurchaseReceiptActionResultDto> ReleaseInvoiceByreceiptNumberAsync(string receiptNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptNumber == null)
                throw new System.ArgumentNullException("receiptNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceiptBasic/{receiptNumber}/action/release");
            urlBuilder_.Replace("{receiptNumber}", System.Uri.EscapeDataString(System.Convert.ToString(receiptNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleasePurchaseReceiptActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleasePurchaseReceiptActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleasePurchaseReceiptActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Purchase Receipt</summary>
        /// <param name="poReceiptNumber">Identifies the  Purchase Receipt  to update</param>
        /// <param name="poReceiptUpdateDto">Defines the data for the  Purchase Receipt  to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBypoReceiptNumberAsync(string poReceiptNumber, PurchaseReceiptBasicUpdateDto poReceiptUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (poReceiptNumber == null)
                throw new System.ArgumentNullException("poReceiptNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/PurchaseReceiptBasic/{poReceiptNumber}");
            urlBuilder_.Replace("{poReceiptNumber}", System.Uri.EscapeDataString(System.Convert.ToString(poReceiptNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(poReceiptUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SalesCategoryClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SalesCategoryClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a Sales Category</summary>
        /// <param name="categoryId">Identifies the Sales Category</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SalesCategoryDto> GetCategoryBycategoryIdAsync(int categoryId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (categoryId == null)
                throw new System.ArgumentNullException("categoryId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salescategory/{categoryId}");
            urlBuilder_.Replace("{categoryId}", System.Uri.EscapeDataString(System.Convert.ToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SalesCategoryDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SalesCategoryDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SalesCategoryDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Sales Categories</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SalesCategoryDto>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salescategory");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SalesCategoryDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SalesCategoryDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SalesCategoryDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Inventory Items from a specific Sales Category</summary>
        /// <param name="categoryId">Identifies the Sales Category</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InventoryDto>> GetItemsForCategoryBycategoryIdAsync(int categoryId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (categoryId == null)
                throw new System.ArgumentNullException("categoryId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salescategory/{categoryId}/item");
            urlBuilder_.Replace("{categoryId}", System.Uri.EscapeDataString(System.Convert.ToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<InventoryDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<InventoryDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<InventoryDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SalesOrderClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SalesOrderClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific SO Order</summary>
        /// <param name="orderNbr">Identifies the So Order</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SalesOrderDto> GetByorderNbrAsync(string orderNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNbr == null)
                throw new System.ArgumentNullException("orderNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorder/{orderNbr}");
            urlBuilder_.Replace("{orderNbr}", System.Uri.EscapeDataString(System.Convert.ToString(orderNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SalesOrderDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SalesOrderDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of SO Orders</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>> GetAllOrdersAsync(string orderType = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorder?");
            if (orderType != null) urlBuilder_.Append("orderType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SalesOrderDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Sale Order</summary>
        /// <param name="saleOrderUpdateDto">Defines the data for the Sale Order to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(SalesOrderUpdateDto saleOrderUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorder");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(saleOrderUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Crete shipment operation</summary>
        /// <param name="saleOrderNumber">Reference number of the sale oreder from which the shipment will be created</param>
        /// <param name="createShipmentActionDto">Defines the data for the action</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateShipmentActionResultDto> CreateShipmentActionBysaleOrderNumberAsync(string saleOrderNumber, CreateShipmentActionDto createShipmentActionDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (saleOrderNumber == null)
                throw new System.ArgumentNullException("saleOrderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorder/{saleOrderNumber}/action/createShipment");
            urlBuilder_.Replace("{saleOrderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(saleOrderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createShipmentActionDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CreateShipmentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShipmentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CreateShipmentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a sales order. If the file already exists, a new revision is created.</summary>
        /// <param name="orderNumber">Identifies the sales order</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateHeaderAttachmentByorderNumberAsync(string orderNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorder/{orderNumber}/attachment");
            urlBuilder_.Replace("{orderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a certain sales order line. If the file already exists, a new revision is created.</summary>
        /// <param name="orderNumber">Identifies the sales order</param>
        /// <param name="lineNumber">Specifies line number</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateLineAttachmentByorderNumberlineNumberAsync(string orderNumber, int lineNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");
    
            if (lineNumber == null)
                throw new System.ArgumentNullException("lineNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorder/{orderNumber}/{lineNumber}/attachment");
            urlBuilder_.Replace("{orderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lineNumber}", System.Uri.EscapeDataString(System.Convert.ToString(lineNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Sale Order</summary>
        /// <param name="salesOrderNumber">Identifies the Sale Order to update</param>
        /// <param name="saleOrderUpdateDto">Defines the data for the Sale Order to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBysalesOrderNumberAsync(string salesOrderNumber, SalesOrderUpdateDto saleOrderUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (salesOrderNumber == null)
                throw new System.ArgumentNullException("salesOrderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorder/{salesOrderNumber}");
            urlBuilder_.Replace("{salesOrderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(salesOrderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(saleOrderUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SalesOrderBasicClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SalesOrderBasicClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific SO Order</summary>
        /// <param name="orderNbr">Identifies the So Order</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SalesOrderBasicDto> GetByorderNbrAsync(string orderNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNbr == null)
                throw new System.ArgumentNullException("orderNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorderbasic/{orderNbr}");
            urlBuilder_.Replace("{orderNbr}", System.Uri.EscapeDataString(System.Convert.ToString(orderNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SalesOrderBasicDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderBasicDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SalesOrderBasicDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of SO Orders</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>> GetAllOrdersAsync(string orderType = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorderbasic?");
            if (orderType != null) urlBuilder_.Append("orderType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Sale Order</summary>
        /// <param name="saleOrderUpdateDto">Defines the data for the Sale Order to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(SalesOrderBasicUpdateDto saleOrderUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorderbasic");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(saleOrderUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Crete shipment operation</summary>
        /// <param name="saleOrderNumber">Reference number of the sale oreder from which the shipment will be created</param>
        /// <param name="createShipmentActionDto">Defines the data for the action</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateShipmentActionResultDto> CreateShipmentActionBysaleOrderNumberAsync(string saleOrderNumber, CreateShipmentActionDto createShipmentActionDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (saleOrderNumber == null)
                throw new System.ArgumentNullException("saleOrderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorderbasic/{saleOrderNumber}/action/createShipment");
            urlBuilder_.Replace("{saleOrderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(saleOrderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createShipmentActionDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CreateShipmentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShipmentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CreateShipmentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a sales order. If the file already exists, a new revision is created.</summary>
        /// <param name="orderNumber">Identifies the sales order</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateHeaderAttachmentByorderNumberAsync(string orderNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorderbasic/{orderNumber}/attachment");
            urlBuilder_.Replace("{orderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a certain sales order line. If the file already exists, a new revision is created.</summary>
        /// <param name="orderNumber">Identifies the sales order</param>
        /// <param name="lineNumber">Specifies line number</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateLineAttachmentByorderNumberlineNumberAsync(string orderNumber, int lineNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");
    
            if (lineNumber == null)
                throw new System.ArgumentNullException("lineNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorderbasic/{orderNumber}/{lineNumber}/attachment");
            urlBuilder_.Replace("{orderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lineNumber}", System.Uri.EscapeDataString(System.Convert.ToString(lineNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Sale Order</summary>
        /// <param name="salesOrderNumber">Identifies the Sale Order to update</param>
        /// <param name="saleOrderUpdateDto">Defines the data for the Sale Order to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBysalesOrderNumberAsync(string salesOrderNumber, SalesOrderBasicUpdateDto saleOrderUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (salesOrderNumber == null)
                throw new System.ArgumentNullException("salesOrderNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesorderbasic/{salesOrderNumber}");
            urlBuilder_.Replace("{salesOrderNumber}", System.Uri.EscapeDataString(System.Convert.ToString(salesOrderNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(saleOrderUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SalesOrderTypeClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SalesOrderTypeClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific SO OrderType</summary>
        /// <param name="orderType">Identifies the SO OrderType</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SalesOrderTypeDto> GetSalesOrderTypeByorderTypeAsync(string orderType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderType == null)
                throw new System.ArgumentNullException("orderType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesordertype/{orderType}");
            urlBuilder_.Replace("{orderType}", System.Uri.EscapeDataString(System.Convert.ToString(orderType, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SalesOrderTypeDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderTypeDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SalesOrderTypeDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of SO OrderTypes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SalesOrderTypeDto>> GetAllSalesOrderTypesAsync(int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/salesordertype?");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SalesOrderTypeDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SalesOrderTypeDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SalesOrderTypeDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class ShipmentClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public ShipmentClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Shipment</summary>
        /// <param name="shipmentNbr">Identifies the Shipment</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ShipmentDto> GetByshipmentNbrAsync(string shipmentNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentNbr == null)
                throw new System.ArgumentNullException("shipmentNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/shipment/{shipmentNbr}");
            urlBuilder_.Replace("{shipmentNbr}", System.Uri.EscapeDataString(System.Convert.ToString(shipmentNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ShipmentDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ShipmentDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of SO Shipments</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ShipmentDto>> GetAllShipmentsAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/shipment?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ShipmentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ShipmentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ShipmentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the shipment confirmation report</summary>
        /// <param name="shipmentNbr">Identifies the shipment</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PrintShipmentConfirmationByshipmentNbrAsync(string shipmentNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentNbr == null)
                throw new System.ArgumentNullException("shipmentNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/shipment/{shipmentNbr}/printShipmentConfirmation");
            urlBuilder_.Replace("{shipmentNbr}", System.Uri.EscapeDataString(System.Convert.ToString(shipmentNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the pick list report</summary>
        /// <param name="shipmentNbr">Identifies the shipment</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PrintPickListByshipmentNbrAsync(string shipmentNbr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentNbr == null)
                throw new System.ArgumentNullException("shipmentNbr");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/shipment/{shipmentNbr}/printPickList");
            urlBuilder_.Replace("{shipmentNbr}", System.Uri.EscapeDataString(System.Convert.ToString(shipmentNbr, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Shipment</summary>
        /// <param name="shipmentNumber">Identifies the Shipment to update</param>
        /// <param name="shipmentUpdateDto">Defines the data for the Shipment to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByshipmentNumberAsync(string shipmentNumber, ShipmentUpdateDto shipmentUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentNumber == null)
                throw new System.ArgumentNullException("shipmentNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/shipment/{shipmentNumber}");
            urlBuilder_.Replace("{shipmentNumber}", System.Uri.EscapeDataString(System.Convert.ToString(shipmentNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(shipmentUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Confirm shipment operation</summary>
        /// <param name="shipmentNumber">Reference number of the shipment to be confirmed</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ConfirmShipmentActionResultDto> ConfirmShipmentByshipmentNumberAsync(string shipmentNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentNumber == null)
                throw new System.ArgumentNullException("shipmentNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/shipment/{shipmentNumber}/action/confirmShipment");
            urlBuilder_.Replace("{shipmentNumber}", System.Uri.EscapeDataString(System.Convert.ToString(shipmentNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ConfirmShipmentActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmShipmentActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ConfirmShipmentActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class StocktakeClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public StocktakeClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific</summary>
        /// <param name="referenceNumber">Identifies the Stocktake</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StocktakeDto> GetByreferenceNumberAsync(string referenceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (referenceNumber == null)
                throw new System.ArgumentNullException("referenceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/stocktake/{referenceNumber}");
            urlBuilder_.Replace("{referenceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(StocktakeDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StocktakeDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(StocktakeDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific stocktake</summary>
        /// <param name="referenceNumber">Identifies the stocktake to update</param>
        /// <param name="stocktake">The data to update for stocktake</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutByreferenceNumberAsync(string referenceNumber, StocktakeUpdateDto stocktake, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (referenceNumber == null)
                throw new System.ArgumentNullException("referenceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/stocktake/{referenceNumber}");
            urlBuilder_.Replace("{referenceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(stocktake, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of stocktakes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StocktakeDto>> GetAllStocktakesAsync(string warehouse = null, string location = null, string inventory = null, string lotSerialNumber = null, SummaryStatus? summaryStatus = null, int? numberToRead = null, int? startWithLine = null, int? endWithLine = null, string freezeDateTime = null, string freezeDateTimeCondition = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, string expirationDateTime = null, string expirationDateTimeCondition = null, Status9? status = null, int? skipRecords = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/stocktake?");
            if (warehouse != null) urlBuilder_.Append("warehouse=").Append(System.Uri.EscapeDataString(System.Convert.ToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (location != null) urlBuilder_.Append("location=").Append(System.Uri.EscapeDataString(System.Convert.ToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (inventory != null) urlBuilder_.Append("inventory=").Append(System.Uri.EscapeDataString(System.Convert.ToString(inventory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lotSerialNumber != null) urlBuilder_.Append("lotSerialNumber=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lotSerialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (summaryStatus != null) urlBuilder_.Append("summaryStatus=").Append(System.Uri.EscapeDataString(System.Convert.ToString(summaryStatus.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startWithLine != null) urlBuilder_.Append("startWithLine=").Append(System.Uri.EscapeDataString(System.Convert.ToString(startWithLine.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (endWithLine != null) urlBuilder_.Append("endWithLine=").Append(System.Uri.EscapeDataString(System.Convert.ToString(endWithLine.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (freezeDateTime != null) urlBuilder_.Append("freezeDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(freezeDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (freezeDateTimeCondition != null) urlBuilder_.Append("freezeDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(freezeDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (expirationDateTime != null) urlBuilder_.Append("expirationDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(expirationDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (expirationDateTimeCondition != null) urlBuilder_.Append("expirationDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(expirationDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<StocktakeDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<StocktakeDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<StocktakeDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SubaccountClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SubaccountClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific SubAccount</summary>
        /// <param name="subCd">Identifies the SubAccount</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SubAccountDto> GetSubaccountBysubCdAsync(string subCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (subCd == null)
                throw new System.ArgumentNullException("subCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/subaccount/{subCd}");
            urlBuilder_.Replace("{subCd}", System.Uri.EscapeDataString(System.Convert.ToString(subCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SubAccountDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SubAccountDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SubAccountDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get all SubAccounts</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SubAccountDto>> GetAllSubaccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/subaccount");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SubAccountDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SubAccountDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SubAccountDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a Subaccount</summary>
        /// <param name="subAccountUpdateDto">Defines the data for Subaccount to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(SubAccountUpdateDto subAccountUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/subaccount");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(subAccountUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific Subaccount</summary>
        /// <param name="subAccountCd">Identifies the Subaccount to update</param>
        /// <param name="subAccountUpdateDto">Defines the data for the Subaccount to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBysubAccountCdAsync(string subAccountCd, SubAccountUpdateDto subAccountUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (subAccountCd == null)
                throw new System.ArgumentNullException("subAccountCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/subaccount/{subAccountCd}");
            urlBuilder_.Replace("{subAccountCd}", System.Uri.EscapeDataString(System.Convert.ToString(subAccountCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(subAccountUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SupplierClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SupplierClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get supplier classes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierClassDto>> GetAllSupplierClassesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/supplierClass");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierClassDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierClassDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierClassDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific supplier class</summary>
        /// <param name="supplierClassId">Identifies the supplier class</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SupplierClassDto> GetSpecificSupplierClassBysupplierClassIdAsync(string supplierClassId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierClassId == null)
                throw new System.ArgumentNullException("supplierClassId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/supplierClass/{supplierClassId}");
            urlBuilder_.Replace("{supplierClassId}", System.Uri.EscapeDataString(System.Convert.ToString(supplierClassId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SupplierClassDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierClassDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SupplierClassDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the balance of a range of suppliers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierBalanceDto>> GetAllSupplierBalanceAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/balance?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierBalanceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierBalanceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierBalanceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the PO balance of a range of suppliers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierPOBalanceDto>> GetAllSupplierPOBalanceAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/POBalance?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierPOBalanceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierPOBalanceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierPOBalanceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific supplier</summary>
        /// <param name="supplierCd">Identifies the supplier</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SupplierDto> GetBysupplierCdAsync(string supplierCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierCd == null)
                throw new System.ArgumentNullException("supplierCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/{supplierCd}");
            urlBuilder_.Replace("{supplierCd}", System.Uri.EscapeDataString(System.Convert.ToString(supplierCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SupplierDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SupplierDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific supplier</summary>
        /// <param name="supplierCd">Identifies the supplier to update</param>
        /// <param name="supplier">The data to update for supplier</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBysupplierCdAsync(string supplierCd, SupplierUpdateDto supplier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierCd == null)
                throw new System.ArgumentNullException("supplierCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/{supplierCd}");
            urlBuilder_.Replace("{supplierCd}", System.Uri.EscapeDataString(System.Convert.ToString(supplierCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(supplier, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of suppliers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierDto>> GetAllAsync(string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, string name = null, Status10? status = null, string vatRegistrationId = null, string corporateId = null, string attributes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier?");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (name != null) urlBuilder_.Append("name=").Append(System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (vatRegistrationId != null) urlBuilder_.Append("vatRegistrationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(vatRegistrationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (corporateId != null) urlBuilder_.Append("corporateId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(corporateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (attributes != null) urlBuilder_.Append("attributes=").Append(System.Uri.EscapeDataString(System.Convert.ToString(attributes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a supplier</summary>
        /// <param name="supplier">Define the data for the supplier to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(SupplierUpdateDto supplier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(supplier, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of invoices for a specific supplier</summary>
        /// <param name="supplierNumber">Identifies the supplier for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>> GetAllInvoicesForSupplierBysupplierNumberAsync(string supplierNumber, DocumentType8? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierNumber == null)
                throw new System.ArgumentNullException("supplierNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/{supplierNumber}/invoice?");
            urlBuilder_.Replace("{supplierNumber}", System.Uri.EscapeDataString(System.Convert.ToString(supplierNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a range of documents for a specific supplier</summary>
        /// <param name="supplierNumber">Identifies the supplier for which to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>> GetAllDocumentsForSupplierBysupplierNumberAsync(string supplierNumber, DocumentType9? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierNumber == null)
                throw new System.ArgumentNullException("supplierNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/{supplierNumber}/document?");
            urlBuilder_.Replace("{supplierNumber}", System.Uri.EscapeDataString(System.Convert.ToString(supplierNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific supplier's PO balance</summary>
        /// <param name="supplierCd">Indentifies the supplier for witch to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SupplierBalanceDto> GetSupplierBalanceBysupplierCdAsync(string supplierCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierCd == null)
                throw new System.ArgumentNullException("supplierCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/{supplierCd}/balance");
            urlBuilder_.Replace("{supplierCd}", System.Uri.EscapeDataString(System.Convert.ToString(supplierCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SupplierBalanceDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierBalanceDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SupplierBalanceDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a specific supplier's PO balance</summary>
        /// <param name="supplierCd">Indentifies the supplier for witch to return data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SupplierPOBalanceDto> GetSupplierPOBalanceBysupplierCdAsync(string supplierCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierCd == null)
                throw new System.ArgumentNullException("supplierCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/{supplierCd}/POBalance");
            urlBuilder_.Replace("{supplierCd}", System.Uri.EscapeDataString(System.Convert.ToString(supplierCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SupplierPOBalanceDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierPOBalanceDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SupplierPOBalanceDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of a Supplier of a specific supplier</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContactDto>> GetAllContactForSupplierBysupplierCdAsync(string supplierCd, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierCd == null)
                throw new System.ArgumentNullException("supplierCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplier/{supplierCd}/contact?");
            urlBuilder_.Replace("{supplierCd}", System.Uri.EscapeDataString(System.Convert.ToString(supplierCd, System.Globalization.CultureInfo.InvariantCulture)));
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ContactDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ContactDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ContactDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SupplierDocumentClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SupplierDocumentClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Gets a range of supplier documents</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>> GetAllDocumentsForSupplierAsync(DocumentType10? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierdocument?");
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierDocumentDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class SupplierInvoiceClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public SupplierInvoiceClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Invoice</summary>
        /// <param name="invoiceNumber">Identifies the Invoice</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SupplierInvoiceDto> GetByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierInvoice/{invoiceNumber}");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SupplierInvoiceDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierInvoiceDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SupplierInvoiceDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Invoices</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>> GetAllInvoicesAsync(DocumentType11? documentType = null, string greaterThanValue = null, int? released = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, int? dunningLevel = null, string closedFinancialPeriod = null, string dunningLetterDateTime = null, string dunningLetterDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierInvoice?");
            if (documentType != null) urlBuilder_.Append("documentType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(documentType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (released != null) urlBuilder_.Append("released=").Append(System.Uri.EscapeDataString(System.Convert.ToString(released.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLevel != null) urlBuilder_.Append("dunningLevel=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLevel.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (closedFinancialPeriod != null) urlBuilder_.Append("closedFinancialPeriod=").Append(System.Uri.EscapeDataString(System.Convert.ToString(closedFinancialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTime != null) urlBuilder_.Append("dunningLetterDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dunningLetterDateTimeCondition != null) urlBuilder_.Append("dunningLetterDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(dunningLetterDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create an SupplierInvoice</summary>
        /// <param name="supplierInvoice">Defines the data for the SupplierInvoice to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostAsync(SupplierInvoiceUpdateDto supplierInvoice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierInvoice");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(supplierInvoice, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Release invoice operation</summary>
        /// <param name="invoiceNumber">Reference number of the released invoice to be reversed</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReleaseSupplierInvoiceActionResultDto> ReleaseInvoiceByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierInvoice/{invoiceNumber}/action/release");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ReleaseSupplierInvoiceActionResultDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseSupplierInvoiceActionResultDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ReleaseSupplierInvoiceActionResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a supplier invoice. If the file already exists, a new revision is created.</summary>
        /// <param name="invoiceNumber">Identifies the supplier invoice</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateHeaderAttachmentByinvoiceNumberAsync(string invoiceNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierInvoice/{invoiceNumber}/attachment");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an attachment and associates it with a certain supplier invoice line. If the file already exists, a new revision is created.</summary>
        /// <param name="invoiceNumber">Identifies the supplier invoice</param>
        /// <param name="lineNumber">Specifies line number</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateLineAttachmentByinvoiceNumberlineNumberAsync(string invoiceNumber, int lineNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceNumber == null)
                throw new System.ArgumentNullException("invoiceNumber");
    
            if (lineNumber == null)
                throw new System.ArgumentNullException("lineNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierInvoice/{invoiceNumber}/{lineNumber}/attachment");
            urlBuilder_.Replace("{invoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lineNumber}", System.Uri.EscapeDataString(System.Convert.ToString(lineNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a specific SupplierInvoice</summary>
        /// <param name="supplierInvoiceNumber">Identifies the SupplierInvoice to update</param>
        /// <param name="supplierInvoice">Defines the data for the Invoice to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PutBysupplierInvoiceNumberAsync(string supplierInvoiceNumber, SupplierInvoiceUpdateDto supplierInvoice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierInvoiceNumber == null)
                throw new System.ArgumentNullException("supplierInvoiceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/supplierInvoice/{supplierInvoiceNumber}");
            urlBuilder_.Replace("{supplierInvoiceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(supplierInvoiceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(supplierInvoice, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class TimeCardClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public TimeCardClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific employee time cards</summary>
        /// <param name="timeCardCd">Identifies the time card</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TimeCardDto> GetEmployeeTimeCardBytimeCardCdAsync(string timeCardCd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (timeCardCd == null)
                throw new System.ArgumentNullException("timeCardCd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/timeCard/{timeCardCd}");
            urlBuilder_.Replace("{timeCardCd}", System.Uri.EscapeDataString(System.Convert.ToString(timeCardCd, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TimeCardDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCardDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(TimeCardDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get all employee time cards, a filter needs to be specified</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeCardDto>> GetAllEmployeeTimeCardsAsync(Status11? status = null, string week = null, Type2? type = null, string greaterThanValue = null, int? numberToRead = null, int? skipRecords = null, string orderBy = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/timeCard?");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (week != null) urlBuilder_.Append("week=").Append(System.Uri.EscapeDataString(System.Convert.ToString(week, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (type != null) urlBuilder_.Append("type=").Append(System.Uri.EscapeDataString(System.Convert.ToString(type.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (greaterThanValue != null) urlBuilder_.Append("greaterThanValue=").Append(System.Uri.EscapeDataString(System.Convert.ToString(greaterThanValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null) urlBuilder_.Append("orderBy=").Append(System.Uri.EscapeDataString(System.Convert.ToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<TimeCardDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<TimeCardDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<TimeCardDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a time card</summary>
        /// <param name="timeCardUpdateDto">Defines the data for the time card to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateTimeCardAsync(TimeCardUpdateDto timeCardUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/timeCard");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(timeCardUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a specific time card</summary>
        /// <param name="referenceNumber">Identifies the time card to update</param>
        /// <param name="timeCardUpdateDto">The data to update the time card with</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> UpdateTimeCardByreferenceNumberAsync(string referenceNumber, TimeCardUpdateDto timeCardUpdateDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (referenceNumber == null)
                throw new System.ArgumentNullException("referenceNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/timeCard/{referenceNumber}");
            urlBuilder_.Replace("{referenceNumber}", System.Uri.EscapeDataString(System.Convert.ToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(timeCardUpdateDto, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class VatClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public VatClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Vat</summary>
        /// <param name="vatId">Identifies the Vat</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VatInformationDto> GetVatByvatIdAsync(string vatId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (vatId == null)
                throw new System.ArgumentNullException("vatId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/vat/{vatId}");
            urlBuilder_.Replace("{vatId}", System.Uri.EscapeDataString(System.Convert.ToString(vatId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(VatInformationDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<VatInformationDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(VatInformationDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Vats</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<VatInformationDto>> GetAllVatsAsync(int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/vat?");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<VatInformationDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<VatInformationDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<VatInformationDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class VatCategoryClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public VatCategoryClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific VatCategory</summary>
        /// <param name="taxCategoryId">Identifies the VatCategory</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VatCategoryDto> GetVatCategoryBytaxCategoryIdAsync(string taxCategoryId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (taxCategoryId == null)
                throw new System.ArgumentNullException("taxCategoryId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/vatCategory/{taxCategoryId}");
            urlBuilder_.Replace("{taxCategoryId}", System.Uri.EscapeDataString(System.Convert.ToString(taxCategoryId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(VatCategoryDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<VatCategoryDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(VatCategoryDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of VatCategories</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<VatCategoryDto>> GetAllVatCategoriesAsync(int? numberToRead = null, int? skipRecords = null, string lastModifiedDateTime = null, string lastModifiedDateTimeCondition = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/vatCategory?");
            if (numberToRead != null) urlBuilder_.Append("numberToRead=").Append(System.Uri.EscapeDataString(System.Convert.ToString(numberToRead.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skipRecords != null) urlBuilder_.Append("skipRecords=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skipRecords.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTime != null) urlBuilder_.Append("lastModifiedDateTime=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastModifiedDateTimeCondition != null) urlBuilder_.Append("lastModifiedDateTimeCondition=").Append(System.Uri.EscapeDataString(System.Convert.ToString(lastModifiedDateTimeCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<VatCategoryDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<VatCategoryDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<VatCategoryDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public partial class WarehouseClient : VismaNetClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        public WarehouseClient(VismaNetSettings configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get a specific Warehouse</summary>
        /// <param name="warehouseID">Identifies the Warehouse</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WarehouseDto> GetBywarehouseIDAsync(string warehouseID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (warehouseID == null)
                throw new System.ArgumentNullException("warehouseID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/warehouse/{warehouseID}");
            urlBuilder_.Replace("{warehouseID}", System.Uri.EscapeDataString(System.Convert.ToString(warehouseID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(WarehouseDto); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<WarehouseDto>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(WarehouseDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a range of Warehouses</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="VismaNetException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WarehouseDto>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("controller/api/v1/warehouse");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<WarehouseDto>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<WarehouseDto>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new VismaNetException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new VismaNetException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<WarehouseDto>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContextInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private string _name;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContextInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContextInformation>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EventDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _eventType;
        private string _name;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EventType
        {
            get { return _eventType; }
            set 
            {
                if (_eventType != value)
                {
                    _eventType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EventDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EventDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SubscriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private string _event;
        private string _hookUri;
    
        /// <summary>The identifier of a subscription. Will be populated only on successful POST operation</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The event type for which the subscription is made</summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Event
        {
            get { return _event; }
            set 
            {
                if (_event != value)
                {
                    _event = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The URL where notifications will be sent</summary>
        [Newtonsoft.Json.JsonProperty("hookUri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string HookUri
        {
            get { return _hookUri; }
            set 
            {
                if (_hookUri != value)
                {
                    _hookUri = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubscriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AccountDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _accountID;
        private string _accountCD;
        private string _accountClass;
        private AccountDtoType? _type;
        private bool? _active;
        private string _description;
        private bool? _useDefaultSub;
        private string _postOption;
        private string _currency;
        private string _taxCategory;
        private bool? _cashAccount;
        private int? _publicCode1;
        private string _externalCode1;
        private string _externalCode2;
        private string _analysisCode;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("accountID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccountID
        {
            get { return _accountID; }
            set 
            {
                if (_accountID != value)
                {
                    _accountID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountCD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCD
        {
            get { return _accountCD; }
            set 
            {
                if (_accountCD != value)
                {
                    _accountCD = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountClass
        {
            get { return _accountClass; }
            set 
            {
                if (_accountClass != value)
                {
                    _accountClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("useDefaultSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseDefaultSub
        {
            get { return _useDefaultSub; }
            set 
            {
                if (_useDefaultSub != value)
                {
                    _useDefaultSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostOption
        {
            get { return _postOption; }
            set 
            {
                if (_postOption != value)
                {
                    _postOption = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("publicCode1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PublicCode1
        {
            get { return _publicCode1; }
            set 
            {
                if (_publicCode1 != value)
                {
                    _publicCode1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode1
        {
            get { return _externalCode1; }
            set 
            {
                if (_externalCode1 != value)
                {
                    _externalCode1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode2
        {
            get { return _externalCode2; }
            set 
            {
                if (_externalCode2 != value)
                {
                    _externalCode2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("analysisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnalysisCode
        {
            get { return _analysisCode; }
            set 
            {
                if (_analysisCode != value)
                {
                    _analysisCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AccountDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AccountQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _publicCode;
        private string _externalCode1;
        private string _externalCode2;
        private string _analysisCode;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("publicCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PublicCode
        {
            get { return _publicCode; }
            set 
            {
                if (_publicCode != value)
                {
                    _publicCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode1
        {
            get { return _externalCode1; }
            set 
            {
                if (_externalCode1 != value)
                {
                    _externalCode1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode2
        {
            get { return _externalCode2; }
            set 
            {
                if (_externalCode2 != value)
                {
                    _externalCode2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("analysisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnalysisCode
        {
            get { return _analysisCode; }
            set 
            {
                if (_analysisCode != value)
                {
                    _analysisCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AccountQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AttachmentMetadataUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfBoolean _sendToAutoinvoice;
    
        [Newtonsoft.Json.JsonProperty("sendToAutoinvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean SendToAutoinvoice
        {
            get { return _sendToAutoinvoice; }
            set 
            {
                if (_sendToAutoinvoice != value)
                {
                    _sendToAutoinvoice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AttachmentMetadataUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentMetadataUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfBoolean : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfBoolean FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfBoolean>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class BranchQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BranchQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BranchQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class BranchDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _name;
        private bool? _isMainBranch;
        private AddressDto _mainAddress;
        private ContactInfoDto _mainContact;
        private AddressDto _deliveryAddress;
        private ContactInfoDto _deliveryContact;
        private string _corporateId;
        private string _vatRegistrationId;
        private CountryDto _defaultCountry;
        private IndustryCodeDto _industryCode;
        private CurrencyDto _currency;
        private VatZoneDto _vatZone;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isMainBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMainBranch
        {
            get { return _isMainBranch; }
            set 
            {
                if (_isMainBranch != value)
                {
                    _isMainBranch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto MainAddress
        {
            get { return _mainAddress; }
            set 
            {
                if (_mainAddress != value)
                {
                    _mainAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto MainContact
        {
            get { return _mainContact; }
            set 
            {
                if (_mainContact != value)
                {
                    _mainContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto DeliveryAddress
        {
            get { return _deliveryAddress; }
            set 
            {
                if (_deliveryAddress != value)
                {
                    _deliveryAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto DeliveryContact
        {
            get { return _deliveryContact; }
            set 
            {
                if (_deliveryContact != value)
                {
                    _deliveryContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId
        {
            get { return _corporateId; }
            set 
            {
                if (_corporateId != value)
                {
                    _corporateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatRegistrationId
        {
            get { return _vatRegistrationId; }
            set 
            {
                if (_vatRegistrationId != value)
                {
                    _vatRegistrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defaultCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryDto DefaultCountry
        {
            get { return _defaultCountry; }
            set 
            {
                if (_defaultCountry != value)
                {
                    _defaultCountry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("industryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndustryCodeDto IndustryCode
        {
            get { return _industryCode; }
            set 
            {
                if (_industryCode != value)
                {
                    _industryCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyDto Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatZoneDto VatZone
        {
            get { return _vatZone; }
            set 
            {
                if (_vatZone != value)
                {
                    _vatZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BranchDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BranchDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AddressDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _addressId;
        private string _addressLine1;
        private string _addressLine2;
        private string _addressLine3;
        private string _postalCode;
        private string _city;
        private CountryDto _country;
        private CountyDto _county;
    
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AddressId
        {
            get { return _addressId; }
            set 
            {
                if (_addressId != value)
                {
                    _addressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryDto Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountyDto County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AddressDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddressDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContactInfoDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _contactId;
        private string _name;
        private string _attention;
        private string _email;
        private string _web;
        private string _phone1;
        private string _phone2;
        private string _fax;
    
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId
        {
            get { return _contactId; }
            set 
            {
                if (_contactId != value)
                {
                    _contactId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContactInfoDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContactInfoDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CountryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CountryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CountryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class IndustryCodeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndustryCodeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndustryCodeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CurrencyDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CurrencyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatZoneDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _defaultVatCategory;
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("defaultVatCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultVatCategory
        {
            get { return _defaultVatCategory; }
            set 
            {
                if (_defaultVatCategory != value)
                {
                    _defaultVatCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatZoneDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatZoneDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CountyDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CountyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CountyDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class GeneralLedgerBudgetQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private string _branch;
        private string _ledger;
        private string _financialYear;
        private string _subaccount;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory</summary>
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ledger
        {
            get { return _ledger; }
            set 
            {
                if (_ledger != value)
                {
                    _ledger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory</summary>
        [Newtonsoft.Json.JsonProperty("financialYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialYear
        {
            get { return _financialYear; }
            set 
            {
                if (_financialYear != value)
                {
                    _financialYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeneralLedgerBudgetQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralLedgerBudgetQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class BudgetDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _financialYear;
        private bool? _released;
        private double? _releasedAmount;
        private AccountNumberDto _account;
        private SubAccountDescriptionDto _subaccount;
        private string _description;
        private double? _amount;
        private double? _distributedAmount;
        private System.Collections.ObjectModel.ObservableCollection<FinancialPeriodAmountDto> _periods;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("financialYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialYear
        {
            get { return _financialYear; }
            set 
            {
                if (_financialYear != value)
                {
                    _financialYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("released", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Released
        {
            get { return _released; }
            set 
            {
                if (_released != value)
                {
                    _released = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("releasedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReleasedAmount
        {
            get { return _releasedAmount; }
            set 
            {
                if (_releasedAmount != value)
                {
                    _releasedAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("distributedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DistributedAmount
        {
            get { return _distributedAmount; }
            set 
            {
                if (_distributedAmount != value)
                {
                    _distributedAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FinancialPeriodAmountDto> Periods
        {
            get { return _periods; }
            set 
            {
                if (_periods != value)
                {
                    _periods = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BudgetDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BudgetDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AccountNumberDto : System.ComponentModel.INotifyPropertyChanged
    {
        private AccountNumberDtoType? _type;
        private string _externalCode1;
        private string _externalCode2;
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountNumberDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode1
        {
            get { return _externalCode1; }
            set 
            {
                if (_externalCode1 != value)
                {
                    _externalCode1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode2
        {
            get { return _externalCode2; }
            set 
            {
                if (_externalCode2 != value)
                {
                    _externalCode2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AccountNumberDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountNumberDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SubAccountDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubAccountDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubAccountDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class FinancialPeriodAmountDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _periodId;
        private double? _amount;
    
        [Newtonsoft.Json.JsonProperty("periodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PeriodId
        {
            get { return _periodId; }
            set 
            {
                if (_periodId != value)
                {
                    _periodId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FinancialPeriodAmountDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialPeriodAmountDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class BranchNumberDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BranchNumberDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BranchNumberDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class BudgetUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _ledger;
        private DtoValueOfString _financialYear;
        private DtoValueOfString _account;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfString _description;
        private DtoValueOfDecimal _amount;
        private DtoValueOfString _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<FinancialPeriodAmountUpdateDto> _periods;
    
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Ledger
        {
            get { return _ledger; }
            set 
            {
                if (_ledger != value)
                {
                    _ledger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("financialYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FinancialYear
        {
            get { return _financialYear; }
            set 
            {
                if (_financialYear != value)
                {
                    _financialYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FinancialPeriodAmountUpdateDto> Periods
        {
            get { return _periods; }
            set 
            {
                if (_periods != value)
                {
                    _periods = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BudgetUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BudgetUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfString : System.ComponentModel.INotifyPropertyChanged
    {
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfString>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SegmentUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private byte[] _segmentId;
        private string _segmentValue;
    
        [Newtonsoft.Json.JsonProperty("segmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] SegmentId
        {
            get { return _segmentId; }
            set 
            {
                if (_segmentId != value)
                {
                    _segmentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segmentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentValue
        {
            get { return _segmentValue; }
            set 
            {
                if (_segmentValue != value)
                {
                    _segmentValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SegmentUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SegmentUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfDecimal : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfDecimal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfDecimal>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class FinancialPeriodAmountUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private FinancialPeriodAmountUpdateDtoOperation? _operation;
        private DtoValueOfString _periodId;
        private DtoValueOfDecimal _amount;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FinancialPeriodAmountUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PeriodId
        {
            get { return _periodId; }
            set 
            {
                if (_periodId != value)
                {
                    _periodId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FinancialPeriodAmountUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialPeriodAmountUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Carrier in CarrierController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CarrierDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _carrierId;
        private string _carrierDescription;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("carrierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierId
        {
            get { return _carrierId; }
            set 
            {
                if (_carrierId != value)
                {
                    _carrierId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("carrierDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierDescription
        {
            get { return _carrierDescription; }
            set 
            {
                if (_carrierDescription != value)
                {
                    _carrierDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CarrierDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CarrierQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CarrierQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashAccountDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<EntryTypeDto> _entryTypes;
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("entryTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<EntryTypeDto> EntryTypes
        {
            get { return _entryTypes; }
            set 
            {
                if (_entryTypes != value)
                {
                    _entryTypes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashAccountDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashAccountDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EntryTypeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _entryTypeId;
        private EntryTypeDtoDisableReceipt? _disableReceipt;
        private string _module;
        private BranchNumberDto _defaultOffsetAccountBranch;
        private AccountNumberDto _defaultOffsetAccount;
        private SubAccountDescriptionDto _defaultOffsetSubaccount;
        private AccountNumberDto _reclasificationAccount;
        private AccountNumberDto _businessAccount;
        private string _description;
        private bool? _useForPaymentsReclasification;
        private AccountNumberDto _reclasificationAccountOverride;
        private AccountNumberDto _offsetAccountOverride;
        private SubAccountDescriptionDto _offsetSubaccountOverride;
        private BranchNumberDto _offsetAccountBranch;
        private VatZoneDto _vatZone;
        private EntryTypeDtoTaxCalculationMode? _taxCalculationMode;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        /// <summary>The entry type, selected by its identifier.</summary>
        [Newtonsoft.Json.JsonProperty("entryTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryTypeId
        {
            get { return _entryTypeId; }
            set 
            {
                if (_entryTypeId != value)
                {
                    _entryTypeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The basic type of cash transaction designated by this entry type: Receipt or Disbursement.</summary>
        [Newtonsoft.Json.JsonProperty("disableReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntryTypeDtoDisableReceipt? DisableReceipt
        {
            get { return _disableReceipt; }
            set 
            {
                if (_disableReceipt != value)
                {
                    _disableReceipt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The way the entry type is used in the system.</summary>
        [Newtonsoft.Json.JsonProperty("module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Module
        {
            get { return _module; }
            set 
            {
                if (_module != value)
                {
                    _module = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The branch to which the default offset account belongs.</summary>
        [Newtonsoft.Json.JsonProperty("defaultOffsetAccountBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto DefaultOffsetAccountBranch
        {
            get { return _defaultOffsetAccountBranch; }
            set 
            {
                if (_defaultOffsetAccountBranch != value)
                {
                    _defaultOffsetAccountBranch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The account that is used by default as the offset account for this entry type.</summary>
        [Newtonsoft.Json.JsonProperty("defaultOffsetAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto DefaultOffsetAccount
        {
            get { return _defaultOffsetAccount; }
            set 
            {
                if (_defaultOffsetAccount != value)
                {
                    _defaultOffsetAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The corresponding subaccount.</summary>
        [Newtonsoft.Json.JsonProperty("defaultOffsetSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto DefaultOffsetSubaccount
        {
            get { return _defaultOffsetSubaccount; }
            set 
            {
                if (_defaultOffsetSubaccount != value)
                {
                    _defaultOffsetSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The cash account that is used to temporary hold payments that came to the bank account but cannot be entered as valid payments because the customer or vendor is unknown.
        ///             The parameter is used together with the Use for Payments Reclassification check box.</summary>
        [Newtonsoft.Json.JsonProperty("reclasificationAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto ReclasificationAccount
        {
            get { return _reclasificationAccount; }
            set 
            {
                if (_reclasificationAccount != value)
                {
                    _reclasificationAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The vendor account, if the entry type is used to record transactions that involve a particular vendor, or the customer account,
        ///             if the entry type is used to record transactions that involve a particular customer.</summary>
        [Newtonsoft.Json.JsonProperty("businessAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto BusinessAccount
        {
            get { return _businessAccount; }
            set 
            {
                if (_businessAccount != value)
                {
                    _businessAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A detailed description of the entry type that is used as transaction description by default.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select if this entry type is used to record unknown payments that need to be reclassified later.</summary>
        [Newtonsoft.Json.JsonProperty("useForPaymentsReclasification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseForPaymentsReclasification
        {
            get { return _useForPaymentsReclasification; }
            set 
            {
                if (_useForPaymentsReclasification != value)
                {
                    _useForPaymentsReclasification = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The account that should be used instead of the reclassification account specified as the default one on the Entry Types.</summary>
        [Newtonsoft.Json.JsonProperty("reclasificationAccountOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto ReclasificationAccountOverride
        {
            get { return _reclasificationAccountOverride; }
            set 
            {
                if (_reclasificationAccountOverride != value)
                {
                    _reclasificationAccountOverride = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The account that should be used as the offset account for this entry type with this cash account instead of the default offset account specified on the Entry Types. 
        ///             We recommend that for the disbursement type of transaction, you specify an expense account. For the receipt type of transaction, specify an asset account.</summary>
        [Newtonsoft.Json.JsonProperty("offsetAccountOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto OffsetAccountOverride
        {
            get { return _offsetAccountOverride; }
            set 
            {
                if (_offsetAccountOverride != value)
                {
                    _offsetAccountOverride = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The subaccount for this entry type to be used with this cash account instead of the default offset subaccount specified on the Entry Types form.</summary>
        [Newtonsoft.Json.JsonProperty("offsetSubaccountOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto OffsetSubaccountOverride
        {
            get { return _offsetSubaccountOverride; }
            set 
            {
                if (_offsetSubaccountOverride != value)
                {
                    _offsetSubaccountOverride = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The branch to which the overriding offset account belongs.</summary>
        [Newtonsoft.Json.JsonProperty("offsetAccountBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto OffsetAccountBranch
        {
            get { return _offsetAccountBranch; }
            set 
            {
                if (_offsetAccountBranch != value)
                {
                    _offsetAccountBranch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The tax zone to be used by default with this entry type.</summary>
        [Newtonsoft.Json.JsonProperty("vatZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatZoneDto VatZone
        {
            get { return _vatZone; }
            set 
            {
                if (_vatZone != value)
                {
                    _vatZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The tax calculation mode to be used by default with this entry type</summary>
        [Newtonsoft.Json.JsonProperty("taxCalculationMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntryTypeDtoTaxCalculationMode? TaxCalculationMode
        {
            get { return _taxCalculationMode; }
            set 
            {
                if (_taxCalculationMode != value)
                {
                    _taxCalculationMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EntryTypeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EntryTypeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashAccountQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashAccountQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashAccountQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a invoice in InvoiceController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashSaleDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CreditTermsDto _creditTerms;
        private System.Collections.ObjectModel.ObservableCollection<CashSaleLineDto> _cashSaleLines;
        private bool? _hold;
        private double? _detailTotal;
        private double? _detailTotalInCurrency;
        private double? _vatTaxableTotal;
        private double? _vatTaxableTotalInCurrency;
        private double? _vatExemptTotal;
        private double? _vatExemptTotalInCurrency;
        private int? _salesPersonID;
        private string _salesPersonDescr;
        private string _paymentReference;
        private CustomerNumberDto _customer;
        private CashSaleDtoDocumentType? _documentType;
        private string _referenceNumber;
        private string _postPeriod;
        private string _financialPeriod;
        private string _closedFinancialPeriod;
        private System.DateTimeOffset? _documentDate;
        private CashSaleDtoStatus? _status;
        private string _currencyId;
        private double? _amount;
        private double? _amountInCurrency;
        private double? _balance;
        private double? _balanceInCurrency;
        private double? _cashDiscount;
        private double? _cashDiscountInCurrency;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _customerRefNumber;
        private string _invoiceText;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.DateTimeOffset? _createdDateTime;
        private string _note;
        private double? _vatTotal;
        private double? _vatTotalInCurrency;
        private LocationDto _location;
        private BranchNumberDto _branchNumber;
        private string _cashAccount;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("creditTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto CreditTerms
        {
            get { return _creditTerms; }
            set 
            {
                if (_creditTerms != value)
                {
                    _creditTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashSaleLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CashSaleLineDto> CashSaleLines
        {
            get { return _cashSaleLines; }
            set 
            {
                if (_cashSaleLines != value)
                {
                    _cashSaleLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotal
        {
            get { return _detailTotal; }
            set 
            {
                if (_detailTotal != value)
                {
                    _detailTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotalInCurrency
        {
            get { return _detailTotalInCurrency; }
            set 
            {
                if (_detailTotalInCurrency != value)
                {
                    _detailTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotalInCurrency
        {
            get { return _vatTaxableTotalInCurrency; }
            set 
            {
                if (_vatTaxableTotalInCurrency != value)
                {
                    _vatTaxableTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotalInCurrency
        {
            get { return _vatExemptTotalInCurrency; }
            set 
            {
                if (_vatExemptTotalInCurrency != value)
                {
                    _vatExemptTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SalesPersonID
        {
            get { return _salesPersonID; }
            set 
            {
                if (_salesPersonID != value)
                {
                    _salesPersonID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonDescr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesPersonDescr
        {
            get { return _salesPersonDescr; }
            set 
            {
                if (_salesPersonDescr != value)
                {
                    _salesPersonDescr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReference
        {
            get { return _paymentReference; }
            set 
            {
                if (_paymentReference != value)
                {
                    _paymentReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashSaleDtoDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("closedFinancialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosedFinancialPeriod
        {
            get { return _closedFinancialPeriod; }
            set 
            {
                if (_closedFinancialPeriod != value)
                {
                    _closedFinancialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DocumentDate
        {
            get { return _documentDate; }
            set 
            {
                if (_documentDate != value)
                {
                    _documentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashSaleDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BalanceInCurrency
        {
            get { return _balanceInCurrency; }
            set 
            {
                if (_balanceInCurrency != value)
                {
                    _balanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountInCurrency
        {
            get { return _cashDiscountInCurrency; }
            set 
            {
                if (_cashDiscountInCurrency != value)
                {
                    _cashDiscountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRefNumber
        {
            get { return _customerRefNumber; }
            set 
            {
                if (_customerRefNumber != value)
                {
                    _customerRefNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotalInCurrency
        {
            get { return _vatTotalInCurrency; }
            set 
            {
                if (_vatTotalInCurrency != value)
                {
                    _vatTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashSaleDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashSaleDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreditTermsDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreditTermsDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreditTermsDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashSaleLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private string _inventoryNumber;
        private string _description;
        private double? _quantity;
        private double? _unitPrice;
        private double? _unitPriceInCurrency;
        private double? _manualAmount;
        private double? _manualAmountInCurrency;
        private double? _amount;
        private double? _amountInCurrency;
        private AccountNumberDto _account;
        private VatCodeDto _vatCode;
        private string _uom;
        private double? _discountPercent;
        private double? _discountAmount;
        private double? _discountAmountInCurrency;
        private bool? _manualDiscount;
        private SubAccountDto _subaccount;
        private string _salesperson;
        private int? _deferralSchedule;
        private string _deferralCode;
        private string _discountCode;
        private string _note;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPriceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPriceInCurrency
        {
            get { return _unitPriceInCurrency; }
            set 
            {
                if (_unitPriceInCurrency != value)
                {
                    _unitPriceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManualAmount
        {
            get { return _manualAmount; }
            set 
            {
                if (_manualAmount != value)
                {
                    _manualAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManualAmountInCurrency
        {
            get { return _manualAmountInCurrency; }
            set 
            {
                if (_manualAmountInCurrency != value)
                {
                    _manualAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatCodeDto VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmountInCurrency
        {
            get { return _discountAmountInCurrency; }
            set 
            {
                if (_discountAmountInCurrency != value)
                {
                    _discountAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesperson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Salesperson
        {
            get { return _salesperson; }
            set 
            {
                if (_salesperson != value)
                {
                    _salesperson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashSaleLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashSaleLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerNumberDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerNumberDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNumberDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentMethodIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentMethodIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentMethodIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LocationDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _countryId;
        private string _id;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryId
        {
            get { return _countryId; }
            set 
            {
                if (_countryId != value)
                {
                    _countryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LocationDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatCodeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatCodeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatCodeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SubAccountDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private int? _id;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<SegmentDto> _segments;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentDto> Segments
        {
            get { return _segments; }
            set 
            {
                if (_segments != value)
                {
                    _segments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubAccountDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubAccountDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SegmentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _segmentId;
        private string _segmentDescription;
        private string _segmentValue;
        private string _segmentValueDescription;
    
        [Newtonsoft.Json.JsonProperty("segmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SegmentId
        {
            get { return _segmentId; }
            set 
            {
                if (_segmentId != value)
                {
                    _segmentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segmentDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentDescription
        {
            get { return _segmentDescription; }
            set 
            {
                if (_segmentDescription != value)
                {
                    _segmentDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segmentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentValue
        {
            get { return _segmentValue; }
            set 
            {
                if (_segmentValue != value)
                {
                    _segmentValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segmentValueDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentValueDescription
        {
            get { return _segmentValueDescription; }
            set 
            {
                if (_segmentValueDescription != value)
                {
                    _segmentValueDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SegmentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SegmentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DocumentQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private DocumentQueryParametersDocumentType? _documentType;
        private string _greaterThanValue;
        private int? _released;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private int? _dunningLevel;
        private string _closedFinancialPeriod;
        private string _dunningLetterDateTime;
        private string _dunningLetterDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentQueryParametersDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("released", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Released
        {
            get { return _released; }
            set 
            {
                if (_released != value)
                {
                    _released = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dunningLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DunningLevel
        {
            get { return _dunningLevel; }
            set 
            {
                if (_dunningLevel != value)
                {
                    _dunningLevel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedFinancialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosedFinancialPeriod
        {
            get { return _closedFinancialPeriod; }
            set 
            {
                if (_closedFinancialPeriod != value)
                {
                    _closedFinancialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dunningLetterDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DunningLetterDateTime
        {
            get { return _dunningLetterDateTime; }
            set 
            {
                if (_dunningLetterDateTime != value)
                {
                    _dunningLetterDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dunningLetterDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DunningLetterDateTimeCondition
        {
            get { return _dunningLetterDateTimeCondition; }
            set 
            {
                if (_dunningLetterDateTimeCondition != value)
                {
                    _dunningLetterDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashSaleUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _paymentMethodId;
        private DtoValueOfString _creditTermsId;
        private DtoValueOfString _cashAccount;
        private DtoValueOfString _paymentReference;
        private System.Collections.ObjectModel.ObservableCollection<CashSaleLinesUpdateDto> _cashSaleLines;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfString _customerNumber;
        private DtoValueOfDateTime _documentDate;
        private DtoValueOfBoolean _hold;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _financialPeriod;
        private DtoValueOfString _invoiceText;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfInt32 _salesPersonID;
        private DtoValueOfString _note;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("paymentMethodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentMethodId
        {
            get { return _paymentMethodId; }
            set 
            {
                if (_paymentMethodId != value)
                {
                    _paymentMethodId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTermsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CreditTermsId
        {
            get { return _creditTermsId; }
            set 
            {
                if (_creditTermsId != value)
                {
                    _creditTermsId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory</summary>
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentReference
        {
            get { return _paymentReference; }
            set 
            {
                if (_paymentReference != value)
                {
                    _paymentReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashSaleLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CashSaleLinesUpdateDto> CashSaleLines
        {
            get { return _cashSaleLines; }
            set 
            {
                if (_cashSaleLines != value)
                {
                    _cashSaleLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerNumber
        {
            get { return _customerNumber; }
            set 
            {
                if (_customerNumber != value)
                {
                    _customerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime DocumentDate
        {
            get { return _documentDate; }
            set 
            {
                if (_documentDate != value)
                {
                    _documentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 SalesPersonID
        {
            get { return _salesPersonID; }
            set 
            {
                if (_salesPersonID != value)
                {
                    _salesPersonID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashSaleUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashSaleUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashSaleLinesUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CashSaleLinesUpdateDtoOperation? _operation;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _description;
        private DtoValueOfDecimal _quantity;
        private DtoValueOfDecimal _unitPriceInCurrency;
        private DtoValueOfDecimal _manualAmountInCurrency;
        private DtoValueOfString _accountNumber;
        private DtoValueOfString _vatCodeId;
        private DtoValueOfString _uom;
        private DtoValueOfDecimal _discountPercent;
        private DtoValueOfDecimal _discountAmountInCurrency;
        private DtoValueOfBoolean _manualDiscount;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfString _salesperson;
        private DtoValueOfInt32 _deferralSchedule;
        private DtoValueOfString _deferralCode;
        private DtoValueOfDateTime _termStartDate;
        private DtoValueOfDateTime _termEndDate;
        private DtoValueOfString _note;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashSaleLinesUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPriceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal UnitPriceInCurrency
        {
            get { return _unitPriceInCurrency; }
            set 
            {
                if (_unitPriceInCurrency != value)
                {
                    _unitPriceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal ManualAmountInCurrency
        {
            get { return _manualAmountInCurrency; }
            set 
            {
                if (_manualAmountInCurrency != value)
                {
                    _manualAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountNumber
        {
            get { return _accountNumber; }
            set 
            {
                if (_accountNumber != value)
                {
                    _accountNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatCodeId
        {
            get { return _vatCodeId; }
            set 
            {
                if (_vatCodeId != value)
                {
                    _vatCodeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal DiscountAmountInCurrency
        {
            get { return _discountAmountInCurrency; }
            set 
            {
                if (_discountAmountInCurrency != value)
                {
                    _discountAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesperson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Salesperson
        {
            get { return _salesperson; }
            set 
            {
                if (_salesperson != value)
                {
                    _salesperson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime TermStartDate
        {
            get { return _termStartDate; }
            set 
            {
                if (_termStartDate != value)
                {
                    _termStartDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime TermEndDate
        {
            get { return _termEndDate; }
            set 
            {
                if (_termEndDate != value)
                {
                    _termEndDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashSaleLinesUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashSaleLinesUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfDateTime : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfDateTime FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfDateTime>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfInt32 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfInt32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfInt32>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfInt32 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfInt32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfInt32>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashTransactionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CashTransactionDtoTranType? _tranType;
        private string _referenceNbr;
        private CashTransactionDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _tranDate;
        private string _finPeriod;
        private AccountNumberTypeDescriptionDto _cashAccount;
        private string _currency;
        private EntryTypeIdDescriptionDto _entryType;
        private CashTransactionDtoDisbReceipt? _disbReceipt;
        private string _documentRef;
        private EmployeeNumberNameDto _owner;
        private string _description;
        private double? _amount;
        private double? _vatTaxableTotal;
        private double? _vatExemptTotal;
        private double? _taxTotal;
        private double? _controlTotal;
        private double? _taxAmount;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<TransactionDetailDto> _transactionDetails;
        private System.Collections.ObjectModel.ObservableCollection<CashTranTaxDetailDto> _taxDetails;
        private FinancialsDetailDto _financialsDetail;
    
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashTransactionDtoTranType? TranType
        {
            get { return _tranType; }
            set 
            {
                if (_tranType != value)
                {
                    _tranType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNbr
        {
            get { return _referenceNbr; }
            set 
            {
                if (_referenceNbr != value)
                {
                    _referenceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashTransactionDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tranDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TranDate
        {
            get { return _tranDate; }
            set 
            {
                if (_tranDate != value)
                {
                    _tranDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("finPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinPeriod
        {
            get { return _finPeriod; }
            set 
            {
                if (_finPeriod != value)
                {
                    _finPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("entryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntryTypeIdDescriptionDto EntryType
        {
            get { return _entryType; }
            set 
            {
                if (_entryType != value)
                {
                    _entryType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("disbReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashTransactionDtoDisbReceipt? DisbReceipt
        {
            get { return _disbReceipt; }
            set 
            {
                if (_disbReceipt != value)
                {
                    _disbReceipt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentRef
        {
            get { return _documentRef; }
            set 
            {
                if (_documentRef != value)
                {
                    _documentRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeNumberNameDto Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxTotal
        {
            get { return _taxTotal; }
            set 
            {
                if (_taxTotal != value)
                {
                    _taxTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount
        {
            get { return _taxAmount; }
            set 
            {
                if (_taxAmount != value)
                {
                    _taxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TransactionDetailDto> TransactionDetails
        {
            get { return _transactionDetails; }
            set 
            {
                if (_transactionDetails != value)
                {
                    _transactionDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CashTranTaxDetailDto> TaxDetails
        {
            get { return _taxDetails; }
            set 
            {
                if (_taxDetails != value)
                {
                    _taxDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("financialsDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinancialsDetailDto FinancialsDetail
        {
            get { return _financialsDetail; }
            set 
            {
                if (_financialsDetail != value)
                {
                    _financialsDetail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashTransactionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashTransactionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AccountNumberTypeDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _type;
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AccountNumberTypeDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountNumberTypeDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EntryTypeIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EntryTypeIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EntryTypeIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents an Employee with its Number and Name. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EmployeeNumberNameDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _internalId;
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmployeeNumberNameDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmployeeNumberNameDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TransactionDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private BranchNumberDto _branch;
        private InventoryNumberDescriptionDto _item;
        private string _description;
        private double? _quantity;
        private string _uom;
        private double? _price;
        private double? _amount;
        private AccountNumberTypeDescriptionDto _offsetCashAccount;
        private AccountNumberTypeDescriptionDto _offsetAccount;
        private SubAccountDto _offsetSubAccount;
        private TaxCategoryNumberDescriptionDto _taxCategory;
        private bool? _nonBillable;
        private ProjectIdDescriptionDto _project;
        private ProjectTaskIdDescriptionDto _projectTask;
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Item
        {
            get { return _item; }
            set 
            {
                if (_item != value)
                {
                    _item = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offsetCashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto OffsetCashAccount
        {
            get { return _offsetCashAccount; }
            set 
            {
                if (_offsetCashAccount != value)
                {
                    _offsetCashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offsetAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto OffsetAccount
        {
            get { return _offsetAccount; }
            set 
            {
                if (_offsetAccount != value)
                {
                    _offsetAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offsetSubAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto OffsetSubAccount
        {
            get { return _offsetSubAccount; }
            set 
            {
                if (_offsetSubAccount != value)
                {
                    _offsetSubAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxCategoryNumberDescriptionDto TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nonBillable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonBillable
        {
            get { return _nonBillable; }
            set 
            {
                if (_nonBillable != value)
                {
                    _nonBillable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectIdDescriptionDto Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTaskIdDescriptionDto ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransactionDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashTranTaxDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private TaxNumberDescriptionDto _tax;
        private double? _taxRate;
        private double? _taxableAmount;
        private double? _taxAmount;
        private double? _deductibleTaxRate;
        private double? _expenseAmount;
        private bool? _includeInVatExemptTotal;
        private bool? _pendingVat;
        private bool? _statisticalVat;
        private bool? _reverseVat;
        private CashTranTaxDetailDtoTaxType? _taxType;
    
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxNumberDescriptionDto Tax
        {
            get { return _tax; }
            set 
            {
                if (_tax != value)
                {
                    _tax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxRate
        {
            get { return _taxRate; }
            set 
            {
                if (_taxRate != value)
                {
                    _taxRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxableAmount
        {
            get { return _taxableAmount; }
            set 
            {
                if (_taxableAmount != value)
                {
                    _taxableAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount
        {
            get { return _taxAmount; }
            set 
            {
                if (_taxAmount != value)
                {
                    _taxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deductibleTaxRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductibleTaxRate
        {
            get { return _deductibleTaxRate; }
            set 
            {
                if (_deductibleTaxRate != value)
                {
                    _deductibleTaxRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExpenseAmount
        {
            get { return _expenseAmount; }
            set 
            {
                if (_expenseAmount != value)
                {
                    _expenseAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeInVatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeInVatExemptTotal
        {
            get { return _includeInVatExemptTotal; }
            set 
            {
                if (_includeInVatExemptTotal != value)
                {
                    _includeInVatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pendingVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PendingVat
        {
            get { return _pendingVat; }
            set 
            {
                if (_pendingVat != value)
                {
                    _pendingVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statisticalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StatisticalVat
        {
            get { return _statisticalVat; }
            set 
            {
                if (_statisticalVat != value)
                {
                    _statisticalVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reverseVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseVat
        {
            get { return _reverseVat; }
            set 
            {
                if (_reverseVat != value)
                {
                    _reverseVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashTranTaxDetailDtoTaxType? TaxType
        {
            get { return _taxType; }
            set 
            {
                if (_taxType != value)
                {
                    _taxType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashTranTaxDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashTranTaxDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class FinancialsDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _batchNumber;
        private BranchNumberDto _branch;
        private bool? _cleared;
        private System.DateTimeOffset? _clearDate;
        private VatZoneDto _taxZone;
        private FinancialsDetailDtoTaxCalcMode? _taxCalcMode;
    
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cleared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cleared
        {
            get { return _cleared; }
            set 
            {
                if (_cleared != value)
                {
                    _cleared = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("clearDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClearDate
        {
            get { return _clearDate; }
            set 
            {
                if (_clearDate != value)
                {
                    _clearDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatZoneDto TaxZone
        {
            get { return _taxZone; }
            set 
            {
                if (_taxZone != value)
                {
                    _taxZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCalcMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FinancialsDetailDtoTaxCalcMode? TaxCalcMode
        {
            get { return _taxCalcMode; }
            set 
            {
                if (_taxCalcMode != value)
                {
                    _taxCalcMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FinancialsDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialsDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TaxCategoryNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TaxCategoryNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxCategoryNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ProjectIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ProjectTaskIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectTaskIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectTaskIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TaxNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TaxNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashTransactionQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashTransactionQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashTransactionQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashTransactionUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _referenceNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _tranDate;
        private DtoValueOfString _finanacialPeriod;
        private DtoValueOfString _description;
        private DtoValueOfString _cashAccount;
        private DtoValueOfString _entryType;
        private DtoValueOfString _documentRef;
        private DtoValueOfNullableOfDecimal _controlTotal;
        private DtoValueOfNullableOfDecimal _vatAmount;
        private DtoValueOfString _vatZone;
        private DtoValueOfNullableOfTaxCalcMode _taxCalculationMode;
        private System.Collections.ObjectModel.ObservableCollection<CashTransactionDetailUpdateDto> _cashTransactionDetails;
        private System.Collections.ObjectModel.ObservableCollection<CashTransactionTaxDetailUpdateDto> _cashTransactionTaxDetails;
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tranDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime TranDate
        {
            get { return _tranDate; }
            set 
            {
                if (_tranDate != value)
                {
                    _tranDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("finanacialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FinanacialPeriod
        {
            get { return _finanacialPeriod; }
            set 
            {
                if (_finanacialPeriod != value)
                {
                    _finanacialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("entryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString EntryType
        {
            get { return _entryType; }
            set 
            {
                if (_entryType != value)
                {
                    _entryType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DocumentRef
        {
            get { return _documentRef; }
            set 
            {
                if (_documentRef != value)
                {
                    _documentRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal VatAmount
        {
            get { return _vatAmount; }
            set 
            {
                if (_vatAmount != value)
                {
                    _vatAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatZone
        {
            get { return _vatZone; }
            set 
            {
                if (_vatZone != value)
                {
                    _vatZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCalculationMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfTaxCalcMode TaxCalculationMode
        {
            get { return _taxCalculationMode; }
            set 
            {
                if (_taxCalculationMode != value)
                {
                    _taxCalculationMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashTransactionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CashTransactionDetailUpdateDto> CashTransactionDetails
        {
            get { return _cashTransactionDetails; }
            set 
            {
                if (_cashTransactionDetails != value)
                {
                    _cashTransactionDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashTransactionTaxDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CashTransactionTaxDetailUpdateDto> CashTransactionTaxDetails
        {
            get { return _cashTransactionTaxDetails; }
            set 
            {
                if (_cashTransactionTaxDetails != value)
                {
                    _cashTransactionTaxDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashTransactionUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashTransactionUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfBoolean : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfBoolean FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfBoolean>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfDateTime : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfDateTime FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfDateTime>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfDecimal : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfDecimal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfDecimal>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfTaxCalcMode : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfTaxCalcModeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfTaxCalcModeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfTaxCalcMode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfTaxCalcMode>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashTransactionDetailUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CashTransactionDetailUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _branchNumber;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _price;
        private DtoValueOfNullableOfDecimal _amount;
        private DtoValueOfString _offsetAccount;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _offsetSubaccount;
        private DtoValueOfString _vatCode;
        private DtoValueOfNullableOfBoolean _notInvoiceable;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashTransactionDetailUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offsetAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OffsetAccount
        {
            get { return _offsetAccount; }
            set 
            {
                if (_offsetAccount != value)
                {
                    _offsetAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offsetSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> OffsetSubaccount
        {
            get { return _offsetSubaccount; }
            set 
            {
                if (_offsetSubaccount != value)
                {
                    _offsetSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notInvoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean NotInvoiceable
        {
            get { return _notInvoiceable; }
            set 
            {
                if (_notInvoiceable != value)
                {
                    _notInvoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashTransactionDetailUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashTransactionDetailUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CashTransactionTaxDetailUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _vatId;
        private DtoValueOfNullableOfDecimal _taxableAmount;
        private DtoValueOfNullableOfDecimal _vatAmount;
        private DtoValueOfNullableOfDecimal _expenseAmount;
    
        [Newtonsoft.Json.JsonProperty("vatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatId
        {
            get { return _vatId; }
            set 
            {
                if (_vatId != value)
                {
                    _vatId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal TaxableAmount
        {
            get { return _taxableAmount; }
            set 
            {
                if (_taxableAmount != value)
                {
                    _taxableAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal VatAmount
        {
            get { return _vatAmount; }
            set 
            {
                if (_vatAmount != value)
                {
                    _vatAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExpenseAmount
        {
            get { return _expenseAmount; }
            set 
            {
                if (_expenseAmount != value)
                {
                    _expenseAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CashTransactionTaxDetailUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashTransactionTaxDetailUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReleaseCashTransactionActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private ReleaseCashTransactionActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReleaseCashTransactionActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleaseCashTransactionActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseCashTransactionActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReverseCashTransactionActionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _returnCashTransaction;
    
        [Newtonsoft.Json.JsonProperty("returnCashTransaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnCashTransaction
        {
            get { return _returnCashTransaction; }
            set 
            {
                if (_returnCashTransaction != value)
                {
                    _returnCashTransaction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReverseCashTransactionActionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReverseCashTransactionActionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReverseCashTransactionActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _referenceNbr;
        private CashTransactionDto _cashTransaction;
        private System.Guid? _actionId;
        private ReverseCashTransactionActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("referenceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNbr
        {
            get { return _referenceNbr; }
            set 
            {
                if (_referenceNbr != value)
                {
                    _referenceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashTransaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CashTransactionDto CashTransaction
        {
            get { return _cashTransaction; }
            set 
            {
                if (_cashTransaction != value)
                {
                    _cashTransaction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReverseCashTransactionActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReverseCashTransactionActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReverseCashTransactionActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a contact in ContactController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContactDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _displayName;
        private bool? _active;
        private ContactDtoTitle? _title;
        private string _firstName;
        private string _lastName;
        private string _position;
        private string _businessAccount;
        private bool? _sameAsAccount;
        private AddressDto _address;
        private string _email;
        private string _web;
        private string _phone1;
        private string _phone2;
        private string _phone3;
        private string _fax;
        private ContactDtoContactMethod? _contactMethod;
        private bool? _doNotCall;
        private bool? _doNotFax;
        private bool? _doNotEmail;
        private bool? _doNotMail;
        private bool? _noMassMail;
        private bool? _noMarketing;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private int? _contactId;
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContactDtoTitle? Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("businessAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessAccount
        {
            get { return _businessAccount; }
            set 
            {
                if (_businessAccount != value)
                {
                    _businessAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sameAsAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SameAsAccount
        {
            get { return _sameAsAccount; }
            set 
            {
                if (_sameAsAccount != value)
                {
                    _sameAsAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address
        {
            get { return _address; }
            set 
            {
                if (_address != value)
                {
                    _address = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone3
        {
            get { return _phone3; }
            set 
            {
                if (_phone3 != value)
                {
                    _phone3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContactDtoContactMethod? ContactMethod
        {
            get { return _contactMethod; }
            set 
            {
                if (_contactMethod != value)
                {
                    _contactMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotCall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoNotCall
        {
            get { return _doNotCall; }
            set 
            {
                if (_doNotCall != value)
                {
                    _doNotCall = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotFax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoNotFax
        {
            get { return _doNotFax; }
            set 
            {
                if (_doNotFax != value)
                {
                    _doNotFax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoNotEmail
        {
            get { return _doNotEmail; }
            set 
            {
                if (_doNotEmail != value)
                {
                    _doNotEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoNotMail
        {
            get { return _doNotMail; }
            set 
            {
                if (_doNotMail != value)
                {
                    _doNotMail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noMassMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoMassMail
        {
            get { return _noMassMail; }
            set 
            {
                if (_noMassMail != value)
                {
                    _noMassMail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noMarketing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoMarketing
        {
            get { return _noMarketing; }
            set 
            {
                if (_noMarketing != value)
                {
                    _noMarketing = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId
        {
            get { return _contactId; }
            set 
            {
                if (_contactId != value)
                {
                    _contactId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContactDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContactDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContactUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfBoolean _active;
        private DtoValueOfEmployeeTitles _title;
        private DtoValueOfString _firstName;
        private DtoValueOfString _lastName;
        private DtoValueOfString _position;
        private DtoValueOfString _businessAccount;
        private DtoValueOfBoolean _sameAsAccount;
        private DtoValueOfAddressUpdateDto _address;
        private DtoValueOfString _email;
        private DtoValueOfString _web;
        private DtoValueOfString _phone1;
        private DtoValueOfString _phone2;
        private DtoValueOfString _phone3;
        private DtoValueOfString _fax;
        private DtoValueOfContactMethods _contactMethod;
        private DtoValueOfBoolean _doNotCall;
        private DtoValueOfBoolean _doNotFax;
        private DtoValueOfBoolean _doNotEmail;
        private DtoValueOfBoolean _doNotMail;
        private DtoValueOfBoolean _noMassMail;
        private DtoValueOfBoolean _noMarketing;
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfEmployeeTitles Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("businessAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BusinessAccount
        {
            get { return _businessAccount; }
            set 
            {
                if (_businessAccount != value)
                {
                    _businessAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sameAsAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean SameAsAccount
        {
            get { return _sameAsAccount; }
            set 
            {
                if (_sameAsAccount != value)
                {
                    _sameAsAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAddressUpdateDto Address
        {
            get { return _address; }
            set 
            {
                if (_address != value)
                {
                    _address = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone3
        {
            get { return _phone3; }
            set 
            {
                if (_phone3 != value)
                {
                    _phone3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfContactMethods ContactMethod
        {
            get { return _contactMethod; }
            set 
            {
                if (_contactMethod != value)
                {
                    _contactMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotCall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean DoNotCall
        {
            get { return _doNotCall; }
            set 
            {
                if (_doNotCall != value)
                {
                    _doNotCall = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotFax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean DoNotFax
        {
            get { return _doNotFax; }
            set 
            {
                if (_doNotFax != value)
                {
                    _doNotFax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean DoNotEmail
        {
            get { return _doNotEmail; }
            set 
            {
                if (_doNotEmail != value)
                {
                    _doNotEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("doNotMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean DoNotMail
        {
            get { return _doNotMail; }
            set 
            {
                if (_doNotMail != value)
                {
                    _doNotMail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noMassMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean NoMassMail
        {
            get { return _noMassMail; }
            set 
            {
                if (_noMassMail != value)
                {
                    _noMassMail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noMarketing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean NoMarketing
        {
            get { return _noMarketing; }
            set 
            {
                if (_noMarketing != value)
                {
                    _noMarketing = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContactUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContactUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfEmployeeTitles : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfEmployeeTitlesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfEmployeeTitlesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfEmployeeTitles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfEmployeeTitles>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfAddressUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private AddressUpdateDto _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressUpdateDto Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfAddressUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfAddressUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfContactMethods : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfContactMethodsValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfContactMethodsValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfContactMethods FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfContactMethods>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AddressUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _addressLine1;
        private DtoValueOfString _addressLine2;
        private DtoValueOfString _addressLine3;
        private DtoValueOfString _postalCode;
        private DtoValueOfString _city;
        private DtoValueOfString _countryId;
        private DtoValueOfString _county;
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CountryId
        {
            get { return _countryId; }
            set 
            {
                if (_countryId != value)
                {
                    _countryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AddressUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddressUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContactQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContactQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContactQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractTemplateQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractTemplateQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractTemplateQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractTemplateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _lastModifiedDateTime;
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractTemplateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractTemplateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractUsageDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _contract;
        private System.Collections.ObjectModel.ObservableCollection<ContractUsageLineDto> _transaction;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("contract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract
        {
            get { return _contract; }
            set 
            {
                if (_contract != value)
                {
                    _contract = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContractUsageLineDto> Transaction
        {
            get { return _transaction; }
            set 
            {
                if (_transaction != value)
                {
                    _transaction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractUsageDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractUsageDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractUsageLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _transactionNumber;
        private bool? _billed;
        private BranchNumberDto _branch;
        private InventoryNumberDescriptionDto _item;
        private string _description;
        private string _uom;
        private double? _quantity;
        private System.DateTimeOffset? _date;
        private string _type;
        private string _referenceNbr;
        private System.DateTimeOffset? _billingDate;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("transactionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TransactionNumber
        {
            get { return _transactionNumber; }
            set 
            {
                if (_transactionNumber != value)
                {
                    _transactionNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("billed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Billed
        {
            get { return _billed; }
            set 
            {
                if (_billed != value)
                {
                    _billed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Item
        {
            get { return _item; }
            set 
            {
                if (_item != value)
                {
                    _item = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNbr
        {
            get { return _referenceNbr; }
            set 
            {
                if (_referenceNbr != value)
                {
                    _referenceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("billingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BillingDate
        {
            get { return _billingDate; }
            set 
            {
                if (_billingDate != value)
                {
                    _billingDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractUsageLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractUsageLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Contract Usage in Contract Usage Controller. Used to pass data to server for creating or updating an Contract Usage</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractUsageUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ContractUsageLineUpdateDto> _lines;
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContractUsageLineUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractUsageUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractUsageUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Contract Usage Line in Contract Usage Controller. Used to pass data to server for creating or updating an Contract Usage Line</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractUsageLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private ContractUsageLineUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _transactionNumber;
        private DtoValueOfString _branch;
        private DtoValueOfString _inventory;
        private DtoValueOfString _description;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfNullableOfDateTime _date;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractUsageLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 TransactionNumber
        {
            get { return _transactionNumber; }
            set 
            {
                if (_transactionNumber != value)
                {
                    _transactionNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractUsageLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractUsageLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractUsageQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractUsageQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractUsageQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a invoice in InvoiceController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreditNoteDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _externalReference;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private System.Collections.ObjectModel.ObservableCollection<CreditNoteLineDto> _invoiceLines;
        private bool? _hold;
        private double? _detailTotal;
        private double? _detailTotalInCurrency;
        private double? _vatTaxableTotal;
        private double? _vatTaxableTotalInCurrency;
        private double? _vatExemptTotal;
        private double? _vatExemptTotalInCurrency;
        private int? _salesPersonID;
        private string _salesPersonDescr;
        private string _paymentReference;
        private CustomerNumberDto _customer;
        private CreditNoteDtoDocumentType? _documentType;
        private string _referenceNumber;
        private string _postPeriod;
        private string _financialPeriod;
        private string _closedFinancialPeriod;
        private System.DateTimeOffset? _documentDate;
        private CreditNoteDtoStatus? _status;
        private string _currencyId;
        private double? _amount;
        private double? _amountInCurrency;
        private double? _balance;
        private double? _balanceInCurrency;
        private double? _cashDiscount;
        private double? _cashDiscountInCurrency;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _customerRefNumber;
        private string _invoiceText;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.DateTimeOffset? _createdDateTime;
        private string _note;
        private double? _vatTotal;
        private double? _vatTotalInCurrency;
        private LocationDto _location;
        private BranchNumberDto _branchNumber;
        private string _cashAccount;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CreditNoteLineDto> InvoiceLines
        {
            get { return _invoiceLines; }
            set 
            {
                if (_invoiceLines != value)
                {
                    _invoiceLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotal
        {
            get { return _detailTotal; }
            set 
            {
                if (_detailTotal != value)
                {
                    _detailTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotalInCurrency
        {
            get { return _detailTotalInCurrency; }
            set 
            {
                if (_detailTotalInCurrency != value)
                {
                    _detailTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotalInCurrency
        {
            get { return _vatTaxableTotalInCurrency; }
            set 
            {
                if (_vatTaxableTotalInCurrency != value)
                {
                    _vatTaxableTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotalInCurrency
        {
            get { return _vatExemptTotalInCurrency; }
            set 
            {
                if (_vatExemptTotalInCurrency != value)
                {
                    _vatExemptTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SalesPersonID
        {
            get { return _salesPersonID; }
            set 
            {
                if (_salesPersonID != value)
                {
                    _salesPersonID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonDescr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesPersonDescr
        {
            get { return _salesPersonDescr; }
            set 
            {
                if (_salesPersonDescr != value)
                {
                    _salesPersonDescr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReference
        {
            get { return _paymentReference; }
            set 
            {
                if (_paymentReference != value)
                {
                    _paymentReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditNoteDtoDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("closedFinancialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosedFinancialPeriod
        {
            get { return _closedFinancialPeriod; }
            set 
            {
                if (_closedFinancialPeriod != value)
                {
                    _closedFinancialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DocumentDate
        {
            get { return _documentDate; }
            set 
            {
                if (_documentDate != value)
                {
                    _documentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditNoteDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BalanceInCurrency
        {
            get { return _balanceInCurrency; }
            set 
            {
                if (_balanceInCurrency != value)
                {
                    _balanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountInCurrency
        {
            get { return _cashDiscountInCurrency; }
            set 
            {
                if (_cashDiscountInCurrency != value)
                {
                    _cashDiscountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRefNumber
        {
            get { return _customerRefNumber; }
            set 
            {
                if (_customerRefNumber != value)
                {
                    _customerRefNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotalInCurrency
        {
            get { return _vatTotalInCurrency; }
            set 
            {
                if (_vatTotalInCurrency != value)
                {
                    _vatTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreditNoteDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreditNoteDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AttachmentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _id;
        private int? _revision;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Revision
        {
            get { return _revision; }
            set 
            {
                if (_revision != value)
                {
                    _revision = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AttachmentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreditNoteLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private int? _lineNumber;
        private string _inventoryNumber;
        private string _description;
        private double? _quantity;
        private double? _unitPrice;
        private double? _unitPriceInCurrency;
        private double? _manualAmount;
        private double? _manualAmountInCurrency;
        private double? _amount;
        private double? _amountInCurrency;
        private AccountNumberDto _account;
        private VatCodeDto _vatCode;
        private string _uom;
        private double? _discountPercent;
        private double? _discountAmount;
        private double? _discountAmountInCurrency;
        private bool? _manualDiscount;
        private SubAccountDto _subaccount;
        private string _salesperson;
        private int? _deferralSchedule;
        private string _deferralCode;
        private string _discountCode;
        private string _note;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPriceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPriceInCurrency
        {
            get { return _unitPriceInCurrency; }
            set 
            {
                if (_unitPriceInCurrency != value)
                {
                    _unitPriceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManualAmount
        {
            get { return _manualAmount; }
            set 
            {
                if (_manualAmount != value)
                {
                    _manualAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManualAmountInCurrency
        {
            get { return _manualAmountInCurrency; }
            set 
            {
                if (_manualAmountInCurrency != value)
                {
                    _manualAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatCodeDto VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmountInCurrency
        {
            get { return _discountAmountInCurrency; }
            set 
            {
                if (_discountAmountInCurrency != value)
                {
                    _discountAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesperson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Salesperson
        {
            get { return _salesperson; }
            set 
            {
                if (_salesperson != value)
                {
                    _salesperson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreditNoteLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreditNoteLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreditNoteUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _currencyId;
        private DtoValueOfString _customerRefNumber;
        private DtoValueOfString _externalReference;
        private System.Collections.ObjectModel.ObservableCollection<CreditNoteLineUpdateDto> _invoiceLines;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfString _customerNumber;
        private DtoValueOfDateTime _documentDate;
        private DtoValueOfBoolean _hold;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _financialPeriod;
        private DtoValueOfString _invoiceText;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfInt32 _salesPersonID;
        private DtoValueOfString _note;
        private DtoValueOfString _branchNumber;
        private DtoValueOfString _cashAccount;
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerRefNumber
        {
            get { return _customerRefNumber; }
            set 
            {
                if (_customerRefNumber != value)
                {
                    _customerRefNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CreditNoteLineUpdateDto> InvoiceLines
        {
            get { return _invoiceLines; }
            set 
            {
                if (_invoiceLines != value)
                {
                    _invoiceLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerNumber
        {
            get { return _customerNumber; }
            set 
            {
                if (_customerNumber != value)
                {
                    _customerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime DocumentDate
        {
            get { return _documentDate; }
            set 
            {
                if (_documentDate != value)
                {
                    _documentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 SalesPersonID
        {
            get { return _salesPersonID; }
            set 
            {
                if (_salesPersonID != value)
                {
                    _salesPersonID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreditNoteUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreditNoteUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreditNoteLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _discountCode;
        private CreditNoteLineUpdateDtoOperation? _operation;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _description;
        private DtoValueOfDecimal _quantity;
        private DtoValueOfDecimal _unitPriceInCurrency;
        private DtoValueOfDecimal _manualAmountInCurrency;
        private DtoValueOfString _accountNumber;
        private DtoValueOfString _vatCodeId;
        private DtoValueOfString _uom;
        private DtoValueOfDecimal _discountPercent;
        private DtoValueOfDecimal _discountAmountInCurrency;
        private DtoValueOfBoolean _manualDiscount;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfString _salesperson;
        private DtoValueOfInt32 _deferralSchedule;
        private DtoValueOfString _deferralCode;
        private DtoValueOfDateTime _termStartDate;
        private DtoValueOfDateTime _termEndDate;
        private DtoValueOfString _note;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditNoteLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPriceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal UnitPriceInCurrency
        {
            get { return _unitPriceInCurrency; }
            set 
            {
                if (_unitPriceInCurrency != value)
                {
                    _unitPriceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal ManualAmountInCurrency
        {
            get { return _manualAmountInCurrency; }
            set 
            {
                if (_manualAmountInCurrency != value)
                {
                    _manualAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountNumber
        {
            get { return _accountNumber; }
            set 
            {
                if (_accountNumber != value)
                {
                    _accountNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatCodeId
        {
            get { return _vatCodeId; }
            set 
            {
                if (_vatCodeId != value)
                {
                    _vatCodeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal DiscountAmountInCurrency
        {
            get { return _discountAmountInCurrency; }
            set 
            {
                if (_discountAmountInCurrency != value)
                {
                    _discountAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesperson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Salesperson
        {
            get { return _salesperson; }
            set 
            {
                if (_salesperson != value)
                {
                    _salesperson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime TermStartDate
        {
            get { return _termStartDate; }
            set 
            {
                if (_termStartDate != value)
                {
                    _termStartDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime TermEndDate
        {
            get { return _termEndDate; }
            set 
            {
                if (_termEndDate != value)
                {
                    _termEndDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreditNoteLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreditNoteLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReleaseInvoiceActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private ReleaseInvoiceActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReleaseInvoiceActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleaseInvoiceActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInvoiceActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerClassDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
        private string _taxZoneId;
        private bool? _requiredTaxzoneId;
        private string _paymentMethodId;
        private System.Collections.ObjectModel.ObservableCollection<ClassAttributeDto> _attributes;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxZoneId
        {
            get { return _taxZoneId; }
            set 
            {
                if (_taxZoneId != value)
                {
                    _taxZoneId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requiredTaxzoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequiredTaxzoneId
        {
            get { return _requiredTaxzoneId; }
            set 
            {
                if (_requiredTaxzoneId != value)
                {
                    _requiredTaxzoneId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodId
        {
            get { return _paymentMethodId; }
            set 
            {
                if (_paymentMethodId != value)
                {
                    _paymentMethodId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ClassAttributeDto> Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerClassDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerClassDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ClassAttributeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _attributeId;
        private string _description;
        private int? _sortOrder;
        private bool? _required;
        private ClassAttributeDtoAttributeType? _attributeType;
        private string _defaultValue;
        private System.Collections.ObjectModel.ObservableCollection<ClassAttributeDetailDto> _details;
    
        [Newtonsoft.Json.JsonProperty("attributeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributeId
        {
            get { return _attributeId; }
            set 
            {
                if (_attributeId != value)
                {
                    _attributeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder
        {
            get { return _sortOrder; }
            set 
            {
                if (_sortOrder != value)
                {
                    _sortOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required
        {
            get { return _required; }
            set 
            {
                if (_required != value)
                {
                    _required = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClassAttributeDtoAttributeType? AttributeType
        {
            get { return _attributeType; }
            set 
            {
                if (_attributeType != value)
                {
                    _attributeType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue
        {
            get { return _defaultValue; }
            set 
            {
                if (_defaultValue != value)
                {
                    _defaultValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ClassAttributeDetailDto> Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ClassAttributeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClassAttributeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ClassAttributeDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ClassAttributeDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClassAttributeDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerBalanceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CustomerDescriptionDto _customer;
        private double? _balance;
        private double? _totalOrder;
        private double? _totalLoan;
        private double? _totalSalePeriod;
        private double? _totalSaleYear;
        private double? _totalDiscountPeriod;
        private double? _totalDiscountYear;
        private System.DateTimeOffset? _lastModified;
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDescriptionDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalOrder
        {
            get { return _totalOrder; }
            set 
            {
                if (_totalOrder != value)
                {
                    _totalOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalLoan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalLoan
        {
            get { return _totalLoan; }
            set 
            {
                if (_totalLoan != value)
                {
                    _totalLoan = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalSalePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSalePeriod
        {
            get { return _totalSalePeriod; }
            set 
            {
                if (_totalSalePeriod != value)
                {
                    _totalSalePeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalSaleYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSaleYear
        {
            get { return _totalSaleYear; }
            set 
            {
                if (_totalSaleYear != value)
                {
                    _totalSaleYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalDiscountPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDiscountPeriod
        {
            get { return _totalDiscountPeriod; }
            set 
            {
                if (_totalDiscountPeriod != value)
                {
                    _totalDiscountPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalDiscountYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDiscountYear
        {
            get { return _totalDiscountYear; }
            set 
            {
                if (_totalDiscountYear != value)
                {
                    _totalDiscountYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerBalanceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBalanceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalId;
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerDirectDebitDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _id;
        private string _mandateId;
        private string _mandateDescription;
        private System.DateTimeOffset? _dateOfSignature;
        private bool? _isDefault;
        private bool? _oneTime;
        private string _bic;
        private string _iban;
        private System.DateTimeOffset? _lastCollectionDate;
        private double? _maxAmount;
        private System.DateTimeOffset? _expirationDate;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mandateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MandateId
        {
            get { return _mandateId; }
            set 
            {
                if (_mandateId != value)
                {
                    _mandateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mandateDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MandateDescription
        {
            get { return _mandateDescription; }
            set 
            {
                if (_mandateDescription != value)
                {
                    _mandateDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateOfSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfSignature
        {
            get { return _dateOfSignature; }
            set 
            {
                if (_dateOfSignature != value)
                {
                    _dateOfSignature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault
        {
            get { return _isDefault; }
            set 
            {
                if (_isDefault != value)
                {
                    _isDefault = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oneTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OneTime
        {
            get { return _oneTime; }
            set 
            {
                if (_oneTime != value)
                {
                    _oneTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bic
        {
            get { return _bic; }
            set 
            {
                if (_bic != value)
                {
                    _bic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban
        {
            get { return _iban; }
            set 
            {
                if (_iban != value)
                {
                    _iban = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastCollectionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastCollectionDate
        {
            get { return _lastCollectionDate; }
            set 
            {
                if (_lastCollectionDate != value)
                {
                    _lastCollectionDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxAmount
        {
            get { return _maxAmount; }
            set 
            {
                if (_maxAmount != value)
                {
                    _maxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerDirectDebitDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDirectDebitDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _orderType;
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a SOOrder in SOOrderController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _project;
        private bool? _printDescriptionOnInvoice;
        private bool? _printNoteOnExternalDocuments;
        private bool? _printNoteOnInternalDocuments;
        private SalesOrderContactDto _soBillingContact;
        private SalesOrderAddressDto _soBillingAddress;
        private VatZoneDto _customerVATZone;
        private bool? _invoiceSeparately;
        private string _invoiceNbr;
        private System.DateTimeOffset? _invoiceDate;
        private CreditTermsDto _terms;
        private System.DateTimeOffset? _dueDate;
        private System.DateTimeOffset? _cashDiscountDate;
        private string _postPeriod;
        private SalesPersonDto _salesPerson;
        private UserDescriptionDto _owner;
        private string _origOrderType;
        private string _origOrderNbr;
        private SalesOrderContactDto _soShippingContact;
        private SalesOrderAddressDto _soShippingAddress;
        private System.DateTimeOffset? _schedShipment;
        private bool? _shipSeparately;
        private SalesOrderDtoShipComplete? _shipComplete;
        private System.DateTimeOffset? _cancelBy;
        private bool? _canceled;
        private WarehouseIdDescriptionDto _preferredWarehouse;
        private CarrierDescriptionDto _shipVia;
        private FOBPointDescriptionDto _fobPoint;
        private int? _priority;
        private ShippingTermsDescriptionDto _shippingTerms;
        private ShippingZoneDescriptionDto _shippingZone;
        private bool? _residentialDelivery;
        private bool? _saturdayDelivery;
        private bool? _insurance;
        private SigmaIntrastatTransactionDescriptionDto _transactionType;
        private System.Collections.ObjectModel.ObservableCollection<SalesOrderLineDto> _lines;
        private string _orderType;
        private string _orderNo;
        private SalesOrderDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _requestOn;
        private string _customerOrder;
        private string _customerRefNo;
        private CustomerDescriptionDto _customer;
        private LocationDto _location;
        private string _currency;
        private string _description;
        private double? _orderTotal;
        private double? _vatTaxableTotal;
        private double? _vatExemptTotal;
        private double? _taxTotal;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printDescriptionOnInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintDescriptionOnInvoice
        {
            get { return _printDescriptionOnInvoice; }
            set 
            {
                if (_printDescriptionOnInvoice != value)
                {
                    _printDescriptionOnInvoice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printNoteOnExternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintNoteOnExternalDocuments
        {
            get { return _printNoteOnExternalDocuments; }
            set 
            {
                if (_printNoteOnExternalDocuments != value)
                {
                    _printNoteOnExternalDocuments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printNoteOnInternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintNoteOnInternalDocuments
        {
            get { return _printNoteOnInternalDocuments; }
            set 
            {
                if (_printNoteOnInternalDocuments != value)
                {
                    _printNoteOnInternalDocuments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soBillingContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderContactDto SoBillingContact
        {
            get { return _soBillingContact; }
            set 
            {
                if (_soBillingContact != value)
                {
                    _soBillingContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soBillingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderAddressDto SoBillingAddress
        {
            get { return _soBillingAddress; }
            set 
            {
                if (_soBillingAddress != value)
                {
                    _soBillingAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerVATZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatZoneDto CustomerVATZone
        {
            get { return _customerVATZone; }
            set 
            {
                if (_customerVATZone != value)
                {
                    _customerVATZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InvoiceSeparately
        {
            get { return _invoiceSeparately; }
            set 
            {
                if (_invoiceSeparately != value)
                {
                    _invoiceSeparately = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNbr
        {
            get { return _invoiceNbr; }
            set 
            {
                if (_invoiceNbr != value)
                {
                    _invoiceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvoiceDate
        {
            get { return _invoiceDate; }
            set 
            {
                if (_invoiceDate != value)
                {
                    _invoiceDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto Terms
        {
            get { return _terms; }
            set 
            {
                if (_terms != value)
                {
                    _terms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate
        {
            get { return _cashDiscountDate; }
            set 
            {
                if (_cashDiscountDate != value)
                {
                    _cashDiscountDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesPersonDto SalesPerson
        {
            get { return _salesPerson; }
            set 
            {
                if (_salesPerson != value)
                {
                    _salesPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDescriptionDto Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("origOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrigOrderType
        {
            get { return _origOrderType; }
            set 
            {
                if (_origOrderType != value)
                {
                    _origOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("origOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrigOrderNbr
        {
            get { return _origOrderNbr; }
            set 
            {
                if (_origOrderNbr != value)
                {
                    _origOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soShippingContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderContactDto SoShippingContact
        {
            get { return _soShippingContact; }
            set 
            {
                if (_soShippingContact != value)
                {
                    _soShippingContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soShippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderAddressDto SoShippingAddress
        {
            get { return _soShippingAddress; }
            set 
            {
                if (_soShippingAddress != value)
                {
                    _soShippingAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("schedShipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SchedShipment
        {
            get { return _schedShipment; }
            set 
            {
                if (_schedShipment != value)
                {
                    _schedShipment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShipSeparately
        {
            get { return _shipSeparately; }
            set 
            {
                if (_shipSeparately != value)
                {
                    _shipSeparately = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderDtoShipComplete? ShipComplete
        {
            get { return _shipComplete; }
            set 
            {
                if (_shipComplete != value)
                {
                    _shipComplete = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancelBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CancelBy
        {
            get { return _cancelBy; }
            set 
            {
                if (_cancelBy != value)
                {
                    _cancelBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Canceled
        {
            get { return _canceled; }
            set 
            {
                if (_canceled != value)
                {
                    _canceled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("preferredWarehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto PreferredWarehouse
        {
            get { return _preferredWarehouse; }
            set 
            {
                if (_preferredWarehouse != value)
                {
                    _preferredWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarrierDescriptionDto ShipVia
        {
            get { return _shipVia; }
            set 
            {
                if (_shipVia != value)
                {
                    _shipVia = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fobPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FOBPointDescriptionDto FobPoint
        {
            get { return _fobPoint; }
            set 
            {
                if (_fobPoint != value)
                {
                    _fobPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority
        {
            get { return _priority; }
            set 
            {
                if (_priority != value)
                {
                    _priority = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingTermsDescriptionDto ShippingTerms
        {
            get { return _shippingTerms; }
            set 
            {
                if (_shippingTerms != value)
                {
                    _shippingTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingZoneDescriptionDto ShippingZone
        {
            get { return _shippingZone; }
            set 
            {
                if (_shippingZone != value)
                {
                    _shippingZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ResidentialDelivery
        {
            get { return _residentialDelivery; }
            set 
            {
                if (_residentialDelivery != value)
                {
                    _residentialDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaturdayDelivery
        {
            get { return _saturdayDelivery; }
            set 
            {
                if (_saturdayDelivery != value)
                {
                    _saturdayDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Insurance
        {
            get { return _insurance; }
            set 
            {
                if (_insurance != value)
                {
                    _insurance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SigmaIntrastatTransactionDescriptionDto TransactionType
        {
            get { return _transactionType; }
            set 
            {
                if (_transactionType != value)
                {
                    _transactionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SalesOrderLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNo
        {
            get { return _orderNo; }
            set 
            {
                if (_orderNo != value)
                {
                    _orderNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestOn
        {
            get { return _requestOn; }
            set 
            {
                if (_requestOn != value)
                {
                    _requestOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerOrder
        {
            get { return _customerOrder; }
            set 
            {
                if (_customerOrder != value)
                {
                    _customerOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRefNo
        {
            get { return _customerRefNo; }
            set 
            {
                if (_customerRefNo != value)
                {
                    _customerRefNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDescriptionDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderTotal
        {
            get { return _orderTotal; }
            set 
            {
                if (_orderTotal != value)
                {
                    _orderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxTotal
        {
            get { return _taxTotal; }
            set 
            {
                if (_taxTotal != value)
                {
                    _taxTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderContactDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _overrideContact;
        private int? _contactId;
        private string _name;
        private string _attention;
        private string _email;
        private string _web;
        private string _phone1;
        private string _phone2;
        private string _fax;
    
        [Newtonsoft.Json.JsonProperty("overrideContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideContact
        {
            get { return _overrideContact; }
            set 
            {
                if (_overrideContact != value)
                {
                    _overrideContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId
        {
            get { return _contactId; }
            set 
            {
                if (_contactId != value)
                {
                    _contactId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderContactDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderContactDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderAddressDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _overrideAddress;
        private int? _addressId;
        private string _addressLine1;
        private string _addressLine2;
        private string _addressLine3;
        private string _postalCode;
        private string _city;
        private CountryDto _country;
        private CountyDto _county;
    
        [Newtonsoft.Json.JsonProperty("overrideAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideAddress
        {
            get { return _overrideAddress; }
            set 
            {
                if (_overrideAddress != value)
                {
                    _overrideAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AddressId
        {
            get { return _addressId; }
            set 
            {
                if (_addressId != value)
                {
                    _addressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryDto Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountyDto County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderAddressDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderAddressDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesPersonDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesPersonDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesPersonDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class UserDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WarehouseIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WarehouseIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarehouseIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CarrierDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CarrierDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class FOBPointDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FOBPointDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FOBPointDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShippingTermsDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShippingTermsDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShippingTermsDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShippingZoneDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShippingZoneDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShippingZoneDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SigmaIntrastatTransactionDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SigmaIntrastatTransactionDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SigmaIntrastatTransactionDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _invoiceNbr;
        private SalesOrderLineDtoOperation? _operation;
        private bool? _freeItem;
        private System.DateTimeOffset? _requestedOn;
        private System.DateTimeOffset? _shipOn;
        private SalesOrderLineDtoShipComplete? _shipComplete;
        private double? _undershipThreshold;
        private double? _overshipThreshold;
        private bool? _completed;
        private bool? _markForPO;
        private SalesOrderLineDtoPoSource? _poSource;
        private string _lotSerialNbr;
        private System.DateTimeOffset? _expirationDate;
        private string _reasonCode;
        private SalesPersonDto _salesPerson;
        private string _taxCategory;
        private bool? _commissionable;
        private string _alternateID;
        private int? _projectTask;
        private int? _lineNbr;
        private int? _sortOrder;
        private InventoryNumberDescriptionDto _inventory;
        private WarehouseIdDescriptionDto _warehouse;
        private string _uom;
        private double? _quantity;
        private double? _qtyOnShipments;
        private double? _openQty;
        private double? _unitCost;
        private double? _unitPrice;
        private string _discountCode;
        private double? _discountPercent;
        private double? _discountAmount;
        private bool? _manualDiscount;
        private double? _discUnitPrice;
        private double? _extPrice;
        private double? _unbilledAmount;
        private string _lineDescription;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        [Newtonsoft.Json.JsonProperty("invoiceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNbr
        {
            get { return _invoiceNbr; }
            set 
            {
                if (_invoiceNbr != value)
                {
                    _invoiceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderLineDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freeItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeItem
        {
            get { return _freeItem; }
            set 
            {
                if (_freeItem != value)
                {
                    _freeItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requestedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestedOn
        {
            get { return _requestedOn; }
            set 
            {
                if (_requestedOn != value)
                {
                    _requestedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipOn
        {
            get { return _shipOn; }
            set 
            {
                if (_shipOn != value)
                {
                    _shipOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderLineDtoShipComplete? ShipComplete
        {
            get { return _shipComplete; }
            set 
            {
                if (_shipComplete != value)
                {
                    _shipComplete = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("undershipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UndershipThreshold
        {
            get { return _undershipThreshold; }
            set 
            {
                if (_undershipThreshold != value)
                {
                    _undershipThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overshipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OvershipThreshold
        {
            get { return _overshipThreshold; }
            set 
            {
                if (_overshipThreshold != value)
                {
                    _overshipThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completed
        {
            get { return _completed; }
            set 
            {
                if (_completed != value)
                {
                    _completed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("markForPO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkForPO
        {
            get { return _markForPO; }
            set 
            {
                if (_markForPO != value)
                {
                    _markForPO = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderLineDtoPoSource? PoSource
        {
            get { return _poSource; }
            set 
            {
                if (_poSource != value)
                {
                    _poSource = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotSerialNbr
        {
            get { return _lotSerialNbr; }
            set 
            {
                if (_lotSerialNbr != value)
                {
                    _lotSerialNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesPersonDto SalesPerson
        {
            get { return _salesPerson; }
            set 
            {
                if (_salesPerson != value)
                {
                    _salesPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commissionable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Commissionable
        {
            get { return _commissionable; }
            set 
            {
                if (_commissionable != value)
                {
                    _commissionable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("alternateID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateID
        {
            get { return _alternateID; }
            set 
            {
                if (_alternateID != value)
                {
                    _alternateID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder
        {
            get { return _sortOrder; }
            set 
            {
                if (_sortOrder != value)
                {
                    _sortOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("qtyOnShipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QtyOnShipments
        {
            get { return _qtyOnShipments; }
            set 
            {
                if (_qtyOnShipments != value)
                {
                    _qtyOnShipments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("openQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OpenQty
        {
            get { return _openQty; }
            set 
            {
                if (_openQty != value)
                {
                    _openQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscUnitPrice
        {
            get { return _discUnitPrice; }
            set 
            {
                if (_discUnitPrice != value)
                {
                    _discUnitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtPrice
        {
            get { return _extPrice; }
            set 
            {
                if (_extPrice != value)
                {
                    _extPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unbilledAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnbilledAmount
        {
            get { return _unbilledAmount; }
            set 
            {
                if (_unbilledAmount != value)
                {
                    _unbilledAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineDescription
        {
            get { return _lineDescription; }
            set 
            {
                if (_lineDescription != value)
                {
                    _lineDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a SOOrder in SOOrderController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderBasicDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SalesOrderDocumentLineDto> _lines;
        private string _orderType;
        private string _orderNo;
        private SalesOrderBasicDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _requestOn;
        private string _customerOrder;
        private string _customerRefNo;
        private CustomerDescriptionDto _customer;
        private LocationDto _location;
        private string _currency;
        private string _description;
        private double? _orderTotal;
        private double? _vatTaxableTotal;
        private double? _vatExemptTotal;
        private double? _taxTotal;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SalesOrderDocumentLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNo
        {
            get { return _orderNo; }
            set 
            {
                if (_orderNo != value)
                {
                    _orderNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderBasicDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestOn
        {
            get { return _requestOn; }
            set 
            {
                if (_requestOn != value)
                {
                    _requestOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerOrder
        {
            get { return _customerOrder; }
            set 
            {
                if (_customerOrder != value)
                {
                    _customerOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRefNo
        {
            get { return _customerRefNo; }
            set 
            {
                if (_customerRefNo != value)
                {
                    _customerRefNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDescriptionDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderTotal
        {
            get { return _orderTotal; }
            set 
            {
                if (_orderTotal != value)
                {
                    _orderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxTotal
        {
            get { return _taxTotal; }
            set 
            {
                if (_taxTotal != value)
                {
                    _taxTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderBasicDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderBasicDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a SOOrder in SOOrderController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderDocumentLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNbr;
        private int? _sortOrder;
        private InventoryNumberDescriptionDto _inventory;
        private WarehouseIdDescriptionDto _warehouse;
        private string _uom;
        private double? _quantity;
        private double? _qtyOnShipments;
        private double? _openQty;
        private double? _unitCost;
        private double? _unitPrice;
        private string _discountCode;
        private double? _discountPercent;
        private double? _discountAmount;
        private bool? _manualDiscount;
        private double? _discUnitPrice;
        private double? _extPrice;
        private double? _unbilledAmount;
        private string _lineDescription;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder
        {
            get { return _sortOrder; }
            set 
            {
                if (_sortOrder != value)
                {
                    _sortOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("qtyOnShipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QtyOnShipments
        {
            get { return _qtyOnShipments; }
            set 
            {
                if (_qtyOnShipments != value)
                {
                    _qtyOnShipments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("openQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OpenQty
        {
            get { return _openQty; }
            set 
            {
                if (_openQty != value)
                {
                    _openQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscUnitPrice
        {
            get { return _discUnitPrice; }
            set 
            {
                if (_discUnitPrice != value)
                {
                    _discUnitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtPrice
        {
            get { return _extPrice; }
            set 
            {
                if (_extPrice != value)
                {
                    _extPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unbilledAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnbilledAmount
        {
            get { return _unbilledAmount; }
            set 
            {
                if (_unbilledAmount != value)
                {
                    _unbilledAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineDescription
        {
            get { return _lineDescription; }
            set 
            {
                if (_lineDescription != value)
                {
                    _lineDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderDocumentLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderDocumentLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerBalanceQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerBalanceQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBalanceQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class NoteDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _note;
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NoteDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoteDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a customer in CustomerController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalId;
        private string _number;
        private string _name;
        private CustomerDtoStatus? _status;
        private AddressDto _mainAddress;
        private ContactInfoDto _mainContact;
        private string _accountReference;
        private ParentRecordDto _parentRecord;
        private ClassDescriptionDto _customerClass;
        private CreditTermsDto _creditTerms;
        private string _currencyId;
        private CustomerDtoCreditVerification? _creditVerification;
        private double? _creditLimit;
        private int? _creditDaysPastDue;
        private AddressDto _invoiceAddress;
        private ContactInfoDto _invoiceContact;
        private bool? _printInvoices;
        private bool? _acceptAutoInvoices;
        private bool? _sendInvoicesByEmail;
        private bool? _printStatements;
        private bool? _sendStatementsByEmail;
        private bool? _printMultiCurrencyStatements;
        private CustomerDtoStatementType? _statementType;
        private AddressDto _deliveryAddress;
        private ContactInfoDto _deliveryContact;
        private string _vatRegistrationId;
        private string _corporateId;
        private VatZoneDto _vatZone;
        private LocationDto _location;
        private System.Collections.ObjectModel.ObservableCollection<AttributeIdValueDto> _attributes;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.DateTimeOffset? _createdDateTime;
        private System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitDto> _directDebitLines;
        private PriceClassDto _priceClass;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto MainAddress
        {
            get { return _mainAddress; }
            set 
            {
                if (_mainAddress != value)
                {
                    _mainAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto MainContact
        {
            get { return _mainContact; }
            set 
            {
                if (_mainContact != value)
                {
                    _mainContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountReference
        {
            get { return _accountReference; }
            set 
            {
                if (_accountReference != value)
                {
                    _accountReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParentRecordDto ParentRecord
        {
            get { return _parentRecord; }
            set 
            {
                if (_parentRecord != value)
                {
                    _parentRecord = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassDescriptionDto CustomerClass
        {
            get { return _customerClass; }
            set 
            {
                if (_customerClass != value)
                {
                    _customerClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto CreditTerms
        {
            get { return _creditTerms; }
            set 
            {
                if (_creditTerms != value)
                {
                    _creditTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditVerification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerDtoCreditVerification? CreditVerification
        {
            get { return _creditVerification; }
            set 
            {
                if (_creditVerification != value)
                {
                    _creditVerification = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditLimit
        {
            get { return _creditLimit; }
            set 
            {
                if (_creditLimit != value)
                {
                    _creditLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditDaysPastDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CreditDaysPastDue
        {
            get { return _creditDaysPastDue; }
            set 
            {
                if (_creditDaysPastDue != value)
                {
                    _creditDaysPastDue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto InvoiceAddress
        {
            get { return _invoiceAddress; }
            set 
            {
                if (_invoiceAddress != value)
                {
                    _invoiceAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto InvoiceContact
        {
            get { return _invoiceContact; }
            set 
            {
                if (_invoiceContact != value)
                {
                    _invoiceContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printInvoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintInvoices
        {
            get { return _printInvoices; }
            set 
            {
                if (_printInvoices != value)
                {
                    _printInvoices = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("acceptAutoInvoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptAutoInvoices
        {
            get { return _acceptAutoInvoices; }
            set 
            {
                if (_acceptAutoInvoices != value)
                {
                    _acceptAutoInvoices = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sendInvoicesByEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SendInvoicesByEmail
        {
            get { return _sendInvoicesByEmail; }
            set 
            {
                if (_sendInvoicesByEmail != value)
                {
                    _sendInvoicesByEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printStatements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintStatements
        {
            get { return _printStatements; }
            set 
            {
                if (_printStatements != value)
                {
                    _printStatements = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sendStatementsByEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SendStatementsByEmail
        {
            get { return _sendStatementsByEmail; }
            set 
            {
                if (_sendStatementsByEmail != value)
                {
                    _sendStatementsByEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printMultiCurrencyStatements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintMultiCurrencyStatements
        {
            get { return _printMultiCurrencyStatements; }
            set 
            {
                if (_printMultiCurrencyStatements != value)
                {
                    _printMultiCurrencyStatements = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerDtoStatementType? StatementType
        {
            get { return _statementType; }
            set 
            {
                if (_statementType != value)
                {
                    _statementType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto DeliveryAddress
        {
            get { return _deliveryAddress; }
            set 
            {
                if (_deliveryAddress != value)
                {
                    _deliveryAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto DeliveryContact
        {
            get { return _deliveryContact; }
            set 
            {
                if (_deliveryContact != value)
                {
                    _deliveryContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatRegistrationId
        {
            get { return _vatRegistrationId; }
            set 
            {
                if (_vatRegistrationId != value)
                {
                    _vatRegistrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId
        {
            get { return _corporateId; }
            set 
            {
                if (_corporateId != value)
                {
                    _corporateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatZoneDto VatZone
        {
            get { return _vatZone; }
            set 
            {
                if (_vatZone != value)
                {
                    _vatZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttributeIdValueDto> Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("directDebitLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitDto> DirectDebitLines
        {
            get { return _directDebitLines; }
            set 
            {
                if (_directDebitLines != value)
                {
                    _directDebitLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PriceClassDto PriceClass
        {
            get { return _priceClass; }
            set 
            {
                if (_priceClass != value)
                {
                    _priceClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ParentRecordDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParentRecordDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentRecordDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ClassDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ClassDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClassDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AttributeIdValueDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _value;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AttributeIdValueDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttributeIdValueDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PriceClassDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PriceClassDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceClassDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _number;
        private DtoValueOfString _name;
        private DtoValueOfCustomerStatus _status;
        private DtoValueOfString _accountReference;
        private DtoValueOfString _parentRecordNumber;
        private DtoValueOfString _currencyId;
        private DtoValueOfDecimal _creditLimit;
        private DtoValueOfNullableOfInt16 _creditDaysPastDue;
        private bool? _overrideWithClassValues;
        private DtoValueOfString _customerClassId;
        private DtoValueOfString _creditTermsId;
        private DtoValueOfBoolean _printInvoices;
        private DtoValueOfBoolean _acceptAutoInvoices;
        private DtoValueOfBoolean _sendInvoicesByEmail;
        private DtoValueOfBoolean _printStatements;
        private DtoValueOfBoolean _sendStatementsByEmail;
        private DtoValueOfBoolean _printMultiCurrencyStatements;
        private DtoValueOfString _vatRegistrationId;
        private DtoValueOfString _corporateId;
        private DtoValueOfString _vatZoneId;
        private DtoValueOfString _note;
        private DtoValueOfAddressUpdateDto _mainAddress;
        private DtoValueOfContactInfoUpdateDto _mainContact;
        private DtoValueOfCreditRule _creditVerification;
        private DtoValueOfAddressUpdateDto _invoiceAddress;
        private DtoValueOfContactInfoUpdateDto _invoiceContact;
        private DtoValueOfStatementTypes _statementType;
        private DtoValueOfAddressUpdateDto _deliveryAddress;
        private DtoValueOfContactInfoUpdateDto _deliveryContact;
        private DtoValueOfString _priceClassId;
        private System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitUpdateDto> _directDebitLines;
        private System.Collections.ObjectModel.ObservableCollection<AttributeLineUpdateDto> _attributeLines;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfCustomerStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountReference
        {
            get { return _accountReference; }
            set 
            {
                if (_accountReference != value)
                {
                    _accountReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentRecordNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ParentRecordNumber
        {
            get { return _parentRecordNumber; }
            set 
            {
                if (_parentRecordNumber != value)
                {
                    _parentRecordNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal CreditLimit
        {
            get { return _creditLimit; }
            set 
            {
                if (_creditLimit != value)
                {
                    _creditLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditDaysPastDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt16 CreditDaysPastDue
        {
            get { return _creditDaysPastDue; }
            set 
            {
                if (_creditDaysPastDue != value)
                {
                    _creditDaysPastDue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overrideWithClassValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideWithClassValues
        {
            get { return _overrideWithClassValues; }
            set 
            {
                if (_overrideWithClassValues != value)
                {
                    _overrideWithClassValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerClassId
        {
            get { return _customerClassId; }
            set 
            {
                if (_customerClassId != value)
                {
                    _customerClassId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTermsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CreditTermsId
        {
            get { return _creditTermsId; }
            set 
            {
                if (_creditTermsId != value)
                {
                    _creditTermsId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printInvoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean PrintInvoices
        {
            get { return _printInvoices; }
            set 
            {
                if (_printInvoices != value)
                {
                    _printInvoices = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("acceptAutoInvoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean AcceptAutoInvoices
        {
            get { return _acceptAutoInvoices; }
            set 
            {
                if (_acceptAutoInvoices != value)
                {
                    _acceptAutoInvoices = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sendInvoicesByEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean SendInvoicesByEmail
        {
            get { return _sendInvoicesByEmail; }
            set 
            {
                if (_sendInvoicesByEmail != value)
                {
                    _sendInvoicesByEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printStatements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean PrintStatements
        {
            get { return _printStatements; }
            set 
            {
                if (_printStatements != value)
                {
                    _printStatements = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sendStatementsByEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean SendStatementsByEmail
        {
            get { return _sendStatementsByEmail; }
            set 
            {
                if (_sendStatementsByEmail != value)
                {
                    _sendStatementsByEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printMultiCurrencyStatements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean PrintMultiCurrencyStatements
        {
            get { return _printMultiCurrencyStatements; }
            set 
            {
                if (_printMultiCurrencyStatements != value)
                {
                    _printMultiCurrencyStatements = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatRegistrationId
        {
            get { return _vatRegistrationId; }
            set 
            {
                if (_vatRegistrationId != value)
                {
                    _vatRegistrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CorporateId
        {
            get { return _corporateId; }
            set 
            {
                if (_corporateId != value)
                {
                    _corporateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatZoneId
        {
            get { return _vatZoneId; }
            set 
            {
                if (_vatZoneId != value)
                {
                    _vatZoneId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAddressUpdateDto MainAddress
        {
            get { return _mainAddress; }
            set 
            {
                if (_mainAddress != value)
                {
                    _mainAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfContactInfoUpdateDto MainContact
        {
            get { return _mainContact; }
            set 
            {
                if (_mainContact != value)
                {
                    _mainContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditVerification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfCreditRule CreditVerification
        {
            get { return _creditVerification; }
            set 
            {
                if (_creditVerification != value)
                {
                    _creditVerification = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAddressUpdateDto InvoiceAddress
        {
            get { return _invoiceAddress; }
            set 
            {
                if (_invoiceAddress != value)
                {
                    _invoiceAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfContactInfoUpdateDto InvoiceContact
        {
            get { return _invoiceContact; }
            set 
            {
                if (_invoiceContact != value)
                {
                    _invoiceContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfStatementTypes StatementType
        {
            get { return _statementType; }
            set 
            {
                if (_statementType != value)
                {
                    _statementType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAddressUpdateDto DeliveryAddress
        {
            get { return _deliveryAddress; }
            set 
            {
                if (_deliveryAddress != value)
                {
                    _deliveryAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfContactInfoUpdateDto DeliveryContact
        {
            get { return _deliveryContact; }
            set 
            {
                if (_deliveryContact != value)
                {
                    _deliveryContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PriceClassId
        {
            get { return _priceClassId; }
            set 
            {
                if (_priceClassId != value)
                {
                    _priceClassId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update direct debit information for a customer(only for Netherlands)</summary>
        [Newtonsoft.Json.JsonProperty("directDebitLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerDirectDebitUpdateDto> DirectDebitLines
        {
            get { return _directDebitLines; }
            set 
            {
                if (_directDebitLines != value)
                {
                    _directDebitLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributeLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttributeLineUpdateDto> AttributeLines
        {
            get { return _attributeLines; }
            set 
            {
                if (_attributeLines != value)
                {
                    _attributeLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfCustomerStatus : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfCustomerStatusValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfCustomerStatusValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfCustomerStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfCustomerStatus>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfInt16 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfInt16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfInt16>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfContactInfoUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private ContactInfoUpdateDto _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoUpdateDto Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfContactInfoUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfContactInfoUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfCreditRule : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfCreditRuleValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfCreditRuleValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfCreditRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfCreditRule>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfStatementTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfStatementTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfStatementTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfStatementTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfStatementTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerDirectDebitUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CustomerDirectDebitUpdateDtoOperation? _operation;
        private System.Guid? _id;
        private DtoValueOfString _mandateId;
        private DtoValueOfString _mandateDescription;
        private DtoValueOfNullableOfDateTime _dateOfSignature;
        private DtoValueOfNullableOfBoolean _isDefault;
        private DtoValueOfNullableOfBoolean _oneTime;
        private DtoValueOfString _bic;
        private DtoValueOfString _iban;
        private DtoValueOfNullableOfDateTime _lastCollectionDate;
        private DtoValueOfNullableOfDecimal _maxAmount;
        private DtoValueOfNullableOfDateTime _expirationDate;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerDirectDebitUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mandateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString MandateId
        {
            get { return _mandateId; }
            set 
            {
                if (_mandateId != value)
                {
                    _mandateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mandateDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString MandateDescription
        {
            get { return _mandateDescription; }
            set 
            {
                if (_mandateDescription != value)
                {
                    _mandateDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateOfSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime DateOfSignature
        {
            get { return _dateOfSignature; }
            set 
            {
                if (_dateOfSignature != value)
                {
                    _dateOfSignature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean IsDefault
        {
            get { return _isDefault; }
            set 
            {
                if (_isDefault != value)
                {
                    _isDefault = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oneTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean OneTime
        {
            get { return _oneTime; }
            set 
            {
                if (_oneTime != value)
                {
                    _oneTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Bic
        {
            get { return _bic; }
            set 
            {
                if (_bic != value)
                {
                    _bic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Iban
        {
            get { return _iban; }
            set 
            {
                if (_iban != value)
                {
                    _iban = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastCollectionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime LastCollectionDate
        {
            get { return _lastCollectionDate; }
            set 
            {
                if (_lastCollectionDate != value)
                {
                    _lastCollectionDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal MaxAmount
        {
            get { return _maxAmount; }
            set 
            {
                if (_maxAmount != value)
                {
                    _maxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerDirectDebitUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDirectDebitUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AttributeLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _attributeId;
        private DtoValueOfString _attributeValue;
    
        [Newtonsoft.Json.JsonProperty("attributeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AttributeId
        {
            get { return _attributeId; }
            set 
            {
                if (_attributeId != value)
                {
                    _attributeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributeValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AttributeValue
        {
            get { return _attributeValue; }
            set 
            {
                if (_attributeValue != value)
                {
                    _attributeValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AttributeLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttributeLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContactInfoUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _name;
        private DtoValueOfString _attention;
        private DtoValueOfString _email;
        private DtoValueOfString _web;
        private DtoValueOfString _phone1;
        private DtoValueOfString _phone2;
        private DtoValueOfString _fax;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContactInfoUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContactInfoUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _name;
        private CustomerQueryParametersStatus? _status;
        private string _corporateId;
        private string _vatRegistrationId;
        private string _email;
        private string _phone;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private string _createdDateTime;
        private string _createdDateTimeCondition;
        private string _attributes;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId
        {
            get { return _corporateId; }
            set 
            {
                if (_corporateId != value)
                {
                    _corporateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatRegistrationId
        {
            get { return _vatRegistrationId; }
            set 
            {
                if (_vatRegistrationId != value)
                {
                    _vatRegistrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone
        {
            get { return _phone; }
            set 
            {
                if (_phone != value)
                {
                    _phone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedDateTimeCondition
        {
            get { return _createdDateTimeCondition; }
            set 
            {
                if (_createdDateTimeCondition != value)
                {
                    _createdDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a invoice in InvoiceController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerInvoiceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CreditTermsDto _creditTerms;
        private System.DateTimeOffset? _documentDueDate;
        private System.DateTimeOffset? _cashDiscountDate;
        private string _externalReference;
        private bool? _isRotRutDeductible;
        private double? _exchangeRate;
        private System.DateTimeOffset? _dunningLetterDate;
        private int? _dunningLetterLevel;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceLineDto> _invoiceLines;
        private bool? _hold;
        private double? _detailTotal;
        private double? _detailTotalInCurrency;
        private double? _vatTaxableTotal;
        private double? _vatTaxableTotalInCurrency;
        private double? _vatExemptTotal;
        private double? _vatExemptTotalInCurrency;
        private int? _salesPersonID;
        private string _salesPersonDescr;
        private string _paymentReference;
        private CustomerNumberDto _customer;
        private CustomerInvoiceDtoDocumentType? _documentType;
        private string _referenceNumber;
        private string _postPeriod;
        private string _financialPeriod;
        private string _closedFinancialPeriod;
        private System.DateTimeOffset? _documentDate;
        private CustomerInvoiceDtoStatus? _status;
        private string _currencyId;
        private double? _amount;
        private double? _amountInCurrency;
        private double? _balance;
        private double? _balanceInCurrency;
        private double? _cashDiscount;
        private double? _cashDiscountInCurrency;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _customerRefNumber;
        private string _invoiceText;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.DateTimeOffset? _createdDateTime;
        private string _note;
        private double? _vatTotal;
        private double? _vatTotalInCurrency;
        private LocationDto _location;
        private BranchNumberDto _branchNumber;
        private string _cashAccount;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("creditTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto CreditTerms
        {
            get { return _creditTerms; }
            set 
            {
                if (_creditTerms != value)
                {
                    _creditTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DocumentDueDate
        {
            get { return _documentDueDate; }
            set 
            {
                if (_documentDueDate != value)
                {
                    _documentDueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate
        {
            get { return _cashDiscountDate; }
            set 
            {
                if (_cashDiscountDate != value)
                {
                    _cashDiscountDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRotRutDeductible
        {
            get { return _isRotRutDeductible; }
            set 
            {
                if (_isRotRutDeductible != value)
                {
                    _isRotRutDeductible = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dunningLetterDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DunningLetterDate
        {
            get { return _dunningLetterDate; }
            set 
            {
                if (_dunningLetterDate != value)
                {
                    _dunningLetterDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dunningLetterLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DunningLetterLevel
        {
            get { return _dunningLetterLevel; }
            set 
            {
                if (_dunningLetterLevel != value)
                {
                    _dunningLetterLevel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceLineDto> InvoiceLines
        {
            get { return _invoiceLines; }
            set 
            {
                if (_invoiceLines != value)
                {
                    _invoiceLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotal
        {
            get { return _detailTotal; }
            set 
            {
                if (_detailTotal != value)
                {
                    _detailTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotalInCurrency
        {
            get { return _detailTotalInCurrency; }
            set 
            {
                if (_detailTotalInCurrency != value)
                {
                    _detailTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotalInCurrency
        {
            get { return _vatTaxableTotalInCurrency; }
            set 
            {
                if (_vatTaxableTotalInCurrency != value)
                {
                    _vatTaxableTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotalInCurrency
        {
            get { return _vatExemptTotalInCurrency; }
            set 
            {
                if (_vatExemptTotalInCurrency != value)
                {
                    _vatExemptTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SalesPersonID
        {
            get { return _salesPersonID; }
            set 
            {
                if (_salesPersonID != value)
                {
                    _salesPersonID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonDescr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesPersonDescr
        {
            get { return _salesPersonDescr; }
            set 
            {
                if (_salesPersonDescr != value)
                {
                    _salesPersonDescr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReference
        {
            get { return _paymentReference; }
            set 
            {
                if (_paymentReference != value)
                {
                    _paymentReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceDtoDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("closedFinancialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosedFinancialPeriod
        {
            get { return _closedFinancialPeriod; }
            set 
            {
                if (_closedFinancialPeriod != value)
                {
                    _closedFinancialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DocumentDate
        {
            get { return _documentDate; }
            set 
            {
                if (_documentDate != value)
                {
                    _documentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BalanceInCurrency
        {
            get { return _balanceInCurrency; }
            set 
            {
                if (_balanceInCurrency != value)
                {
                    _balanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountInCurrency
        {
            get { return _cashDiscountInCurrency; }
            set 
            {
                if (_cashDiscountInCurrency != value)
                {
                    _cashDiscountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRefNumber
        {
            get { return _customerRefNumber; }
            set 
            {
                if (_customerRefNumber != value)
                {
                    _customerRefNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotalInCurrency
        {
            get { return _vatTotalInCurrency; }
            set 
            {
                if (_vatTotalInCurrency != value)
                {
                    _vatTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerInvoiceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInvoiceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerInvoiceLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _termStartDate;
        private System.DateTimeOffset? _termEndDate;
        private bool? _isRotRutDeductible;
        private CustomerInvoiceLineDtoItemType? _itemType;
        private WorkTypeDto _typeOfWork;
        private double? _deductableAmount;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private int? _lineNumber;
        private string _inventoryNumber;
        private string _description;
        private double? _quantity;
        private double? _unitPrice;
        private double? _unitPriceInCurrency;
        private double? _manualAmount;
        private double? _manualAmountInCurrency;
        private double? _amount;
        private double? _amountInCurrency;
        private AccountNumberDto _account;
        private VatCodeDto _vatCode;
        private string _uom;
        private double? _discountPercent;
        private double? _discountAmount;
        private double? _discountAmountInCurrency;
        private bool? _manualDiscount;
        private SubAccountDto _subaccount;
        private string _salesperson;
        private int? _deferralSchedule;
        private string _deferralCode;
        private string _discountCode;
        private string _note;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("termStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TermStartDate
        {
            get { return _termStartDate; }
            set 
            {
                if (_termStartDate != value)
                {
                    _termStartDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TermEndDate
        {
            get { return _termEndDate; }
            set 
            {
                if (_termEndDate != value)
                {
                    _termEndDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRotRutDeductible
        {
            get { return _isRotRutDeductible; }
            set 
            {
                if (_isRotRutDeductible != value)
                {
                    _isRotRutDeductible = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceLineDtoItemType? ItemType
        {
            get { return _itemType; }
            set 
            {
                if (_itemType != value)
                {
                    _itemType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("typeOfWork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkTypeDto TypeOfWork
        {
            get { return _typeOfWork; }
            set 
            {
                if (_typeOfWork != value)
                {
                    _typeOfWork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deductableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductableAmount
        {
            get { return _deductableAmount; }
            set 
            {
                if (_deductableAmount != value)
                {
                    _deductableAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPriceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPriceInCurrency
        {
            get { return _unitPriceInCurrency; }
            set 
            {
                if (_unitPriceInCurrency != value)
                {
                    _unitPriceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManualAmount
        {
            get { return _manualAmount; }
            set 
            {
                if (_manualAmount != value)
                {
                    _manualAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManualAmountInCurrency
        {
            get { return _manualAmountInCurrency; }
            set 
            {
                if (_manualAmountInCurrency != value)
                {
                    _manualAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatCodeDto VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmountInCurrency
        {
            get { return _discountAmountInCurrency; }
            set 
            {
                if (_discountAmountInCurrency != value)
                {
                    _discountAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesperson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Salesperson
        {
            get { return _salesperson; }
            set 
            {
                if (_salesperson != value)
                {
                    _salesperson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerInvoiceLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInvoiceLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WorkTypeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private WorkTypeDtoRutRotType? _rutRotType;
        private string _description;
        private string _xmlTag;
    
        [Newtonsoft.Json.JsonProperty("rutRotType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkTypeDtoRutRotType? RutRotType
        {
            get { return _rutRotType; }
            set 
            {
                if (_rutRotType != value)
                {
                    _rutRotType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("xmlTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XmlTag
        {
            get { return _xmlTag; }
            set 
            {
                if (_xmlTag != value)
                {
                    _xmlTag = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WorkTypeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkTypeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerDocumentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private AccountNumberDto _account;
        private SubAccountDto _subaccount;
        private System.DateTimeOffset? _documentDueDate;
        private BranchNumberDto _branch;
        private CustomerNumberDto _customer;
        private CustomerDocumentDtoDocumentType? _documentType;
        private string _referenceNumber;
        private string _postPeriod;
        private string _financialPeriod;
        private string _closedFinancialPeriod;
        private System.DateTimeOffset? _documentDate;
        private CustomerDocumentDtoStatus? _status;
        private string _currencyId;
        private double? _amount;
        private double? _amountInCurrency;
        private double? _balance;
        private double? _balanceInCurrency;
        private double? _cashDiscount;
        private double? _cashDiscountInCurrency;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _customerRefNumber;
        private string _invoiceText;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.DateTimeOffset? _createdDateTime;
        private string _note;
        private double? _vatTotal;
        private double? _vatTotalInCurrency;
        private LocationDto _location;
        private BranchNumberDto _branchNumber;
        private string _cashAccount;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DocumentDueDate
        {
            get { return _documentDueDate; }
            set 
            {
                if (_documentDueDate != value)
                {
                    _documentDueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Branch is deprecated, please use BranchNumber instead.</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerDocumentDtoDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("closedFinancialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosedFinancialPeriod
        {
            get { return _closedFinancialPeriod; }
            set 
            {
                if (_closedFinancialPeriod != value)
                {
                    _closedFinancialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DocumentDate
        {
            get { return _documentDate; }
            set 
            {
                if (_documentDate != value)
                {
                    _documentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerDocumentDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BalanceInCurrency
        {
            get { return _balanceInCurrency; }
            set 
            {
                if (_balanceInCurrency != value)
                {
                    _balanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountInCurrency
        {
            get { return _cashDiscountInCurrency; }
            set 
            {
                if (_cashDiscountInCurrency != value)
                {
                    _cashDiscountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRefNumber
        {
            get { return _customerRefNumber; }
            set 
            {
                if (_customerRefNumber != value)
                {
                    _customerRefNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotalInCurrency
        {
            get { return _vatTotalInCurrency; }
            set 
            {
                if (_vatTotalInCurrency != value)
                {
                    _vatTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerDocumentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDocumentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreateDunningLetterActionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _dunningLetterDate;
        private int? _levelFrom;
        private int? _levelTo;
    
        [Newtonsoft.Json.JsonProperty("dunningLetterDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DunningLetterDate
        {
            get { return _dunningLetterDate; }
            set 
            {
                if (_dunningLetterDate != value)
                {
                    _dunningLetterDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("levelFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LevelFrom
        {
            get { return _levelFrom; }
            set 
            {
                if (_levelFrom != value)
                {
                    _levelFrom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("levelTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LevelTo
        {
            get { return _levelTo; }
            set 
            {
                if (_levelTo != value)
                {
                    _levelTo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateDunningLetterActionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateDunningLetterActionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreateDunningLetterActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private CreateDunningLetterActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateDunningLetterActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateDunningLetterActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateDunningLetterActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a CustomerContract in CustomerContractController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _contractId;
        private ContractTemplateIdDescriptionDto _contractTemplate;
        private CustomerContractDtoStatus? _status;
        private CustomerNumberDto _customer;
        private LocationNameDescriptionDto _location;
        private string _description;
        private double? _balance;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractId
        {
            get { return _contractId; }
            set 
            {
                if (_contractId != value)
                {
                    _contractId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contractTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractTemplateIdDescriptionDto ContractTemplate
        {
            get { return _contractTemplate; }
            set 
            {
                if (_contractTemplate != value)
                {
                    _contractTemplate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerContractDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ContractTemplateIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContractTemplateIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractTemplateIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LocationNameDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LocationNameDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationNameDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private string _contractTemplate;
        private CustomerContractQueryParametersStatus? _status;
        private string _customer;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contractTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractTemplate
        {
            get { return _contractTemplate; }
            set 
            {
                if (_contractTemplate != value)
                {
                    _contractTemplate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerContractQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _contractId;
        private DtoValueOfString _contractTemplate;
        private DtoValueOfString _customer;
        private DtoValueOfString _location;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDateTime _setupDate;
        private DtoValueOfNullableOfDateTime _activationDate;
        private DtoValueOfNullableOfDateTime _expirationDate;
        private DtoValueOfNullableOfBoolean _massRenewal;
        private DtoValueOfNullableOfInt32 _renewalPoint;
        private DtoValueOfNullableOfInt32 _gracePeriod;
        private DtoValueOfNullableOfInvoiceToType _invoiceTo;
        private DtoValueOfString _invoiceAccount;
        private DtoValueOfString _invoiceLocation;
        private DtoValueOfString _owner;
        private DtoValueOfString _salesPerson;
        private System.Collections.ObjectModel.ObservableCollection<CustomerContractDetailsUpdateDto> _details;
    
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ContractId
        {
            get { return _contractId; }
            set 
            {
                if (_contractId != value)
                {
                    _contractId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contractTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ContractTemplate
        {
            get { return _contractTemplate; }
            set 
            {
                if (_contractTemplate != value)
                {
                    _contractTemplate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime SetupDate
        {
            get { return _setupDate; }
            set 
            {
                if (_setupDate != value)
                {
                    _setupDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("activationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ActivationDate
        {
            get { return _activationDate; }
            set 
            {
                if (_activationDate != value)
                {
                    _activationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("massRenewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean MassRenewal
        {
            get { return _massRenewal; }
            set 
            {
                if (_massRenewal != value)
                {
                    _massRenewal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("renewalPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 RenewalPoint
        {
            get { return _renewalPoint; }
            set 
            {
                if (_renewalPoint != value)
                {
                    _renewalPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gracePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 GracePeriod
        {
            get { return _gracePeriod; }
            set 
            {
                if (_gracePeriod != value)
                {
                    _gracePeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInvoiceToType InvoiceTo
        {
            get { return _invoiceTo; }
            set 
            {
                if (_invoiceTo != value)
                {
                    _invoiceTo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InvoiceAccount
        {
            get { return _invoiceAccount; }
            set 
            {
                if (_invoiceAccount != value)
                {
                    _invoiceAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InvoiceLocation
        {
            get { return _invoiceLocation; }
            set 
            {
                if (_invoiceLocation != value)
                {
                    _invoiceLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SalesPerson
        {
            get { return _salesPerson; }
            set 
            {
                if (_salesPerson != value)
                {
                    _salesPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerContractDetailsUpdateDto> Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfInvoiceToType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfInvoiceToTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfInvoiceToTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfInvoiceToType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfInvoiceToType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractDetailsUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private CustomerContractDetailsUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _contractDetailId;
        private DtoValueOfString _itemCode;
        private DtoValueOfNullableOfDecimal _included;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerContractDetailsUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contractDetailId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 ContractDetailId
        {
            get { return _contractDetailId; }
            set 
            {
                if (_contractDetailId != value)
                {
                    _contractDetailId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ItemCode
        {
            get { return _itemCode; }
            set 
            {
                if (_itemCode != value)
                {
                    _itemCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Included
        {
            get { return _included; }
            set 
            {
                if (_included != value)
                {
                    _included = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractDetailsUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractDetailsUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents the CustomerContractSummary in CustomerContractController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractSummaryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _setupDate;
        private System.DateTimeOffset? _activationDate;
        private System.DateTimeOffset? _expirationDate;
        private System.DateTimeOffset? _terminationDate;
        private bool? _massRenewal;
        private int? _renewalPoint;
        private int? _gracePeriod;
        private string _currency;
        private System.DateTimeOffset? _invoicingScheduleStartsOn;
        private CustomerContractSummaryDtoInvoicingPeriod? _invoicingPeriod;
        private System.DateTimeOffset? _lastInvoicingDate;
        private System.DateTimeOffset? _nextInvoicingDate;
        private CustomerContractSummaryDtoInvoiceTo? _invoiceTo;
        private CustomerNumberDto _invoiceAccount;
        private LocationNameDescriptionDto _invoiceLocation;
        private EmployeeNumberNameDto _owner;
        private SalesPersonDto _salesPerson;
        private InventoryNumberDescriptionDto _caseCountItem;
    
        [Newtonsoft.Json.JsonProperty("setupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SetupDate
        {
            get { return _setupDate; }
            set 
            {
                if (_setupDate != value)
                {
                    _setupDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("activationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActivationDate
        {
            get { return _activationDate; }
            set 
            {
                if (_activationDate != value)
                {
                    _activationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terminationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TerminationDate
        {
            get { return _terminationDate; }
            set 
            {
                if (_terminationDate != value)
                {
                    _terminationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("massRenewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MassRenewal
        {
            get { return _massRenewal; }
            set 
            {
                if (_massRenewal != value)
                {
                    _massRenewal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("renewalPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewalPoint
        {
            get { return _renewalPoint; }
            set 
            {
                if (_renewalPoint != value)
                {
                    _renewalPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gracePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GracePeriod
        {
            get { return _gracePeriod; }
            set 
            {
                if (_gracePeriod != value)
                {
                    _gracePeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoicingScheduleStartsOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvoicingScheduleStartsOn
        {
            get { return _invoicingScheduleStartsOn; }
            set 
            {
                if (_invoicingScheduleStartsOn != value)
                {
                    _invoicingScheduleStartsOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoicingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerContractSummaryDtoInvoicingPeriod? InvoicingPeriod
        {
            get { return _invoicingPeriod; }
            set 
            {
                if (_invoicingPeriod != value)
                {
                    _invoicingPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastInvoicingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastInvoicingDate
        {
            get { return _lastInvoicingDate; }
            set 
            {
                if (_lastInvoicingDate != value)
                {
                    _lastInvoicingDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nextInvoicingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextInvoicingDate
        {
            get { return _nextInvoicingDate; }
            set 
            {
                if (_nextInvoicingDate != value)
                {
                    _nextInvoicingDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerContractSummaryDtoInvoiceTo? InvoiceTo
        {
            get { return _invoiceTo; }
            set 
            {
                if (_invoiceTo != value)
                {
                    _invoiceTo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto InvoiceAccount
        {
            get { return _invoiceAccount; }
            set 
            {
                if (_invoiceAccount != value)
                {
                    _invoiceAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto InvoiceLocation
        {
            get { return _invoiceLocation; }
            set 
            {
                if (_invoiceLocation != value)
                {
                    _invoiceLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeNumberNameDto Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesPersonDto SalesPerson
        {
            get { return _salesPerson; }
            set 
            {
                if (_salesPerson != value)
                {
                    _salesPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("caseCountItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto CaseCountItem
        {
            get { return _caseCountItem; }
            set 
            {
                if (_caseCountItem != value)
                {
                    _caseCountItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractSummaryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractSummaryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents the CustomerContractDetails in CustomerContractController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractDetailsDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _effectiveFrom;
        private PromoCodeIdDescriptionDto _promoCode;
        private double? _pendingSetup;
        private double? _pendingRecurring;
        private double? _pendingRenewal;
        private double? _totalPending;
        private double? _currentSetup;
        private double? _currentRecurring;
        private double? _currentRenewal;
        private System.Collections.ObjectModel.ObservableCollection<CustomerContractDetailsLineDto> _lines;
    
        [Newtonsoft.Json.JsonProperty("effectiveFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EffectiveFrom
        {
            get { return _effectiveFrom; }
            set 
            {
                if (_effectiveFrom != value)
                {
                    _effectiveFrom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promoCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromoCodeIdDescriptionDto PromoCode
        {
            get { return _promoCode; }
            set 
            {
                if (_promoCode != value)
                {
                    _promoCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pendingSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PendingSetup
        {
            get { return _pendingSetup; }
            set 
            {
                if (_pendingSetup != value)
                {
                    _pendingSetup = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pendingRecurring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PendingRecurring
        {
            get { return _pendingRecurring; }
            set 
            {
                if (_pendingRecurring != value)
                {
                    _pendingRecurring = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pendingRenewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PendingRenewal
        {
            get { return _pendingRenewal; }
            set 
            {
                if (_pendingRenewal != value)
                {
                    _pendingRenewal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalPending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPending
        {
            get { return _totalPending; }
            set 
            {
                if (_totalPending != value)
                {
                    _totalPending = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentSetup
        {
            get { return _currentSetup; }
            set 
            {
                if (_currentSetup != value)
                {
                    _currentSetup = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentRecurring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentRecurring
        {
            get { return _currentRecurring; }
            set 
            {
                if (_currentRecurring != value)
                {
                    _currentRecurring = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentRenewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentRenewal
        {
            get { return _currentRenewal; }
            set 
            {
                if (_currentRenewal != value)
                {
                    _currentRenewal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerContractDetailsLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractDetailsDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractDetailsDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PromoCodeIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PromoCodeIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PromoCodeIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a CustomerContractDetailLine in CustomerContractController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractDetailsLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _contractDetailId;
        private string _itemCode;
        private string _description;
        private double? _included;
        private double? _difference;
        private double? _setupPrice;
        private double? _setupDiscount;
        private double? _recurringPrice;
        private double? _extraUsagePrice;
        private double? _recurringDiscount;
        private double? _renewalPrice;
        private double? _renewalDiscount;
    
        [Newtonsoft.Json.JsonProperty("contractDetailId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractDetailId
        {
            get { return _contractDetailId; }
            set 
            {
                if (_contractDetailId != value)
                {
                    _contractDetailId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemCode
        {
            get { return _itemCode; }
            set 
            {
                if (_itemCode != value)
                {
                    _itemCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Included
        {
            get { return _included; }
            set 
            {
                if (_included != value)
                {
                    _included = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("difference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Difference
        {
            get { return _difference; }
            set 
            {
                if (_difference != value)
                {
                    _difference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupPrice
        {
            get { return _setupPrice; }
            set 
            {
                if (_setupPrice != value)
                {
                    _setupPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupDiscount
        {
            get { return _setupDiscount; }
            set 
            {
                if (_setupDiscount != value)
                {
                    _setupDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("recurringPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RecurringPrice
        {
            get { return _recurringPrice; }
            set 
            {
                if (_recurringPrice != value)
                {
                    _recurringPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extraUsagePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtraUsagePrice
        {
            get { return _extraUsagePrice; }
            set 
            {
                if (_extraUsagePrice != value)
                {
                    _extraUsagePrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("recurringDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RecurringDiscount
        {
            get { return _recurringDiscount; }
            set 
            {
                if (_recurringDiscount != value)
                {
                    _recurringDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("renewalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RenewalPrice
        {
            get { return _renewalPrice; }
            set 
            {
                if (_renewalPrice != value)
                {
                    _renewalPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("renewalDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RenewalDiscount
        {
            get { return _renewalDiscount; }
            set 
            {
                if (_renewalDiscount != value)
                {
                    _renewalDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractDetailsLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractDetailsLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents the CustomerContractRecurringSummary in CustomerContractController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractRecurringSummaryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _recurringTotal;
        private double? _extraUsageTotal;
        private double? _totalDue;
        private System.Collections.ObjectModel.ObservableCollection<CustomerContractRecurringSummaryLineDto> _lines;
    
        [Newtonsoft.Json.JsonProperty("recurringTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RecurringTotal
        {
            get { return _recurringTotal; }
            set 
            {
                if (_recurringTotal != value)
                {
                    _recurringTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extraUsageTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtraUsageTotal
        {
            get { return _extraUsageTotal; }
            set 
            {
                if (_extraUsageTotal != value)
                {
                    _extraUsageTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDue
        {
            get { return _totalDue; }
            set 
            {
                if (_totalDue != value)
                {
                    _totalDue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerContractRecurringSummaryLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractRecurringSummaryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractRecurringSummaryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a CustomerContractRecurringSummaryLine in CustomerContractController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerContractRecurringSummaryLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _itemCode;
        private string _description;
        private string _itemId;
        private string _uom;
        private CustomerContractRecurringSummaryLineDtoInvoiceType? _invoiceType;
        private double? _included;
        private double? _recurringPrice;
        private double? _recurringDiscount;
        private double? _extraUsagePrice;
        private double? _unInvoiced;
        private double? _usedTotal;
    
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemCode
        {
            get { return _itemCode; }
            set 
            {
                if (_itemCode != value)
                {
                    _itemCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId
        {
            get { return _itemId; }
            set 
            {
                if (_itemId != value)
                {
                    _itemId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerContractRecurringSummaryLineDtoInvoiceType? InvoiceType
        {
            get { return _invoiceType; }
            set 
            {
                if (_invoiceType != value)
                {
                    _invoiceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Included
        {
            get { return _included; }
            set 
            {
                if (_included != value)
                {
                    _included = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("recurringPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RecurringPrice
        {
            get { return _recurringPrice; }
            set 
            {
                if (_recurringPrice != value)
                {
                    _recurringPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("recurringDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RecurringDiscount
        {
            get { return _recurringDiscount; }
            set 
            {
                if (_recurringDiscount != value)
                {
                    _recurringDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extraUsagePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtraUsagePrice
        {
            get { return _extraUsagePrice; }
            set 
            {
                if (_extraUsagePrice != value)
                {
                    _extraUsagePrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unInvoiced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnInvoiced
        {
            get { return _unInvoiced; }
            set 
            {
                if (_unInvoiced != value)
                {
                    _unInvoiced = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("usedTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UsedTotal
        {
            get { return _usedTotal; }
            set 
            {
                if (_usedTotal != value)
                {
                    _usedTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerContractRecurringSummaryLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerContractRecurringSummaryLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerInvoiceUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _paymentMethodId;
        private DtoValueOfString _creditTermsId;
        private DtoValueOfString _currencyId;
        private DtoValueOfString _customerRefNumber;
        private DtoValueOfDateTime _cashDiscountDate;
        private DtoValueOfDateTime _documentDueDate;
        private DtoValueOfString _externalReference;
        private DtoValueOfDecimal _exchangeRate;
        private DtoValueOfNullableOfBoolean _domesticServicesDeductibleDocument;
        private RotRutUpdateDto _rotRutDetails;
        private DtoValueOfString _paymentReference;
        private System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceLinesUpdateDto> _invoiceLines;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfString _customerNumber;
        private DtoValueOfDateTime _documentDate;
        private DtoValueOfBoolean _hold;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _financialPeriod;
        private DtoValueOfString _invoiceText;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfInt32 _salesPersonID;
        private DtoValueOfString _note;
        private DtoValueOfString _branchNumber;
        private DtoValueOfString _cashAccount;
    
        [Newtonsoft.Json.JsonProperty("paymentMethodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentMethodId
        {
            get { return _paymentMethodId; }
            set 
            {
                if (_paymentMethodId != value)
                {
                    _paymentMethodId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTermsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CreditTermsId
        {
            get { return _creditTermsId; }
            set 
            {
                if (_creditTermsId != value)
                {
                    _creditTermsId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerRefNumber
        {
            get { return _customerRefNumber; }
            set 
            {
                if (_customerRefNumber != value)
                {
                    _customerRefNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime CashDiscountDate
        {
            get { return _cashDiscountDate; }
            set 
            {
                if (_cashDiscountDate != value)
                {
                    _cashDiscountDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime DocumentDueDate
        {
            get { return _documentDueDate; }
            set 
            {
                if (_documentDueDate != value)
                {
                    _documentDueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("domesticServicesDeductibleDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean DomesticServicesDeductibleDocument
        {
            get { return _domesticServicesDeductibleDocument; }
            set 
            {
                if (_domesticServicesDeductibleDocument != value)
                {
                    _domesticServicesDeductibleDocument = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("rotRutDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RotRutUpdateDto RotRutDetails
        {
            get { return _rotRutDetails; }
            set 
            {
                if (_rotRutDetails != value)
                {
                    _rotRutDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentReference
        {
            get { return _paymentReference; }
            set 
            {
                if (_paymentReference != value)
                {
                    _paymentReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerInvoiceLinesUpdateDto> InvoiceLines
        {
            get { return _invoiceLines; }
            set 
            {
                if (_invoiceLines != value)
                {
                    _invoiceLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerNumber
        {
            get { return _customerNumber; }
            set 
            {
                if (_customerNumber != value)
                {
                    _customerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime DocumentDate
        {
            get { return _documentDate; }
            set 
            {
                if (_documentDate != value)
                {
                    _documentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPersonID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 SalesPersonID
        {
            get { return _salesPersonID; }
            set 
            {
                if (_salesPersonID != value)
                {
                    _salesPersonID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerInvoiceUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInvoiceUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class RotRutUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBoolean _distributedAutomaticaly;
        private DtoValueOfNullableOfRutRotTypes _type;
        private DtoValueOfString _appartment;
        private DtoValueOfString _estate;
        private DtoValueOfString _organizationNbr;
        private System.Collections.ObjectModel.ObservableCollection<RotRutDistributionUpdateDto> _distribution;
    
        [Newtonsoft.Json.JsonProperty("distributedAutomaticaly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean DistributedAutomaticaly
        {
            get { return _distributedAutomaticaly; }
            set 
            {
                if (_distributedAutomaticaly != value)
                {
                    _distributedAutomaticaly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfRutRotTypes Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("appartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Appartment
        {
            get { return _appartment; }
            set 
            {
                if (_appartment != value)
                {
                    _appartment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("estate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Estate
        {
            get { return _estate; }
            set 
            {
                if (_estate != value)
                {
                    _estate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizationNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrganizationNbr
        {
            get { return _organizationNbr; }
            set 
            {
                if (_organizationNbr != value)
                {
                    _organizationNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("distribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RotRutDistributionUpdateDto> Distribution
        {
            get { return _distribution; }
            set 
            {
                if (_distribution != value)
                {
                    _distribution = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RotRutUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RotRutUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerInvoiceLinesUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _discountCode;
        private DtoValueOfNullableOfBoolean _domesticServicesDeductible;
        private DtoValueOfNullableOfRutRotItemTypes _itemType;
        private DtoValueOfString _typeOfWork;
        private CustomerInvoiceLinesUpdateDtoOperation? _operation;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _description;
        private DtoValueOfDecimal _quantity;
        private DtoValueOfDecimal _unitPriceInCurrency;
        private DtoValueOfDecimal _manualAmountInCurrency;
        private DtoValueOfString _accountNumber;
        private DtoValueOfString _vatCodeId;
        private DtoValueOfString _uom;
        private DtoValueOfDecimal _discountPercent;
        private DtoValueOfDecimal _discountAmountInCurrency;
        private DtoValueOfBoolean _manualDiscount;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfString _salesperson;
        private DtoValueOfInt32 _deferralSchedule;
        private DtoValueOfString _deferralCode;
        private DtoValueOfDateTime _termStartDate;
        private DtoValueOfDateTime _termEndDate;
        private DtoValueOfString _note;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("domesticServicesDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean DomesticServicesDeductible
        {
            get { return _domesticServicesDeductible; }
            set 
            {
                if (_domesticServicesDeductible != value)
                {
                    _domesticServicesDeductible = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfRutRotItemTypes ItemType
        {
            get { return _itemType; }
            set 
            {
                if (_itemType != value)
                {
                    _itemType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("typeOfWork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TypeOfWork
        {
            get { return _typeOfWork; }
            set 
            {
                if (_typeOfWork != value)
                {
                    _typeOfWork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceLinesUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPriceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal UnitPriceInCurrency
        {
            get { return _unitPriceInCurrency; }
            set 
            {
                if (_unitPriceInCurrency != value)
                {
                    _unitPriceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal ManualAmountInCurrency
        {
            get { return _manualAmountInCurrency; }
            set 
            {
                if (_manualAmountInCurrency != value)
                {
                    _manualAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountNumber
        {
            get { return _accountNumber; }
            set 
            {
                if (_accountNumber != value)
                {
                    _accountNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatCodeId
        {
            get { return _vatCodeId; }
            set 
            {
                if (_vatCodeId != value)
                {
                    _vatCodeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal DiscountAmountInCurrency
        {
            get { return _discountAmountInCurrency; }
            set 
            {
                if (_discountAmountInCurrency != value)
                {
                    _discountAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesperson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Salesperson
        {
            get { return _salesperson; }
            set 
            {
                if (_salesperson != value)
                {
                    _salesperson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime TermStartDate
        {
            get { return _termStartDate; }
            set 
            {
                if (_termStartDate != value)
                {
                    _termStartDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime TermEndDate
        {
            get { return _termEndDate; }
            set 
            {
                if (_termEndDate != value)
                {
                    _termEndDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerInvoiceLinesUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInvoiceLinesUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfRutRotTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfRutRotTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfRutRotTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfRutRotTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfRutRotTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class RotRutDistributionUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private RotRutDistributionUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNbr;
        private DtoValueOfString _personalId;
        private DtoValueOfNullableOfDecimal _amount;
        private DtoValueOfNullableOfBoolean _extra;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RotRutDistributionUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PersonalId
        {
            get { return _personalId; }
            set 
            {
                if (_personalId != value)
                {
                    _personalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Extra
        {
            get { return _extra; }
            set 
            {
                if (_extra != value)
                {
                    _extra = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RotRutDistributionUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RotRutDistributionUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfRutRotItemTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfRutRotItemTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfRutRotItemTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfRutRotItemTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfRutRotItemTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a RutRot in RutRotController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class RotRutDto : System.ComponentModel.INotifyPropertyChanged
    {
        private RotRutDtoDocType? _docType;
        private string _refNbr;
        private bool? _distributedAutomaticaly;
        private RotRutDtoType? _type;
        private double? _totalDeductableAmount;
        private double? _otherCost;
        private double? _materialCost;
        private double? _workPrice;
        private double? _distributedAmount;
        private string _appartment;
        private string _estate;
        private string _organizationNbr;
        private System.Collections.ObjectModel.ObservableCollection<RotRutDistributionDto> _distribution;
    
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RotRutDtoDocType? DocType
        {
            get { return _docType; }
            set 
            {
                if (_docType != value)
                {
                    _docType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("distributedAutomaticaly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DistributedAutomaticaly
        {
            get { return _distributedAutomaticaly; }
            set 
            {
                if (_distributedAutomaticaly != value)
                {
                    _distributedAutomaticaly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RotRutDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalDeductableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDeductableAmount
        {
            get { return _totalDeductableAmount; }
            set 
            {
                if (_totalDeductableAmount != value)
                {
                    _totalDeductableAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("otherCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OtherCost
        {
            get { return _otherCost; }
            set 
            {
                if (_otherCost != value)
                {
                    _otherCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("materialCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaterialCost
        {
            get { return _materialCost; }
            set 
            {
                if (_materialCost != value)
                {
                    _materialCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("workPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkPrice
        {
            get { return _workPrice; }
            set 
            {
                if (_workPrice != value)
                {
                    _workPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("distributedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DistributedAmount
        {
            get { return _distributedAmount; }
            set 
            {
                if (_distributedAmount != value)
                {
                    _distributedAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("appartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Appartment
        {
            get { return _appartment; }
            set 
            {
                if (_appartment != value)
                {
                    _appartment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("estate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Estate
        {
            get { return _estate; }
            set 
            {
                if (_estate != value)
                {
                    _estate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizationNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationNbr
        {
            get { return _organizationNbr; }
            set 
            {
                if (_organizationNbr != value)
                {
                    _organizationNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("distribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RotRutDistributionDto> Distribution
        {
            get { return _distribution; }
            set 
            {
                if (_distribution != value)
                {
                    _distribution = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RotRutDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RotRutDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a RutRot Distribution Line For RutRot in RutRotController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class RotRutDistributionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNbr;
        private string _personalId;
        private double? _amount;
        private bool? _extra;
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId
        {
            get { return _personalId; }
            set 
            {
                if (_personalId != value)
                {
                    _personalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Extra
        {
            get { return _extra; }
            set 
            {
                if (_extra != value)
                {
                    _extra = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RotRutDistributionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RotRutDistributionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReverseInvoiceActionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _returnCreditNote;
    
        [Newtonsoft.Json.JsonProperty("returnCreditNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnCreditNote
        {
            get { return _returnCreditNote; }
            set 
            {
                if (_returnCreditNote != value)
                {
                    _returnCreditNote = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReverseInvoiceActionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReverseInvoiceActionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReverseInvoiceActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _referenceNumber;
        private CreditNoteDto _creditNoteDto;
        private System.Guid? _actionId;
        private ReverseInvoiceActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditNoteDto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditNoteDto CreditNoteDto
        {
            get { return _creditNoteDto; }
            set 
            {
                if (_creditNoteDto != value)
                {
                    _creditNoteDto = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReverseInvoiceActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReverseInvoiceActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReverseInvoiceActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerSalesPriceQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private CustomerSalesPriceQueryParametersPriceType? _priceType;
        private string _priceCode;
        private string _inventoryId;
        private System.DateTimeOffset? _effectiveAsOf;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerSalesPriceQueryParametersPriceType? PriceType
        {
            get { return _priceType; }
            set 
            {
                if (_priceType != value)
                {
                    _priceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceCode
        {
            get { return _priceCode; }
            set 
            {
                if (_priceCode != value)
                {
                    _priceCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("effectiveAsOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EffectiveAsOf
        {
            get { return _effectiveAsOf; }
            set 
            {
                if (_effectiveAsOf != value)
                {
                    _effectiveAsOf = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerSalesPriceQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSalesPriceQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a CustomerSalesPrice in CustomerSalesPriceController.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CustomerSalesPriceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _recordId;
        private CustomerSalesPriceDtoPriceType? _priceType;
        private string _priceCode;
        private string _inventoryId;
        private string _description;
        private string _uoM;
        private bool? _promotion;
        private double? _breakQty;
        private double? _price;
        private string _currency;
        private string _vat;
        private System.DateTimeOffset? _effectiveDate;
        private System.DateTimeOffset? _expirationDate;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordId
        {
            get { return _recordId; }
            set 
            {
                if (_recordId != value)
                {
                    _recordId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerSalesPriceDtoPriceType? PriceType
        {
            get { return _priceType; }
            set 
            {
                if (_priceType != value)
                {
                    _priceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceCode
        {
            get { return _priceCode; }
            set 
            {
                if (_priceCode != value)
                {
                    _priceCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uoM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UoM
        {
            get { return _uoM; }
            set 
            {
                if (_uoM != value)
                {
                    _uoM = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Promotion
        {
            get { return _promotion; }
            set 
            {
                if (_promotion != value)
                {
                    _promotion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("breakQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakQty
        {
            get { return _breakQty; }
            set 
            {
                if (_breakQty != value)
                {
                    _breakQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vat
        {
            get { return _vat; }
            set 
            {
                if (_vat != value)
                {
                    _vat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EffectiveDate
        {
            get { return _effectiveDate; }
            set 
            {
                if (_effectiveDate != value)
                {
                    _effectiveDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerSalesPriceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSalesPriceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DepartmentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _departmentId;
        private System.Guid? _publicId;
        private string _description;
        private AccountNumberDto _expenseAccount;
        private SubAccountDescriptionDto _expenseSubaccount;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartmentId
        {
            get { return _departmentId; }
            set 
            {
                if (_departmentId != value)
                {
                    _departmentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("publicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PublicId
        {
            get { return _publicId; }
            set 
            {
                if (_publicId != value)
                {
                    _publicId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto ExpenseAccount
        {
            get { return _expenseAccount; }
            set 
            {
                if (_expenseAccount != value)
                {
                    _expenseAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto ExpenseSubaccount
        {
            get { return _expenseSubaccount; }
            set 
            {
                if (_expenseSubaccount != value)
                {
                    _expenseSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DepartmentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartmentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DepartmentUpdateBaseDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _departmentId;
        private DtoValueOfString _description;
        private DtoValueOfString _expenseAccount;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _expenseSubaccount;
    
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartmentId
        {
            get { return _departmentId; }
            set 
            {
                if (_departmentId != value)
                {
                    _departmentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExpenseAccount
        {
            get { return _expenseAccount; }
            set 
            {
                if (_expenseAccount != value)
                {
                    _expenseAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> ExpenseSubaccount
        {
            get { return _expenseSubaccount; }
            set 
            {
                if (_expenseSubaccount != value)
                {
                    _expenseSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DepartmentUpdateBaseDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartmentUpdateBaseDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DepartmentQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DepartmentQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartmentQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DimensionQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DimensionQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DimensionQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoDimension : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private int? _length;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<DtoSegment> _segments;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length
        {
            get { return _length; }
            set 
            {
                if (_length != value)
                {
                    _length = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DtoSegment> Segments
        {
            get { return _segments; }
            set 
            {
                if (_segments != value)
                {
                    _segments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoDimension FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoDimension>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoSegment : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _segmentId;
        private string _description;
        private int? _length;
        private string _publicId;
        private string _timeStamp;
        private System.DateTimeOffset? _lastModified;
        private bool? _validate;
        private System.Collections.ObjectModel.ObservableCollection<DtoSegmentValue> _segmentValues;
        private bool? _isAutoNumber;
    
        [Newtonsoft.Json.JsonProperty("segmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SegmentId
        {
            get { return _segmentId; }
            set 
            {
                if (_segmentId != value)
                {
                    _segmentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length
        {
            get { return _length; }
            set 
            {
                if (_length != value)
                {
                    _length = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("publicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicId
        {
            get { return _publicId; }
            set 
            {
                if (_publicId != value)
                {
                    _publicId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeStamp
        {
            get { return _timeStamp; }
            set 
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("validate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Validate
        {
            get { return _validate; }
            set 
            {
                if (_validate != value)
                {
                    _validate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segmentValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DtoSegmentValue> SegmentValues
        {
            get { return _segmentValues; }
            set 
            {
                if (_segmentValues != value)
                {
                    _segmentValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isAutoNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAutoNumber
        {
            get { return _isAutoNumber; }
            set 
            {
                if (_isAutoNumber != value)
                {
                    _isAutoNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoSegment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoSegment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoSegmentValue : System.ComponentModel.INotifyPropertyChanged
    {
        private string _valueId;
        private string _description;
        private string _publicId;
        private bool? _active;
        private string _timeStamp;
        private System.DateTimeOffset? _lastModified;
    
        [Newtonsoft.Json.JsonProperty("valueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueId
        {
            get { return _valueId; }
            set 
            {
                if (_valueId != value)
                {
                    _valueId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("publicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicId
        {
            get { return _publicId; }
            set 
            {
                if (_publicId != value)
                {
                    _publicId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeStamp
        {
            get { return _timeStamp; }
            set 
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoSegmentValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoSegmentValue>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoSegmentUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<DtoSegmentValueUpdateDtoBase> _segmentValues;
        private string _dimensionId;
        private int? _segementId;
        private DtoValueOfString _description;
    
        [Newtonsoft.Json.JsonProperty("segmentValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DtoSegmentValueUpdateDtoBase> SegmentValues
        {
            get { return _segmentValues; }
            set 
            {
                if (_segmentValues != value)
                {
                    _segmentValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dimensionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DimensionId
        {
            get { return _dimensionId; }
            set 
            {
                if (_dimensionId != value)
                {
                    _dimensionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("segementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SegementId
        {
            get { return _segementId; }
            set 
            {
                if (_segementId != value)
                {
                    _segementId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoSegmentUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoSegmentUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoSegmentValueUpdateDtoBase : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoSegmentValueUpdateDtoBaseOperation? _operation;
        private string _value;
        private DtoValueOfString _description;
        private DtoValueOfBoolean _active;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoSegmentValueUpdateDtoBaseOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoSegmentValueUpdateDtoBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoSegmentValueUpdateDtoBase>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents an Employee in EmployeeController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EmployeeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _employeeId;
        private string _employeeNumber;
        private string _employeeName;
        private EmployeeDtoStatus? _status;
        private string _department;
        private EmployeeContactDto _contact;
        private AddressDto _address;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("employeeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EmployeeId
        {
            get { return _employeeId; }
            set 
            {
                if (_employeeId != value)
                {
                    _employeeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employeeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployeeNumber
        {
            get { return _employeeNumber; }
            set 
            {
                if (_employeeNumber != value)
                {
                    _employeeNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employeeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployeeName
        {
            get { return _employeeName; }
            set 
            {
                if (_employeeName != value)
                {
                    _employeeName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmployeeDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Department
        {
            get { return _department; }
            set 
            {
                if (_department != value)
                {
                    _department = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeContactDto Contact
        {
            get { return _contact; }
            set 
            {
                if (_contact != value)
                {
                    _contact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address
        {
            get { return _address; }
            set 
            {
                if (_address != value)
                {
                    _address = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmployeeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmployeeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EmployeeContactDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _employeeContact;
        private EmployeeContactDtoTitle? _title;
        private string _firstName;
        private string _midName;
        private string _lastName;
        private string _phone3;
        private int? _contactId;
        private string _name;
        private string _attention;
        private string _email;
        private string _web;
        private string _phone1;
        private string _phone2;
        private string _fax;
    
        [Newtonsoft.Json.JsonProperty("employeeContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployeeContact
        {
            get { return _employeeContact; }
            set 
            {
                if (_employeeContact != value)
                {
                    _employeeContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmployeeContactDtoTitle? Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("midName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MidName
        {
            get { return _midName; }
            set 
            {
                if (_midName != value)
                {
                    _midName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone3
        {
            get { return _phone3; }
            set 
            {
                if (_phone3 != value)
                {
                    _phone3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId
        {
            get { return _contactId; }
            set 
            {
                if (_contactId != value)
                {
                    _contactId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmployeeContactDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmployeeContactDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EmployeeQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmployeeQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmployeeQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EmployeeTimeCardQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private EmployeeTimeCardQueryParametersStatus? _status;
        private string _week;
        private EmployeeTimeCardQueryParametersType? _type;
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmployeeTimeCardQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("week", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Week
        {
            get { return _week; }
            set 
            {
                if (_week != value)
                {
                    _week = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmployeeTimeCardQueryParametersType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmployeeTimeCardQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmployeeTimeCardQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TimeCardDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _refNbr;
        private TimeCardDtoStatus? _status;
        private TimeCardDtoApprovalStatus? _approvalStatus;
        private WeekNumberDescriptionDto _week;
        private EmployeeNumberNameDto _employee;
        private TimeCardDtoType? _type;
        private string _origRefNbr;
        private int? _timeSpent;
        private int? _invoiceable;
        private int? _overtimeSpent;
        private int? _invoiceableOvertime;
        private int? _totalTimeSpent;
        private int? _invoiceableTotalTime;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<TimeCardSummaryDto> _summary;
        private string _approvalStatusText;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        /// <summary>The unique reference number of the time card, which Acumatica ERP automatically assigns according to the numbering sequence specified as the Time Card Numbering Sequence on the Time and Expenses Preferences (EP.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The status of the time card</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeCardDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The approval status of the time card</summary>
        [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeCardDtoApprovalStatus? ApprovalStatus
        {
            get { return _approvalStatus; }
            set 
            {
                if (_approvalStatus != value)
                {
                    _approvalStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The week for which the time card has been created.</summary>
        [Newtonsoft.Json.JsonProperty("week", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeekNumberDescriptionDto Week
        {
            get { return _week; }
            set 
            {
                if (_week != value)
                {
                    _week = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of the employee whose time card is currently open.</summary>
        [Newtonsoft.Json.JsonProperty("employee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeNumberNameDto Employee
        {
            get { return _employee; }
            set 
            {
                if (_employee != value)
                {
                    _employee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of the time card. The following options are available:??? Normal: Regular time card??? Correction: Corrective time card, which is a time card that updates a released time card</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeCardDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The reference number of the time card being corrected. This box is filled in only when Correction is specified in the Type box</summary>
        [Newtonsoft.Json.JsonProperty("origRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrigRefNbr
        {
            get { return _origRefNbr; }
            set 
            {
                if (_origRefNbr != value)
                {
                    _origRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work hours spent by the employee during the week on activities with the Regular Hours earning type.</summary>
        [Newtonsoft.Json.JsonProperty("timeSpent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeSpent
        {
            get { return _timeSpent; }
            set 
            {
                if (_timeSpent != value)
                {
                    _timeSpent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The invoiceable work hours spent by the employee during the week</summary>
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work hours spent by the employee during the week on activities with the Overtime earning type.</summary>
        [Newtonsoft.Json.JsonProperty("overtimeSpent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OvertimeSpent
        {
            get { return _overtimeSpent; }
            set 
            {
                if (_overtimeSpent != value)
                {
                    _overtimeSpent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The invoiceable overtime spent by the employee during the week</summary>
        [Newtonsoft.Json.JsonProperty("invoiceableOvertime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvoiceableOvertime
        {
            get { return _invoiceableOvertime; }
            set 
            {
                if (_invoiceableOvertime != value)
                {
                    _invoiceableOvertime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total working time (regular and overtime) for the week</summary>
        [Newtonsoft.Json.JsonProperty("totalTimeSpent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalTimeSpent
        {
            get { return _totalTimeSpent; }
            set 
            {
                if (_totalTimeSpent != value)
                {
                    _totalTimeSpent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total invoiceable working time (regular and overtime) for the week</summary>
        [Newtonsoft.Json.JsonProperty("invoiceableTotalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvoiceableTotalTime
        {
            get { return _invoiceableTotalTime; }
            set 
            {
                if (_invoiceableTotalTime != value)
                {
                    _invoiceableTotalTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last time the time card line was modified</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time Card summary information</summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TimeCardSummaryDto> Summary
        {
            get { return _summary; }
            set 
            {
                if (_summary != value)
                {
                    _summary = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("approvalStatusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovalStatusText
        {
            get { return _approvalStatusText; }
            set 
            {
                if (_approvalStatusText != value)
                {
                    _approvalStatusText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeCardDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCardDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WeekNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WeekNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeekNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TimeCardSummaryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private string _lineId;
        private EarningTypeDto _earningType;
        private ProjectIdDescriptionDto _project;
        private int? _mon;
        private int? _tue;
        private int? _wed;
        private int? _thu;
        private int? _fri;
        private int? _sat;
        private int? _sun;
        private bool? _invoiceable;
        private ProjectTaskIdDescriptionDto _projectTask;
        private int? _timeSpent;
        private string _description;
        private TimeCardSummaryDtoApprovalStatus? _approvalStatus;
        private string _approver;
        private string _approvalStatusText;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        /// <summary>The time card line number</summary>
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The time card line id</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of the work time spent by the employee</summary>
        [Newtonsoft.Json.JsonProperty("earningType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EarningTypeDto EarningType
        {
            get { return _earningType; }
            set 
            {
                if (_earningType != value)
                {
                    _earningType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project that the employee worked on.</summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectIdDescriptionDto Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Monday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("mon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Mon
        {
            get { return _mon; }
            set 
            {
                if (_mon != value)
                {
                    _mon = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Tuesday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("tue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tue
        {
            get { return _tue; }
            set 
            {
                if (_tue != value)
                {
                    _tue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Wednesday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("wed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wed
        {
            get { return _wed; }
            set 
            {
                if (_wed != value)
                {
                    _wed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Thursday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("thu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Thu
        {
            get { return _thu; }
            set 
            {
                if (_thu != value)
                {
                    _thu = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Friday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("fri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Fri
        {
            get { return _fri; }
            set 
            {
                if (_fri != value)
                {
                    _fri = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Saturday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("sat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sat
        {
            get { return _sat; }
            set 
            {
                if (_sat != value)
                {
                    _sat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Sunday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("sun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sun
        {
            get { return _sun; }
            set 
            {
                if (_sun != value)
                {
                    _sun = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to indicate that these work hours are invoiceable.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project task that the employee worked on.</summary>
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTaskIdDescriptionDto ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time (regular and overtime) that the employee spent on the project and task during the week.</summary>
        [Newtonsoft.Json.JsonProperty("timeSpent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeSpent
        {
            get { return _timeSpent; }
            set 
            {
                if (_timeSpent != value)
                {
                    _timeSpent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The description of the reported work hours.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The approval status, which indicates whether the summary row requires approval and, if it does, what the current state of approval is.</summary>
        [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeCardSummaryDtoApprovalStatus? ApprovalStatus
        {
            get { return _approvalStatus; }
            set 
            {
                if (_approvalStatus != value)
                {
                    _approvalStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the person authorized to approve the activity, if approval is required. This is either the approver of the project task or, if no approver is assigned to the project task, the project manager.</summary>
        [Newtonsoft.Json.JsonProperty("approver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Approver
        {
            get { return _approver; }
            set 
            {
                if (_approver != value)
                {
                    _approver = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The approval status text suitable for display</summary>
        [Newtonsoft.Json.JsonProperty("approvalStatusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovalStatusText
        {
            get { return _approvalStatusText; }
            set 
            {
                if (_approvalStatusText != value)
                {
                    _approvalStatusText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last time the time card line was modified</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeCardSummaryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCardSummaryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class EarningTypeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EarningTypeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EarningTypeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseClaimQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private ExpenseClaimQueryParametersStatus? _status;
        private System.DateTimeOffset? _date;
        private string _customer;
        private string _departmentId;
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseClaimQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartmentId
        {
            get { return _departmentId; }
            set 
            {
                if (_departmentId != value)
                {
                    _departmentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseClaimQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseClaimQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Expense Claim in ExpenseClaimController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseClaimDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _refNbr;
        private ExpenseClaimDtoStatus? _status;
        private ExpenseClaimDtoApprovalStatus? _approvalStatus;
        private System.DateTimeOffset? _date;
        private string _description;
        private EmployeeNumberNameDto _claimedBy;
        private double? _claimTotal;
        private double? _vatTaxableTotal;
        private double? _vatExemptTotal;
        private CustomerNumberDto _customer;
        private string _currency;
        private System.DateTimeOffset? _approvalDate;
        private DepartmentIdDescriptionDto _department;
        private LocationNameDescriptionDto _location;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDetailDto> _details;
        private string _approvalStatusText;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        /// <summary>The unique reference number of the expense claim document.</summary>
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current status of the expense claim: On Hold/Pending Approval/Approved/Rejected/Released.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseClaimDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The approval status of the claim</summary>
        [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseClaimDtoApprovalStatus? ApprovalStatus
        {
            get { return _approvalStatus; }
            set 
            {
                if (_approvalStatus != value)
                {
                    _approvalStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the claim was entered.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A description of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The employee who is claiming the expenses. If the claim is released, an Accounts Payable bill will be generated to this employee.</summary>
        [Newtonsoft.Json.JsonProperty("claimedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeNumberNameDto ClaimedBy
        {
            get { return _claimedBy; }
            set 
            {
                if (_claimedBy != value)
                {
                    _claimedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total amount of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("claimTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ClaimTotal
        {
            get { return _claimTotal; }
            set 
            {
                if (_claimTotal != value)
                {
                    _claimTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The document total that is subjected to VAT.</summary>
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The document total that is exempt from VAT.</summary>
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The applicable customer.</summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The currency of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the claim was approved.</summary>
        [Newtonsoft.Json.JsonProperty("approvalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ApprovalDate
        {
            get { return _approvalDate; }
            set 
            {
                if (_approvalDate != value)
                {
                    _approvalDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The department associated with the expense claim.</summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepartmentIdDescriptionDto Department
        {
            get { return _department; }
            set 
            {
                if (_department != value)
                {
                    _department = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company location associated with the claim.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The lastest time the expense claim was modified</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expense Claim detail information</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDetailDto> Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("approvalStatusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovalStatusText
        {
            get { return _approvalStatusText; }
            set 
            {
                if (_approvalStatusText != value)
                {
                    _approvalStatusText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseClaimDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseClaimDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DepartmentIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DepartmentIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartmentIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseClaimDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _claimDetailId;
        private string _lineId;
        private System.DateTimeOffset? _date;
        private InventoryNumberDescriptionDto _expenseItem;
        private string _description;
        private double? _quantity;
        private string _uom;
        private double? _unitCost;
        private string _currency;
        private double? _totalAmount;
        private bool? _invoiceable;
        private double? _claimAmount;
        private double? _amountInClaimCurr;
        private ProjectIdDescriptionDto _project;
        private ProjectTaskIdDescriptionDto _projectTask;
        private AccountNumberDto _expenseAccount;
        private SubAccountDescriptionDto _expenseSubaccount;
        private BranchNumberDto _branch;
        private TaxCategoryNumberDescriptionDto _taxCategory;
        private string _refNbr;
        private AccountNumberDto _salesAccount;
        private SubAccountDescriptionDto _salesSubaccount;
        private double? _employeePart;
        private CustomerNumberDto _customer;
        private LocationNameDescriptionDto _location;
        private string _arReferenceNbr;
        private ExpenseClaimDetailDtoApprovalStatus? _approvalStatus;
        private string _approvalStatusText;
        private string _approver;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        /// <summary>Identifies the expense claim detail id, necessary when updatind detail information</summary>
        [Newtonsoft.Json.JsonProperty("claimDetailId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClaimDetailId
        {
            get { return _claimDetailId; }
            set 
            {
                if (_claimDetailId != value)
                {
                    _claimDetailId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The expense claim line id</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the expense was incurred.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The expense identifier, if an expense of this type is listed as an inventory nonstock item.</summary>
        [Newtonsoft.Json.JsonProperty("expenseItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto ExpenseItem
        {
            get { return _expenseItem; }
            set 
            {
                if (_expenseItem != value)
                {
                    _expenseItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A description of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The quantity of this expense item.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unit of measure in which the quantity is shown.</summary>
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The cost of a unit of the item.</summary>
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The currency of the expense receipt. However, if you enter a claim line directly, the currency value is read-only and matching the claim currency.</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total amount paid for the expense item in the specified quantity.</summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that, if selected, indicates that the claim amount is invoiceable to the customer (the total amount minus the employee's part).</summary>
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The amount claimed by the employee, which is calculated as the total claim amount minus the employee part.</summary>
        [Newtonsoft.Json.JsonProperty("claimAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ClaimAmount
        {
            get { return _claimAmount; }
            set 
            {
                if (_claimAmount != value)
                {
                    _claimAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The amount claimed by the employee, which is expressed in the currency of the expense claim.</summary>
        [Newtonsoft.Json.JsonProperty("amountInClaimCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInClaimCurr
        {
            get { return _amountInClaimCurr; }
            set 
            {
                if (_amountInClaimCurr != value)
                {
                    _amountInClaimCurr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project or customer contract associated with the expense claim, if the work performed was for a project or contract. Project Task The task associated with the contract or project.</summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectIdDescriptionDto Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The task associated with the contract or project.</summary>
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTaskIdDescriptionDto ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The expense account to which the system should record the part of the expense to be paid back to the employee.</summary>
        [Newtonsoft.Json.JsonProperty("expenseAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto ExpenseAccount
        {
            get { return _expenseAccount; }
            set 
            {
                if (_expenseAccount != value)
                {
                    _expenseAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The corresponding subaccount the system uses to record the part of the expense to be paid back to the employee.</summary>
        [Newtonsoft.Json.JsonProperty("expenseSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto ExpenseSubaccount
        {
            get { return _expenseSubaccount; }
            set 
            {
                if (_expenseSubaccount != value)
                {
                    _expenseSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The branch that will reimburse the expenses to the employee.</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The tax category associated with the expense item.</summary>
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxCategoryNumberDescriptionDto TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The sales account to which the system should record the part of the amount to charge the customer for. This is applicable only when a customer has been specified.</summary>
        [Newtonsoft.Json.JsonProperty("salesAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto SalesAccount
        {
            get { return _salesAccount; }
            set 
            {
                if (_salesAccount != value)
                {
                    _salesAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The corresponding subaccount the system uses to record the amount to charge the customer for. This is applicable only when a customer has been specified.</summary>
        [Newtonsoft.Json.JsonProperty("salesSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto SalesSubaccount
        {
            get { return _salesSubaccount; }
            set 
            {
                if (_salesSubaccount != value)
                {
                    _salesSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The part of the total amount that will not be paid back to the employee. The percentage depends on the company policy.</summary>
        [Newtonsoft.Json.JsonProperty("employeePart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EmployeePart
        {
            get { return _employeePart; }
            set 
            {
                if (_employeePart != value)
                {
                    _employeePart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the customer associated with the expense.</summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the customer location associated with the expense.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The reference number of the AR document.</summary>
        [Newtonsoft.Json.JsonProperty("arReferenceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArReferenceNbr
        {
            get { return _arReferenceNbr; }
            set 
            {
                if (_arReferenceNbr != value)
                {
                    _arReferenceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The approval status, which indicates whether the detail row requires approval and, if it does, what the current state of approval is.</summary>
        [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseClaimDetailDtoApprovalStatus? ApprovalStatus
        {
            get { return _approvalStatus; }
            set 
            {
                if (_approvalStatus != value)
                {
                    _approvalStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The approval status text suitable for display</summary>
        [Newtonsoft.Json.JsonProperty("approvalStatusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovalStatusText
        {
            get { return _approvalStatusText; }
            set 
            {
                if (_approvalStatusText != value)
                {
                    _approvalStatusText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the person authorized to approve the activity, if approval is required. This is either the approver of the project task or, if no approver is assigned to the project task, the project manager.</summary>
        [Newtonsoft.Json.JsonProperty("approver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Approver
        {
            get { return _approver; }
            set 
            {
                if (_approver != value)
                {
                    _approver = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expense claim detail line attachtments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseClaimDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseClaimDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseReceiptQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _dateCondition;
        private string _inventory;
        private string _project;
        private string _claimedBy;
        private string _projectTask;
        private bool? _invoiceable;
        private ExpenseReceiptQueryParametersStatus? _status;
        private string _customer;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateCondition
        {
            get { return _dateCondition; }
            set 
            {
                if (_dateCondition != value)
                {
                    _dateCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("claimedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimedBy
        {
            get { return _claimedBy; }
            set 
            {
                if (_claimedBy != value)
                {
                    _claimedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseReceiptQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseReceiptQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseReceiptQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Expense Receipt in ExpenseReceiptController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseReceiptDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalId;
        private string _receiptId;
        private System.DateTimeOffset? _date;
        private CurrencyIdDescriptionDto _currency;
        private string _refNbr;
        private InventoryNumberDescriptionDto _inventory;
        private string _description;
        private string _uom;
        private double? _quantity;
        private double? _unitCost;
        private double? _totalAmount;
        private double? _employeePart;
        private double? _claimAmount;
        private ExpenseReceiptDtoStatus? _status;
        private EmployeeDto _claimedBy;
        private BranchNumberDto _branch;
        private ExpenseClaimNumberDescriptionDto _expenseClaim;
        private bool? _invoiceable;
        private ProjectIdDescriptionDto _project;
        private ProjectTaskIdDescriptionDto _projectTask;
        private CustomerNumberDto _customer;
        private LocationNameDescriptionDto _location;
        private AccountNumberTypeDescriptionDto _expenseAccount;
        private SubAccountDescriptionDto _expenseSub;
        private AccountNumberTypeDescriptionDto _salesAccount;
        private SubAccountDescriptionDto _salesSub;
        private TaxCategoryNumberDescriptionDto _taxCategory;
        private AttachmentDto _image;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiptId
        {
            get { return _receiptId; }
            set 
            {
                if (_receiptId != value)
                {
                    _receiptId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyIdDescriptionDto Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employeePart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EmployeePart
        {
            get { return _employeePart; }
            set 
            {
                if (_employeePart != value)
                {
                    _employeePart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("claimAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ClaimAmount
        {
            get { return _claimAmount; }
            set 
            {
                if (_claimAmount != value)
                {
                    _claimAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseReceiptDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("claimedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeDto ClaimedBy
        {
            get { return _claimedBy; }
            set 
            {
                if (_claimedBy != value)
                {
                    _claimedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpenseClaimNumberDescriptionDto ExpenseClaim
        {
            get { return _expenseClaim; }
            set 
            {
                if (_expenseClaim != value)
                {
                    _expenseClaim = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectIdDescriptionDto Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTaskIdDescriptionDto ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto ExpenseAccount
        {
            get { return _expenseAccount; }
            set 
            {
                if (_expenseAccount != value)
                {
                    _expenseAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto ExpenseSub
        {
            get { return _expenseSub; }
            set 
            {
                if (_expenseSub != value)
                {
                    _expenseSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto SalesAccount
        {
            get { return _salesAccount; }
            set 
            {
                if (_salesAccount != value)
                {
                    _salesAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto SalesSub
        {
            get { return _salesSub; }
            set 
            {
                if (_salesSub != value)
                {
                    _salesSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxCategoryNumberDescriptionDto TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttachmentDto Image
        {
            get { return _image; }
            set 
            {
                if (_image != value)
                {
                    _image = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseReceiptDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseReceiptDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CurrencyIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CurrencyIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseClaimNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseClaimNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseClaimNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseClaimUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _description;
        private DtoValueOfString _claimedBy;
        private DtoValueOfString _customer;
        private ExpenseClaimUpdateDtoCustomerUpdateAnswer? _customerUpdateAnswer;
        private DtoValueOfString _location;
        private System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDetailUpdateDto> _details;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        /// <summary>The date when the claim was entered.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A description of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The employee who is claiming the expenses. If the claim is released, an Accounts Payable bill will be generated to this employee.</summary>
        [Newtonsoft.Json.JsonProperty("claimedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ClaimedBy
        {
            get { return _claimedBy; }
            set 
            {
                if (_claimedBy != value)
                {
                    _claimedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The applicable customer.</summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If the customer is updated the claim details customer information can be updated using the provided answer. By default 'SelectedCustomer' is selected.</summary>
        [Newtonsoft.Json.JsonProperty("customerUpdateAnswer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseClaimUpdateDtoCustomerUpdateAnswer? CustomerUpdateAnswer
        {
            get { return _customerUpdateAnswer; }
            set 
            {
                if (_customerUpdateAnswer != value)
                {
                    _customerUpdateAnswer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company location associated with the claim.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expense Claim detail information</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ExpenseClaimDetailUpdateDto> Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseClaimUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseClaimUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseClaimDetailUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private ExpenseClaimDetailUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _claimDetailId;
        private DtoValueOfDateTime _date;
        private DtoValueOfString _expenseItem;
        private DtoValueOfString _description;
        private DtoValueOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfDecimal _unitCost;
        private DtoValueOfBoolean _invoiceable;
        private DtoValueOfString _project;
        private DtoValueOfString _projectTask;
        private DtoValueOfString _expenseAccount;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _expenseSubaccount;
        private DtoValueOfString _branch;
        private DtoValueOfString _taxCategory;
        private DtoValueOfString _refNbr;
        private DtoValueOfDecimal _employeePart;
        private DtoValueOfString _customer;
        private DtoValueOfString _location;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpenseClaimDetailUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Identifies the expense claim detail line to update</summary>
        [Newtonsoft.Json.JsonProperty("claimDetailId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 ClaimDetailId
        {
            get { return _claimDetailId; }
            set 
            {
                if (_claimDetailId != value)
                {
                    _claimDetailId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the expense was incurred.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The expense identifier, if an expense of this type is listed as an inventory nonstock item.</summary>
        [Newtonsoft.Json.JsonProperty("expenseItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExpenseItem
        {
            get { return _expenseItem; }
            set 
            {
                if (_expenseItem != value)
                {
                    _expenseItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A description of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The quantity of this expense item.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unit of measure in which the quantity is shown.</summary>
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The cost of a unit of the item.</summary>
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The currency of the expense receipt. However, if you enter a claim line directly, the currency value is read-only and matching the claim currency.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project or customer contract associated with the expense claim, if the work performed was for a project or contract. Project Task The task associated with the contract or project.</summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The task associated with the contract or project.</summary>
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The expense account to which the system should record the part of the expense to be paid back to the employee.</summary>
        [Newtonsoft.Json.JsonProperty("expenseAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExpenseAccount
        {
            get { return _expenseAccount; }
            set 
            {
                if (_expenseAccount != value)
                {
                    _expenseAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The corresponding subaccount the system uses to record the part of the expense to be paid back to the employee.</summary>
        [Newtonsoft.Json.JsonProperty("expenseSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> ExpenseSubaccount
        {
            get { return _expenseSubaccount; }
            set 
            {
                if (_expenseSubaccount != value)
                {
                    _expenseSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The branch that will reimburse the expenses to the employee.</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The tax category associated with the expense item.</summary>
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The part of the total amount that will not be paid back to the employee. The percentage depends on the company policy.</summary>
        [Newtonsoft.Json.JsonProperty("employeePart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal EmployeePart
        {
            get { return _employeePart; }
            set 
            {
                if (_employeePart != value)
                {
                    _employeePart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the customer associated with the expense.</summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The identifier of the customer location associated with the expense.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseClaimDetailUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseClaimDetailUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Expense Receipt in ExpenseReceiptController. Used to post data to server.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExpenseReceiptUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _currency;
        private DtoValueOfString _refNbr;
        private DtoValueOfString _inventory;
        private DtoValueOfString _description;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _totalAmount;
        private DtoValueOfNullableOfDecimal _employeePart;
        private DtoValueOfString _claimedBy;
        private DtoValueOfString _branch;
        private DtoValueOfString _expenseClaim;
        private DtoValueOfNullableOfBoolean _invoiceable;
        private DtoValueOfString _project;
        private DtoValueOfString _projectTask;
        private DtoValueOfString _customer;
        private DtoValueOfString _location;
        private DtoValueOfString _expenseAccount;
        private DtoValueOfString _expenseSub;
        private DtoValueOfString _salesAccount;
        private DtoValueOfString _salesSub;
        private DtoValueOfString _taxCategory;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employeePart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal EmployeePart
        {
            get { return _employeePart; }
            set 
            {
                if (_employeePart != value)
                {
                    _employeePart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("claimedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ClaimedBy
        {
            get { return _claimedBy; }
            set 
            {
                if (_claimedBy != value)
                {
                    _claimedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExpenseClaim
        {
            get { return _expenseClaim; }
            set 
            {
                if (_expenseClaim != value)
                {
                    _expenseClaim = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExpenseAccount
        {
            get { return _expenseAccount; }
            set 
            {
                if (_expenseAccount != value)
                {
                    _expenseAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenseSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExpenseSub
        {
            get { return _expenseSub; }
            set 
            {
                if (_expenseSub != value)
                {
                    _expenseSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SalesAccount
        {
            get { return _salesAccount; }
            set 
            {
                if (_salesAccount != value)
                {
                    _salesAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SalesSub
        {
            get { return _salesSub; }
            set 
            {
                if (_salesSub != value)
                {
                    _salesSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExpenseReceiptUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseReceiptUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class FinancialPeriodQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FinancialPeriodQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialPeriodQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Financial Period in FinancialPeriodController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class FinancialPeriodDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _year;
        private string _period;
        private System.DateTimeOffset? _startDate;
        private System.DateTimeOffset? _endDate;
        private string _description;
        private bool? _active;
        private bool? _closedInSupplierLedger;
        private bool? _closedInCustomerLedger;
        private bool? _closedInInventoryManagement;
        private bool? _closedInGeneralLedger;
        private bool? _closedInCashManagement;
        private bool? _closedInFixedAssets;
    
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year
        {
            get { return _year; }
            set 
            {
                if (_year != value)
                {
                    _year = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period
        {
            get { return _period; }
            set 
            {
                if (_period != value)
                {
                    _period = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate
        {
            get { return _endDate; }
            set 
            {
                if (_endDate != value)
                {
                    _endDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedInSupplierLedger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClosedInSupplierLedger
        {
            get { return _closedInSupplierLedger; }
            set 
            {
                if (_closedInSupplierLedger != value)
                {
                    _closedInSupplierLedger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedInCustomerLedger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClosedInCustomerLedger
        {
            get { return _closedInCustomerLedger; }
            set 
            {
                if (_closedInCustomerLedger != value)
                {
                    _closedInCustomerLedger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedInInventoryManagement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClosedInInventoryManagement
        {
            get { return _closedInInventoryManagement; }
            set 
            {
                if (_closedInInventoryManagement != value)
                {
                    _closedInInventoryManagement = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedInGeneralLedger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClosedInGeneralLedger
        {
            get { return _closedInGeneralLedger; }
            set 
            {
                if (_closedInGeneralLedger != value)
                {
                    _closedInGeneralLedger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedInCashManagement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClosedInCashManagement
        {
            get { return _closedInCashManagement; }
            set 
            {
                if (_closedInCashManagement != value)
                {
                    _closedInCashManagement = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedInFixedAssets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClosedInFixedAssets
        {
            get { return _closedInFixedAssets; }
            set 
            {
                if (_closedInFixedAssets != value)
                {
                    _closedInFixedAssets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FinancialPeriodDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialPeriodDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class GeneralLedgerBalanceQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _periodId;
        private string _periodIdCondition;
        private string _orderBy;
        private string _accountId;
        private int? _yearClosed;
        private GeneralLedgerBalanceQueryParametersBalanceType? _balanceType;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PeriodId
        {
            get { return _periodId; }
            set 
            {
                if (_periodId != value)
                {
                    _periodId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodIdCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PeriodIdCondition
        {
            get { return _periodIdCondition; }
            set 
            {
                if (_periodIdCondition != value)
                {
                    _periodIdCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Order Options: AccountId, FinancialPeriod</summary>
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("yearClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? YearClosed
        {
            get { return _yearClosed; }
            set 
            {
                if (_yearClosed != value)
                {
                    _yearClosed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeneralLedgerBalanceQueryParametersBalanceType? BalanceType
        {
            get { return _balanceType; }
            set 
            {
                if (_balanceType != value)
                {
                    _balanceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeneralLedgerBalanceQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralLedgerBalanceQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a General Ledger Balance in GeneralLedgerBalanceController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class GeneralLedgerBalanceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private BranchNumberDto _branch;
        private LedgerDescriptionDto _ledger;
        private GeneralLedgerBalanceDtoBalanceType? _balanceType;
        private string _financialPeriod;
        private AccountNumberDescriptionDto _account;
        private string _subaccountId;
        private string _currencyId;
        private double? _periodToDateDebit;
        private double? _periodToDateCredit;
        private double? _beginningBalance;
        private double? _yearToDateBalance;
        private double? _periodToDateDebitInCurrency;
        private double? _periodToDateCreditInCurrency;
        private double? _beginningBalanceInCurrency;
        private double? _yearToDateBalanceInCurrency;
        private bool? _yearClosed;
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerDescriptionDto Ledger
        {
            get { return _ledger; }
            set 
            {
                if (_ledger != value)
                {
                    _ledger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeneralLedgerBalanceDtoBalanceType? BalanceType
        {
            get { return _balanceType; }
            set 
            {
                if (_balanceType != value)
                {
                    _balanceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDescriptionDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubaccountId
        {
            get { return _subaccountId; }
            set 
            {
                if (_subaccountId != value)
                {
                    _subaccountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodToDateDebit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodToDateDebit
        {
            get { return _periodToDateDebit; }
            set 
            {
                if (_periodToDateDebit != value)
                {
                    _periodToDateDebit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodToDateCredit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodToDateCredit
        {
            get { return _periodToDateCredit; }
            set 
            {
                if (_periodToDateCredit != value)
                {
                    _periodToDateCredit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("beginningBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BeginningBalance
        {
            get { return _beginningBalance; }
            set 
            {
                if (_beginningBalance != value)
                {
                    _beginningBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("yearToDateBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YearToDateBalance
        {
            get { return _yearToDateBalance; }
            set 
            {
                if (_yearToDateBalance != value)
                {
                    _yearToDateBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodToDateDebitInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodToDateDebitInCurrency
        {
            get { return _periodToDateDebitInCurrency; }
            set 
            {
                if (_periodToDateDebitInCurrency != value)
                {
                    _periodToDateDebitInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodToDateCreditInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodToDateCreditInCurrency
        {
            get { return _periodToDateCreditInCurrency; }
            set 
            {
                if (_periodToDateCreditInCurrency != value)
                {
                    _periodToDateCreditInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("beginningBalanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BeginningBalanceInCurrency
        {
            get { return _beginningBalanceInCurrency; }
            set 
            {
                if (_beginningBalanceInCurrency != value)
                {
                    _beginningBalanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("yearToDateBalanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YearToDateBalanceInCurrency
        {
            get { return _yearToDateBalanceInCurrency; }
            set 
            {
                if (_yearToDateBalanceInCurrency != value)
                {
                    _yearToDateBalanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("yearClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? YearClosed
        {
            get { return _yearClosed; }
            set 
            {
                if (_yearClosed != value)
                {
                    _yearClosed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeneralLedgerBalanceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralLedgerBalanceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LedgerDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LedgerDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LedgerDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AccountNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private AccountNumberDescriptionDtoType? _type;
        private string _externalCode1;
        private string _externalCode2;
        private ExternalCodeNumberDescriptionDto _externalCode1Info;
        private ExternalCodeNumberDescriptionDto _externalCode2Info;
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountNumberDescriptionDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ExternalCode1 is deprecated, please use ExternalCode1Info instead.</summary>
        [Newtonsoft.Json.JsonProperty("externalCode1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode1
        {
            get { return _externalCode1; }
            set 
            {
                if (_externalCode1 != value)
                {
                    _externalCode1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ExternalCode2 is deprecated, please use ExternalCode2Info instead.</summary>
        [Newtonsoft.Json.JsonProperty("externalCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCode2
        {
            get { return _externalCode2; }
            set 
            {
                if (_externalCode2 != value)
                {
                    _externalCode2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode1Info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalCodeNumberDescriptionDto ExternalCode1Info
        {
            get { return _externalCode1Info; }
            set 
            {
                if (_externalCode1Info != value)
                {
                    _externalCode1Info = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalCode2Info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalCodeNumberDescriptionDto ExternalCode2Info
        {
            get { return _externalCode2Info; }
            set 
            {
                if (_externalCode2Info != value)
                {
                    _externalCode2Info = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AccountNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ExternalCodeNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExternalCodeNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalCodeNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class GeneralLedgerTransactionsQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _branch;
        private string _ledger;
        private string _fromPeriod;
        private string _toPeriod;
        private string _account;
        private string _subaccountId;
        private string _fromDate;
        private string _toDate;
        private bool? _includeUnposted;
        private bool? _includeUnreleased;
        private int? _skipRecords;
        private int? _numberToRead;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory</summary>
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ledger
        {
            get { return _ledger; }
            set 
            {
                if (_ledger != value)
                {
                    _ledger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory</summary>
        [Newtonsoft.Json.JsonProperty("fromPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromPeriod
        {
            get { return _fromPeriod; }
            set 
            {
                if (_fromPeriod != value)
                {
                    _fromPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory</summary>
        [Newtonsoft.Json.JsonProperty("toPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToPeriod
        {
            get { return _toPeriod; }
            set 
            {
                if (_toPeriod != value)
                {
                    _toPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubaccountId
        {
            get { return _subaccountId; }
            set 
            {
                if (_subaccountId != value)
                {
                    _subaccountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromDate
        {
            get { return _fromDate; }
            set 
            {
                if (_fromDate != value)
                {
                    _fromDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("toDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToDate
        {
            get { return _toDate; }
            set 
            {
                if (_toDate != value)
                {
                    _toDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeUnposted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeUnposted
        {
            get { return _includeUnposted; }
            set 
            {
                if (_includeUnposted != value)
                {
                    _includeUnposted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeUnreleased", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeUnreleased
        {
            get { return _includeUnreleased; }
            set 
            {
                if (_includeUnreleased != value)
                {
                    _includeUnreleased = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeneralLedgerTransactionsQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralLedgerTransactionsQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class GeneralLedgerTransactionDetailsDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private string _module;
        private string _batchNumber;
        private System.DateTimeOffset? _tranDate;
        private string _period;
        private string _description;
        private string _refNumber;
        private BranchNumberDto _branch;
        private AccountNumberDescriptionDto _account;
        private LedgerDescriptionDto _ledger;
        private string _subaccount;
        private double? _begBalance;
        private double? _debitAmount;
        private double? _creditAmount;
        private double? _endingBalance;
        private string _currency;
        private double? _currBegBalance;
        private double? _currDebitAmount;
        private double? _currCreditAmount;
        private double? _currEndingBalance;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Module
        {
            get { return _module; }
            set 
            {
                if (_module != value)
                {
                    _module = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tranDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TranDate
        {
            get { return _tranDate; }
            set 
            {
                if (_tranDate != value)
                {
                    _tranDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period
        {
            get { return _period; }
            set 
            {
                if (_period != value)
                {
                    _period = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNumber
        {
            get { return _refNumber; }
            set 
            {
                if (_refNumber != value)
                {
                    _refNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDescriptionDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerDescriptionDto Ledger
        {
            get { return _ledger; }
            set 
            {
                if (_ledger != value)
                {
                    _ledger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("begBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BegBalance
        {
            get { return _begBalance; }
            set 
            {
                if (_begBalance != value)
                {
                    _begBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("debitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DebitAmount
        {
            get { return _debitAmount; }
            set 
            {
                if (_debitAmount != value)
                {
                    _debitAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditAmount
        {
            get { return _creditAmount; }
            set 
            {
                if (_creditAmount != value)
                {
                    _creditAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("endingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EndingBalance
        {
            get { return _endingBalance; }
            set 
            {
                if (_endingBalance != value)
                {
                    _endingBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currBegBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrBegBalance
        {
            get { return _currBegBalance; }
            set 
            {
                if (_currBegBalance != value)
                {
                    _currBegBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currDebitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrDebitAmount
        {
            get { return _currDebitAmount; }
            set 
            {
                if (_currDebitAmount != value)
                {
                    _currDebitAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currCreditAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrCreditAmount
        {
            get { return _currCreditAmount; }
            set 
            {
                if (_currCreditAmount != value)
                {
                    _currCreditAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currEndingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrEndingBalance
        {
            get { return _currEndingBalance; }
            set 
            {
                if (_currEndingBalance != value)
                {
                    _currEndingBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeneralLedgerTransactionDetailsDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralLedgerTransactionDetailsDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ItemClassDto : System.ComponentModel.INotifyPropertyChanged
    {
        private ItemClassDtoType? _type;
        private System.Collections.ObjectModel.ObservableCollection<ClassAttributeDto> _attributes;
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemClassDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ClassAttributeDto> Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ItemClassDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemClassDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PostingClassDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostingClassDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostingClassDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _inventoryId;
        private string _inventoryNumber;
        private InventoryDtoStatus? _status;
        private InventoryDtoType? _type;
        private string _description;
        private ItemClassDto _itemClass;
        private PostingClassDto _postingClass;
        private VatCodeDto _vatCode;
        private double? _defaultPrice;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<InventoryCrossReferenceDto> _crossReferences;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private System.Collections.ObjectModel.ObservableCollection<AttributeIdValueDto> _attributes;
        private System.Collections.ObjectModel.ObservableCollection<WarehouseDetailDto> _warehouseDetails;
    
        /// <summary>The unique internal identifier of the  item as is stored in the database</summary>
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique alphanumeric identifier of the  item that is used in UI</summary>
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The item class to which the item is assigned. Selecting a class provides default settings for the item.</summary>
        [Newtonsoft.Json.JsonProperty("itemClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemClassDto ItemClass
        {
            get { return _itemClass; }
            set 
            {
                if (_itemClass != value)
                {
                    _itemClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The posting class of the item, which by default is the posting class assigned to the item class.</summary>
        [Newtonsoft.Json.JsonProperty("postingClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostingClassDto PostingClass
        {
            get { return _postingClass; }
            set 
            {
                if (_postingClass != value)
                {
                    _postingClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The vat category of the item, which by default is the vat category associated with the item class.</summary>
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatCodeDto VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The price of the item. This price is used as the default price, if there are no other prices</summary>
        [Newtonsoft.Json.JsonProperty("defaultPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DefaultPrice
        {
            get { return _defaultPrice; }
            set 
            {
                if (_defaultPrice != value)
                {
                    _defaultPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("crossReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryCrossReferenceDto> CrossReferences
        {
            get { return _crossReferences; }
            set 
            {
                if (_crossReferences != value)
                {
                    _crossReferences = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttributeIdValueDto> Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouseDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WarehouseDetailDto> WarehouseDetails
        {
            get { return _warehouseDetails; }
            set 
            {
                if (_warehouseDetails != value)
                {
                    _warehouseDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryCrossReferenceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private InventoryCrossReferenceDtoAlternateType? _alternateType;
        private BAccountDescriptionDto _bAccount;
        private string _alternateID;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("alternateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryCrossReferenceDtoAlternateType? AlternateType
        {
            get { return _alternateType; }
            set 
            {
                if (_alternateType != value)
                {
                    _alternateType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BAccountDescriptionDto BAccount
        {
            get { return _bAccount; }
            set 
            {
                if (_bAccount != value)
                {
                    _bAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("alternateID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateID
        {
            get { return _alternateID; }
            set 
            {
                if (_alternateID != value)
                {
                    _alternateID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryCrossReferenceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryCrossReferenceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a WarehouseDetail part of InventoryItem in InventoryItemController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WarehouseDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _isDefault;
        private string _warehouse;
        private double? _quantityOnHand;
    
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault
        {
            get { return _isDefault; }
            set 
            {
                if (_isDefault != value)
                {
                    _isDefault = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantityOnHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QuantityOnHand
        {
            get { return _quantityOnHand; }
            set 
            {
                if (_quantityOnHand != value)
                {
                    _quantityOnHand = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WarehouseDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarehouseDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class BAccountDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalId;
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BAccountDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BAccountDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private string _alternateID;
        private int? _salesCategory;
        private string _attributes;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("alternateID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateID
        {
            get { return _alternateID; }
            set 
            {
                if (_alternateID != value)
                {
                    _alternateID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SalesCategory
        {
            get { return _salesCategory; }
            set 
            {
                if (_salesCategory != value)
                {
                    _salesCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfInventoryStatus _status;
        private DtoValueOfInventoryType _type;
        private DtoValueOfString _description;
        private DtoValueOfString _itemClass;
        private DtoValueOfString _postingClass;
        private DtoValueOfString _vatCode;
        private DtoValueOfNullableOfDecimal _defaultPrice;
        private System.Collections.ObjectModel.ObservableCollection<AttributeLineUpdateDto> _attributeLines;
    
        /// <summary>Mandatory, The unique alphanumeric identifier of the  item that is used in UI.</summary>
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInventoryStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInventoryType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory, the item class to which the item is assigned. Selecting a class provides default settings for the item.</summary>
        [Newtonsoft.Json.JsonProperty("itemClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ItemClass
        {
            get { return _itemClass; }
            set 
            {
                if (_itemClass != value)
                {
                    _itemClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The posting class of the item, which by default is the posting class assigned to the item class.</summary>
        [Newtonsoft.Json.JsonProperty("postingClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostingClass
        {
            get { return _postingClass; }
            set 
            {
                if (_postingClass != value)
                {
                    _postingClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The vat category of the item, which by default is the vat category associated with the item class.</summary>
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The price of the item. This price is used as the default price, if there are no other prices set.</summary>
        [Newtonsoft.Json.JsonProperty("defaultPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DefaultPrice
        {
            get { return _defaultPrice; }
            set 
            {
                if (_defaultPrice != value)
                {
                    _defaultPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributeLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttributeLineUpdateDto> AttributeLines
        {
            get { return _attributeLines; }
            set 
            {
                if (_attributeLines != value)
                {
                    _attributeLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfInventoryStatus : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfInventoryStatusValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfInventoryStatusValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfInventoryStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfInventoryStatus>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfInventoryType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfInventoryTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfInventoryTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfInventoryType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfInventoryType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryAdjustmentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _totalCost;
        private double? _controlCost;
        private System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentLineDto> _adjusmentLines;
        private string _referenceNumber;
        private InventoryAdjustmentDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _date;
        private string _postPeriod;
        private string _externalReference;
        private string _description;
        private double? _totalQuantity;
        private double? _controlQuantity;
        private string _batchNumber;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        /// <summary>The total cost of the inventory items received. The system automatically calculates this value as a sum of all extended cost values of all received inventory items listed in the??Transaction Details??tab of this form.</summary>
        [Newtonsoft.Json.JsonProperty("totalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalCost
        {
            get { return _totalCost; }
            set 
            {
                if (_totalCost != value)
                {
                    _totalCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total cost of the inventory items to be received.??Control Cost??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. The user enters this value manually to confirm the total cost as calculated automatically for the document. If the??Control Cost??and??Total Cost??values do not match, the system generates a warning message and the document cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlCost
        {
            get { return _controlCost; }
            set 
            {
                if (_controlCost != value)
                {
                    _controlCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory adjusment lines</summary>
        [Newtonsoft.Json.JsonProperty("adjusmentLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentLineDto> AdjusmentLines
        {
            get { return _adjusmentLines; }
            set 
            {
                if (_adjusmentLines != value)
                {
                    _adjusmentLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current status of the receipt. The following options are available: 
        ///             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
        ///             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
        ///             Released: The receipt/issue has been released and cannot be edited or deleted.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryAdjustmentDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total quantity of inventory items, which the system calculates automatically, for the document.</summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalQuantity
        {
            get { return _totalQuantity; }
            set 
            {
                if (_totalQuantity != value)
                {
                    _totalQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The reference number of the batch generated for the receipt. Click the number to open the??Journal Transactions??(GL.30.10.00) form and view the details of the transactions.</summary>
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the document was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryAdjustmentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryAdjustmentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryAdjustmentLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private WarehouseIdDescriptionDto _warehouse;
        private double? _unitCost;
        private double? _extCost;
        private string _receiptNumber;
        private int? _lineNumber;
        private InventoryNumberDescriptionDto _inventoryItem;
        private LocationDto _location;
        private double? _quantity;
        private string _uom;
        private ReasonCodeDto _reasonCode;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiptNumber
        {
            get { return _receiptNumber; }
            set 
            {
                if (_receiptNumber != value)
                {
                    _receiptNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto InventoryItem
        {
            get { return _inventoryItem; }
            set 
            {
                if (_inventoryItem != value)
                {
                    _inventoryItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonCodeDto ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryAdjustmentLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryAdjustmentLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReasonCodeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReasonCodeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReasonCodeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryDocumentQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryDocumentQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryDocumentQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryAdjustmentUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfDecimal _controlCost;
        private System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentLineUpdateDto> _adjustmentLines;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _externalReference;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDecimal _controlQuantity;
        private DtoValueOfString _branchNumber;
    
        /// <summary>The manually entered summary cost for all specified inventory adjustment items.</summary>
        [Newtonsoft.Json.JsonProperty("controlCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlCost
        {
            get { return _controlCost; }
            set 
            {
                if (_controlCost != value)
                {
                    _controlCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory adjustment lines</summary>
        [Newtonsoft.Json.JsonProperty("adjustmentLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryAdjustmentLineUpdateDto> AdjustmentLines
        {
            get { return _adjustmentLines; }
            set 
            {
                if (_adjustmentLines != value)
                {
                    _adjustmentLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryAdjustmentUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryAdjustmentUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryAdjustmentLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _warehouseId;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _extCost;
        private DtoValueOfString _receiptNumber;
        private InventoryAdjustmentLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfString _reasonCode;
        private DtoValueOfString _description;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReceiptNumber
        {
            get { return _receiptNumber; }
            set 
            {
                if (_receiptNumber != value)
                {
                    _receiptNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryAdjustmentLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryAdjustmentLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryAdjustmentLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReleaseInventoryDocumentActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private ReleaseInventoryDocumentActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReleaseInventoryDocumentActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleaseInventoryDocumentActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseInventoryDocumentActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryIssueDto : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _totalAmount;
        private double? _controlAmount;
        private System.Collections.ObjectModel.ObservableCollection<InventoryIssueLineDto> _issueLines;
        private string _referenceNumber;
        private InventoryIssueDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _date;
        private string _postPeriod;
        private string _externalReference;
        private string _description;
        private double? _totalQuantity;
        private double? _controlQuantity;
        private string _batchNumber;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        /// <summary>The total amount, calculated as a sum of amounts for all inventory issue operations included in this issue document.</summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered summary amount for all specified inventory items.??Control Amount??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Amount??and??Total Amount??values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlAmount
        {
            get { return _controlAmount; }
            set 
            {
                if (_controlAmount != value)
                {
                    _controlAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory issue lines</summary>
        [Newtonsoft.Json.JsonProperty("issueLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryIssueLineDto> IssueLines
        {
            get { return _issueLines; }
            set 
            {
                if (_issueLines != value)
                {
                    _issueLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current status of the receipt. The following options are available: 
        ///             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
        ///             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
        ///             Released: The receipt/issue has been released and cannot be edited or deleted.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryIssueDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total quantity of inventory items, which the system calculates automatically, for the document.</summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalQuantity
        {
            get { return _totalQuantity; }
            set 
            {
                if (_totalQuantity != value)
                {
                    _totalQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The reference number of the batch generated for the receipt. Click the number to open the??Journal Transactions??(GL.30.10.00) form and view the details of the transactions.</summary>
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the document was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryIssueDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryIssueDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryIssueLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private InventoryIssueLineDtoTransactionType? _transactionType;
        private WarehouseIdDescriptionDto _warehouse;
        private double? _unitCost;
        private double? _extCost;
        private double? _unitPrice;
        private double? _extPrice;
        private int? _lineNumber;
        private InventoryNumberDescriptionDto _inventoryItem;
        private LocationDto _location;
        private double? _quantity;
        private string _uom;
        private ReasonCodeDto _reasonCode;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryIssueLineDtoTransactionType? TransactionType
        {
            get { return _transactionType; }
            set 
            {
                if (_transactionType != value)
                {
                    _transactionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtPrice
        {
            get { return _extPrice; }
            set 
            {
                if (_extPrice != value)
                {
                    _extPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto InventoryItem
        {
            get { return _inventoryItem; }
            set 
            {
                if (_inventoryItem != value)
                {
                    _inventoryItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonCodeDto ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryIssueLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryIssueLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryIssueUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfDecimal _controlAmount;
        private System.Collections.ObjectModel.ObservableCollection<InventoryIssueLineUpdateDto> _issueLines;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _externalReference;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDecimal _controlQuantity;
        private DtoValueOfString _branchNumber;
    
        /// <summary>The manually entered summary amount for all specified inventory items.??Control Amount??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Amount??and??Total Amount??values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlAmount
        {
            get { return _controlAmount; }
            set 
            {
                if (_controlAmount != value)
                {
                    _controlAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory issue lines</summary>
        [Newtonsoft.Json.JsonProperty("issueLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryIssueLineUpdateDto> IssueLines
        {
            get { return _issueLines; }
            set 
            {
                if (_issueLines != value)
                {
                    _issueLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryIssueUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryIssueUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryIssueLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _warehouseId;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _extCost;
        private DtoValueOfNullableOfDecimal _unitPrice;
        private DtoValueOfNullableOfDecimal _extPrice;
        private DtoValueOfNullableOfInventoryTransactionType _tranType;
        private InventoryIssueLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfString _reasonCode;
        private DtoValueOfString _description;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExtPrice
        {
            get { return _extPrice; }
            set 
            {
                if (_extPrice != value)
                {
                    _extPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInventoryTransactionType TranType
        {
            get { return _tranType; }
            set 
            {
                if (_tranType != value)
                {
                    _tranType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryIssueLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryIssueLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryIssueLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfInventoryTransactionType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfInventoryTransactionTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfInventoryTransactionTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfInventoryTransactionType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfInventoryTransactionType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryReceiptDto : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _totalCost;
        private double? _controlCost;
        private string _transferNumber;
        private System.Collections.ObjectModel.ObservableCollection<InventoryReceiptLineDto> _receiptLines;
        private string _referenceNumber;
        private InventoryReceiptDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _date;
        private string _postPeriod;
        private string _externalReference;
        private string _description;
        private double? _totalQuantity;
        private double? _controlQuantity;
        private string _batchNumber;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        /// <summary>The total cost of the inventory items received. The system automatically calculates this value as a sum of all extended cost values of all received inventory items listed in the??Transaction Details??tab of this form.</summary>
        [Newtonsoft.Json.JsonProperty("totalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalCost
        {
            get { return _totalCost; }
            set 
            {
                if (_totalCost != value)
                {
                    _totalCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total cost of the inventory items to be received.??Control Cost??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. The user enters this value manually to confirm the total cost as calculated automatically for the document. If the??Control Cost??and??Total Cost??values do not match, the system generates a warning message and the document cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlCost
        {
            get { return _controlCost; }
            set 
            {
                if (_controlCost != value)
                {
                    _controlCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The transfer number for the receipt operation. (Enter this number only if the two-step transfer operation is performed.)</summary>
        [Newtonsoft.Json.JsonProperty("transferNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferNumber
        {
            get { return _transferNumber; }
            set 
            {
                if (_transferNumber != value)
                {
                    _transferNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory receipt lines</summary>
        [Newtonsoft.Json.JsonProperty("receiptLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryReceiptLineDto> ReceiptLines
        {
            get { return _receiptLines; }
            set 
            {
                if (_receiptLines != value)
                {
                    _receiptLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current status of the receipt. The following options are available: 
        ///             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
        ///             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
        ///             Released: The receipt/issue has been released and cannot be edited or deleted.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryReceiptDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total quantity of inventory items, which the system calculates automatically, for the document.</summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalQuantity
        {
            get { return _totalQuantity; }
            set 
            {
                if (_totalQuantity != value)
                {
                    _totalQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The reference number of the batch generated for the receipt. Click the number to open the??Journal Transactions??(GL.30.10.00) form and view the details of the transactions.</summary>
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the document was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryReceiptDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryReceiptDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryReceiptLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private WarehouseIdDescriptionDto _warehouse;
        private double? _unitCost;
        private double? _extCost;
        private int? _lineNumber;
        private InventoryNumberDescriptionDto _inventoryItem;
        private LocationDto _location;
        private double? _quantity;
        private string _uom;
        private ReasonCodeDto _reasonCode;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto InventoryItem
        {
            get { return _inventoryItem; }
            set 
            {
                if (_inventoryItem != value)
                {
                    _inventoryItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonCodeDto ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryReceiptLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryReceiptLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryReceiptUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _transferNumber;
        private DtoValueOfNullableOfDecimal _controlCost;
        private System.Collections.ObjectModel.ObservableCollection<InventoryReceiptLineUpdateDto> _receiptLines;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _externalReference;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDecimal _controlQuantity;
        private DtoValueOfString _branchNumber;
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("transferNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransferNumber
        {
            get { return _transferNumber; }
            set 
            {
                if (_transferNumber != value)
                {
                    _transferNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered summary amount for all specified inventory receipt items.</summary>
        [Newtonsoft.Json.JsonProperty("controlCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlCost
        {
            get { return _controlCost; }
            set 
            {
                if (_controlCost != value)
                {
                    _controlCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory issue lines</summary>
        [Newtonsoft.Json.JsonProperty("receiptLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryReceiptLineUpdateDto> ReceiptLines
        {
            get { return _receiptLines; }
            set 
            {
                if (_receiptLines != value)
                {
                    _receiptLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryReceiptUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryReceiptUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryReceiptLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _warehouseId;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _extCost;
        private InventoryReceiptLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfString _reasonCode;
        private DtoValueOfString _description;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryReceiptLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryReceiptLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryReceiptLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventorySummaryQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _warehouse;
        private string _location;
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventorySummaryQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventorySummaryQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a InventorySummary in InventorySummaryController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventorySummaryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private InventoryNumberDescriptionDto _inventory;
        private WarehouseIdDescriptionDto _warehouse;
        private LocationIdNameDto _location;
        private double? _available;
        private double? _availableForShipment;
        private double? _notAvailable;
        private double? _soBooked;
        private double? _soAllocated;
        private double? _soShipped;
        private double? _soBackOrdered;
        private double? _inIssues;
        private double? _inReceipts;
        private double? _inTransit;
        private double? _inAssemblyDemand;
        private double? _inAssemblySupply;
        private double? _purchasePrepared;
        private double? _purchaseOrders;
        private double? _poReceipts;
        private double? _expired;
        private double? _onHand;
        private double? _soToPurchase;
        private double? _purchaseForSO;
        private double? _purchaseForSOPrepared;
        private double? _purchaseForSOReceipts;
        private double? _soToDropShip;
        private double? _dropShipForSO;
        private double? _dropShipForSOPrepared;
        private double? _dropShipForSOReceipts;
        private string _baseUnit;
        private double? _estimatedUnitCost;
        private double? _estimatedTotalCost;
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationIdNameDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Available
        {
            get { return _available; }
            set 
            {
                if (_available != value)
                {
                    _available = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("availableForShipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AvailableForShipment
        {
            get { return _availableForShipment; }
            set 
            {
                if (_availableForShipment != value)
                {
                    _availableForShipment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NotAvailable
        {
            get { return _notAvailable; }
            set 
            {
                if (_notAvailable != value)
                {
                    _notAvailable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soBooked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SoBooked
        {
            get { return _soBooked; }
            set 
            {
                if (_soBooked != value)
                {
                    _soBooked = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soAllocated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SoAllocated
        {
            get { return _soAllocated; }
            set 
            {
                if (_soAllocated != value)
                {
                    _soAllocated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soShipped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SoShipped
        {
            get { return _soShipped; }
            set 
            {
                if (_soShipped != value)
                {
                    _soShipped = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soBackOrdered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SoBackOrdered
        {
            get { return _soBackOrdered; }
            set 
            {
                if (_soBackOrdered != value)
                {
                    _soBackOrdered = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inIssues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InIssues
        {
            get { return _inIssues; }
            set 
            {
                if (_inIssues != value)
                {
                    _inIssues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InReceipts
        {
            get { return _inReceipts; }
            set 
            {
                if (_inReceipts != value)
                {
                    _inReceipts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inTransit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InTransit
        {
            get { return _inTransit; }
            set 
            {
                if (_inTransit != value)
                {
                    _inTransit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inAssemblyDemand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InAssemblyDemand
        {
            get { return _inAssemblyDemand; }
            set 
            {
                if (_inAssemblyDemand != value)
                {
                    _inAssemblyDemand = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inAssemblySupply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InAssemblySupply
        {
            get { return _inAssemblySupply; }
            set 
            {
                if (_inAssemblySupply != value)
                {
                    _inAssemblySupply = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchasePrepared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PurchasePrepared
        {
            get { return _purchasePrepared; }
            set 
            {
                if (_purchasePrepared != value)
                {
                    _purchasePrepared = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchaseOrders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PurchaseOrders
        {
            get { return _purchaseOrders; }
            set 
            {
                if (_purchaseOrders != value)
                {
                    _purchaseOrders = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PoReceipts
        {
            get { return _poReceipts; }
            set 
            {
                if (_poReceipts != value)
                {
                    _poReceipts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Expired
        {
            get { return _expired; }
            set 
            {
                if (_expired != value)
                {
                    _expired = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("onHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OnHand
        {
            get { return _onHand; }
            set 
            {
                if (_onHand != value)
                {
                    _onHand = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soToPurchase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SoToPurchase
        {
            get { return _soToPurchase; }
            set 
            {
                if (_soToPurchase != value)
                {
                    _soToPurchase = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchaseForSO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PurchaseForSO
        {
            get { return _purchaseForSO; }
            set 
            {
                if (_purchaseForSO != value)
                {
                    _purchaseForSO = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchaseForSOPrepared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PurchaseForSOPrepared
        {
            get { return _purchaseForSOPrepared; }
            set 
            {
                if (_purchaseForSOPrepared != value)
                {
                    _purchaseForSOPrepared = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchaseForSOReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PurchaseForSOReceipts
        {
            get { return _purchaseForSOReceipts; }
            set 
            {
                if (_purchaseForSOReceipts != value)
                {
                    _purchaseForSOReceipts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soToDropShip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SoToDropShip
        {
            get { return _soToDropShip; }
            set 
            {
                if (_soToDropShip != value)
                {
                    _soToDropShip = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dropShipForSO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DropShipForSO
        {
            get { return _dropShipForSO; }
            set 
            {
                if (_dropShipForSO != value)
                {
                    _dropShipForSO = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dropShipForSOPrepared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DropShipForSOPrepared
        {
            get { return _dropShipForSOPrepared; }
            set 
            {
                if (_dropShipForSOPrepared != value)
                {
                    _dropShipForSOPrepared = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dropShipForSOReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DropShipForSOReceipts
        {
            get { return _dropShipForSOReceipts; }
            set 
            {
                if (_dropShipForSOReceipts != value)
                {
                    _dropShipForSOReceipts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("baseUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUnit
        {
            get { return _baseUnit; }
            set 
            {
                if (_baseUnit != value)
                {
                    _baseUnit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("estimatedUnitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedUnitCost
        {
            get { return _estimatedUnitCost; }
            set 
            {
                if (_estimatedUnitCost != value)
                {
                    _estimatedUnitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("estimatedTotalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedTotalCost
        {
            get { return _estimatedTotalCost; }
            set 
            {
                if (_estimatedTotalCost != value)
                {
                    _estimatedTotalCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventorySummaryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventorySummaryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LocationIdNameDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LocationIdNameDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationIdNameDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryTransferDto : System.ComponentModel.INotifyPropertyChanged
    {
        private WarehouseIdDescriptionDto _warehouse;
        private WarehouseIdDescriptionDto _toWarehouse;
        private System.Collections.ObjectModel.ObservableCollection<InventoryTransferLineDto> _transferLines;
        private string _referenceNumber;
        private InventoryTransferDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _date;
        private string _postPeriod;
        private string _externalReference;
        private string _description;
        private double? _totalQuantity;
        private double? _controlQuantity;
        private string _batchNumber;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("toWarehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto ToWarehouse
        {
            get { return _toWarehouse; }
            set 
            {
                if (_toWarehouse != value)
                {
                    _toWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory transfer lines</summary>
        [Newtonsoft.Json.JsonProperty("transferLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryTransferLineDto> TransferLines
        {
            get { return _transferLines; }
            set 
            {
                if (_transferLines != value)
                {
                    _transferLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current status of the receipt. The following options are available: 
        ///             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
        ///             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
        ///             Released: The receipt/issue has been released and cannot be edited or deleted.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryTransferDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The total quantity of inventory items, which the system calculates automatically, for the document.</summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalQuantity
        {
            get { return _totalQuantity; }
            set 
            {
                if (_totalQuantity != value)
                {
                    _totalQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The reference number of the batch generated for the receipt. Click the number to open the??Journal Transactions??(GL.30.10.00) form and view the details of the transactions.</summary>
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the document was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data containing information about the document attachments</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryTransferDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryTransferDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryTransferLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private LocationDto _toLocation;
        private int? _lineNumber;
        private InventoryNumberDescriptionDto _inventoryItem;
        private LocationDto _location;
        private double? _quantity;
        private string _uom;
        private ReasonCodeDto _reasonCode;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private BranchNumberDto _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("toLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto ToLocation
        {
            get { return _toLocation; }
            set 
            {
                if (_toLocation != value)
                {
                    _toLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto InventoryItem
        {
            get { return _inventoryItem; }
            set 
            {
                if (_inventoryItem != value)
                {
                    _inventoryItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonCodeDto ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryTransferLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryTransferLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a inventory issue in InventoryIssueController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryTransferUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _warehouseId;
        private DtoValueOfString _toWarehouseId;
        private System.Collections.ObjectModel.ObservableCollection<InventoryTransferLineUpdateDto> _transferLines;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _externalReference;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDecimal _controlQuantity;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("toWarehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ToWarehouseId
        {
            get { return _toWarehouseId; }
            set 
            {
                if (_toWarehouseId != value)
                {
                    _toWarehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The inventory issue lines</summary>
        [Newtonsoft.Json.JsonProperty("transferLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InventoryTransferLineUpdateDto> TransferLines
        {
            get { return _transferLines; }
            set 
            {
                if (_transferLines != value)
                {
                    _transferLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the??Inventory Preferences??IN.10.10.00) form.</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to give the receipt the??On Hold??status. Clear the check box to save the receipt with the??Balanced??status.</summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date when the receipt was created. All transactions included in this document will have this transaction date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external reference number of the inventory issue document (for example, the vendor???s reference code).</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A brief description of the inventory issue or its transactions.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The manually entered quantity of inventory items.??Control Qty.??is available only if the??Validate Document Totals on Entry??option is selected on the??Inventory Preferences??form. If the??Control Qty.??and??Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.</summary>
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Branch associated</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryTransferUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryTransferUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryTransferLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _toLocationId;
        private InventoryTransferLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfString _reasonCode;
        private DtoValueOfString _description;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("toLocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ToLocationId
        {
            get { return _toLocationId; }
            set 
            {
                if (_toLocationId != value)
                {
                    _toLocationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InventoryTransferLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryTransferLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryTransferLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a journal transaction in JournalTransactionController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class JournalTransactionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private JournalTransactionDtoModule? _module;
        private string _batchNumber;
        private JournalTransactionDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _transactionDate;
        private string _postPeriod;
        private string _financialPeriod;
        private string _ledger;
        private string _ledgerDescription;
        private string _currencyId;
        private double? _exchangeRate;
        private bool? _autoReversing;
        private bool? _reversingEntry;
        private string _description;
        private string _originalBatchNumber;
        private double? _debitTotal;
        private double? _debitTotalInCurrency;
        private double? _creditTotal;
        private double? _creditTotalInCurrency;
        private double? _controlTotal;
        private double? _controlTotalInCurrency;
        private bool? _createVatTransaction;
        private bool? _skipVatAmountValidation;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private string _transactionCode;
        private string _transactionCodeDescription;
        private string _branch;
        private System.Collections.ObjectModel.ObservableCollection<JournalTransactionLineDto> _journalTransactionLines;
    
        [Newtonsoft.Json.JsonProperty("module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JournalTransactionDtoModule? Module
        {
            get { return _module; }
            set 
            {
                if (_module != value)
                {
                    _module = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JournalTransactionDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionDate
        {
            get { return _transactionDate; }
            set 
            {
                if (_transactionDate != value)
                {
                    _transactionDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ledger
        {
            get { return _ledger; }
            set 
            {
                if (_ledger != value)
                {
                    _ledger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ledgerDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LedgerDescription
        {
            get { return _ledgerDescription; }
            set 
            {
                if (_ledgerDescription != value)
                {
                    _ledgerDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("autoReversing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoReversing
        {
            get { return _autoReversing; }
            set 
            {
                if (_autoReversing != value)
                {
                    _autoReversing = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reversingEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReversingEntry
        {
            get { return _reversingEntry; }
            set 
            {
                if (_reversingEntry != value)
                {
                    _reversingEntry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("originalBatchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalBatchNumber
        {
            get { return _originalBatchNumber; }
            set 
            {
                if (_originalBatchNumber != value)
                {
                    _originalBatchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("debitTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DebitTotal
        {
            get { return _debitTotal; }
            set 
            {
                if (_debitTotal != value)
                {
                    _debitTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("debitTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DebitTotalInCurrency
        {
            get { return _debitTotalInCurrency; }
            set 
            {
                if (_debitTotalInCurrency != value)
                {
                    _debitTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditTotal
        {
            get { return _creditTotal; }
            set 
            {
                if (_creditTotal != value)
                {
                    _creditTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditTotalInCurrency
        {
            get { return _creditTotalInCurrency; }
            set 
            {
                if (_creditTotalInCurrency != value)
                {
                    _creditTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlTotalInCurrency
        {
            get { return _controlTotalInCurrency; }
            set 
            {
                if (_controlTotalInCurrency != value)
                {
                    _controlTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createVatTransaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateVatTransaction
        {
            get { return _createVatTransaction; }
            set 
            {
                if (_createVatTransaction != value)
                {
                    _createVatTransaction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipVatAmountValidation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SkipVatAmountValidation
        {
            get { return _skipVatAmountValidation; }
            set 
            {
                if (_skipVatAmountValidation != value)
                {
                    _skipVatAmountValidation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionCode
        {
            get { return _transactionCode; }
            set 
            {
                if (_transactionCode != value)
                {
                    _transactionCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionCodeDescription
        {
            get { return _transactionCodeDescription; }
            set 
            {
                if (_transactionCodeDescription != value)
                {
                    _transactionCodeDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("journalTransactionLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<JournalTransactionLineDto> JournalTransactionLines
        {
            get { return _journalTransactionLines; }
            set 
            {
                if (_journalTransactionLines != value)
                {
                    _journalTransactionLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JournalTransactionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JournalTransactionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class JournalTransactionLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private string _accountNumber;
        private string _description;
        private SubAccountDto _subaccount;
        private string _referenceNumber;
        private double? _debitAmount;
        private double? _debitAmountInCurrency;
        private double? _creditAmount;
        private double? _creditAmountInCurrency;
        private string _transactionDescription;
        private VatCodeDto _vatCode;
        private VatDto _vat;
        private string _branch;
        private string _customerSupplier;
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber
        {
            get { return _accountNumber; }
            set 
            {
                if (_accountNumber != value)
                {
                    _accountNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("debitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DebitAmount
        {
            get { return _debitAmount; }
            set 
            {
                if (_debitAmount != value)
                {
                    _debitAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("debitAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DebitAmountInCurrency
        {
            get { return _debitAmountInCurrency; }
            set 
            {
                if (_debitAmountInCurrency != value)
                {
                    _debitAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditAmount
        {
            get { return _creditAmount; }
            set 
            {
                if (_creditAmount != value)
                {
                    _creditAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditAmountInCurrency
        {
            get { return _creditAmountInCurrency; }
            set 
            {
                if (_creditAmountInCurrency != value)
                {
                    _creditAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionDescription
        {
            get { return _transactionDescription; }
            set 
            {
                if (_transactionDescription != value)
                {
                    _transactionDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatCodeDto VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatDto Vat
        {
            get { return _vat; }
            set 
            {
                if (_vat != value)
                {
                    _vat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerSupplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerSupplier
        {
            get { return _customerSupplier; }
            set 
            {
                if (_customerSupplier != value)
                {
                    _customerSupplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JournalTransactionLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JournalTransactionLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a journal transaction in JournalTransactionController. Used for creating/updating data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class JournalTransactionUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _batchNumber;
        private DtoValueOfBoolean _hold;
        private DtoValueOfDateTime _transactionDate;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _financialPeriod;
        private DtoValueOfString _ledger;
        private DtoValueOfString _currencyId;
        private DtoValueOfDecimal _exchangeRate;
        private DtoValueOfBoolean _autoReversing;
        private DtoValueOfString _description;
        private DtoValueOfDecimal _controlTotalInCurrency;
        private DtoValueOfBoolean _createVatTransaction;
        private DtoValueOfBoolean _skipVatAmountValidation;
        private DtoValueOfString _transactionCode;
        private DtoValueOfString _branch;
        private System.Collections.ObjectModel.ObservableCollection<JournalTransactionLineUpdateDto> _journalTransactionLines;
    
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BatchNumber
        {
            get { return _batchNumber; }
            set 
            {
                if (_batchNumber != value)
                {
                    _batchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime TransactionDate
        {
            get { return _transactionDate; }
            set 
            {
                if (_transactionDate != value)
                {
                    _transactionDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Ledger
        {
            get { return _ledger; }
            set 
            {
                if (_ledger != value)
                {
                    _ledger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("autoReversing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean AutoReversing
        {
            get { return _autoReversing; }
            set 
            {
                if (_autoReversing != value)
                {
                    _autoReversing = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal ControlTotalInCurrency
        {
            get { return _controlTotalInCurrency; }
            set 
            {
                if (_controlTotalInCurrency != value)
                {
                    _controlTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createVatTransaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean CreateVatTransaction
        {
            get { return _createVatTransaction; }
            set 
            {
                if (_createVatTransaction != value)
                {
                    _createVatTransaction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipVatAmountValidation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean SkipVatAmountValidation
        {
            get { return _skipVatAmountValidation; }
            set 
            {
                if (_skipVatAmountValidation != value)
                {
                    _skipVatAmountValidation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransactionCode
        {
            get { return _transactionCode; }
            set 
            {
                if (_transactionCode != value)
                {
                    _transactionCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("journalTransactionLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<JournalTransactionLineUpdateDto> JournalTransactionLines
        {
            get { return _journalTransactionLines; }
            set 
            {
                if (_journalTransactionLines != value)
                {
                    _journalTransactionLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JournalTransactionUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JournalTransactionUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class JournalTransactionLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private JournalTransactionLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _accountNumber;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfString _transactionDescription;
        private DtoValueOfDecimal _debitAmountInCurrency;
        private DtoValueOfDecimal _creditAmountInCurrency;
        private DtoValueOfString _vatCodeId;
        private DtoValueOfString _vatId;
        private DtoValueOfString _branch;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JournalTransactionLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountNumber
        {
            get { return _accountNumber; }
            set 
            {
                if (_accountNumber != value)
                {
                    _accountNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransactionDescription
        {
            get { return _transactionDescription; }
            set 
            {
                if (_transactionDescription != value)
                {
                    _transactionDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("debitAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal DebitAmountInCurrency
        {
            get { return _debitAmountInCurrency; }
            set 
            {
                if (_debitAmountInCurrency != value)
                {
                    _debitAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditAmountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal CreditAmountInCurrency
        {
            get { return _creditAmountInCurrency; }
            set 
            {
                if (_creditAmountInCurrency != value)
                {
                    _creditAmountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatCodeId
        {
            get { return _vatCodeId; }
            set 
            {
                if (_vatCodeId != value)
                {
                    _vatCodeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatId
        {
            get { return _vatId; }
            set 
            {
                if (_vatId != value)
                {
                    _vatId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JournalTransactionLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JournalTransactionLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class JournalTransactionQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private string _customerSupplierStart;
        private string _customerSupplierEnd;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerSupplierStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerSupplierStart
        {
            get { return _customerSupplierStart; }
            set 
            {
                if (_customerSupplierStart != value)
                {
                    _customerSupplierStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerSupplierEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerSupplierEnd
        {
            get { return _customerSupplierEnd; }
            set 
            {
                if (_customerSupplierEnd != value)
                {
                    _customerSupplierEnd = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JournalTransactionQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JournalTransactionQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LedgerQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LedgerQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LedgerQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LedgerDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalId;
        private string _number;
        private string _description;
        private LedgerDtoBalanceType? _balanceType;
        private string _currencyId;
        private bool? _consolidationSource;
        private ConsolBranchDto _consolBranch;
        private bool? _branchAccounting;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LedgerDtoBalanceType? BalanceType
        {
            get { return _balanceType; }
            set 
            {
                if (_balanceType != value)
                {
                    _balanceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("consolidationSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConsolidationSource
        {
            get { return _consolidationSource; }
            set 
            {
                if (_consolidationSource != value)
                {
                    _consolidationSource = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("consolBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConsolBranchDto ConsolBranch
        {
            get { return _consolBranch; }
            set 
            {
                if (_consolBranch != value)
                {
                    _consolBranch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchAccounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BranchAccounting
        {
            get { return _branchAccounting; }
            set 
            {
                if (_branchAccounting != value)
                {
                    _branchAccounting = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LedgerDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LedgerDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ConsolBranchDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConsolBranchDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsolBranchDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class NumberingDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _numberingId;
        private string _description;
        private bool? _manualNumbering;
        private string _newNumberSymbol;
        private System.Collections.ObjectModel.ObservableCollection<NumberingSequenceDto> _sequence;
    
        [Newtonsoft.Json.JsonProperty("numberingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberingId
        {
            get { return _numberingId; }
            set 
            {
                if (_numberingId != value)
                {
                    _numberingId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualNumbering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualNumbering
        {
            get { return _manualNumbering; }
            set 
            {
                if (_manualNumbering != value)
                {
                    _manualNumbering = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("newNumberSymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewNumberSymbol
        {
            get { return _newNumberSymbol; }
            set 
            {
                if (_newNumberSymbol != value)
                {
                    _newNumberSymbol = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<NumberingSequenceDto> Sequence
        {
            get { return _sequence; }
            set 
            {
                if (_sequence != value)
                {
                    _sequence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumberingDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumberingDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class NumberingSequenceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _numberingId;
        private BranchNumberDto _branch;
        private string _startNbr;
        private string _endNbr;
        private System.DateTimeOffset? _startDate;
        private string _lastNbr;
        private string _warnNbr;
        private int? _nbrStep;
    
        [Newtonsoft.Json.JsonProperty("numberingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberingId
        {
            get { return _numberingId; }
            set 
            {
                if (_numberingId != value)
                {
                    _numberingId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("startNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartNbr
        {
            get { return _startNbr; }
            set 
            {
                if (_startNbr != value)
                {
                    _startNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("endNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndNbr
        {
            get { return _endNbr; }
            set 
            {
                if (_endNbr != value)
                {
                    _endNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastNbr
        {
            get { return _lastNbr; }
            set 
            {
                if (_lastNbr != value)
                {
                    _lastNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warnNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarnNbr
        {
            get { return _warnNbr; }
            set 
            {
                if (_warnNbr != value)
                {
                    _warnNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nbrStep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NbrStep
        {
            get { return _nbrStep; }
            set 
            {
                if (_nbrStep != value)
                {
                    _nbrStep = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumberingSequenceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumberingSequenceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a PackagingType in PackagingTypeController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PackagingTypeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _boxId;
        private string _description;
        private double? _boxWeight;
        private double? _maxWeight;
        private string _weightUoM;
        private double? _maxVolume;
        private string _volumeUoM;
        private int? _length;
        private int? _width;
        private int? _height;
        private bool? _activeByDefault;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("boxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoxId
        {
            get { return _boxId; }
            set 
            {
                if (_boxId != value)
                {
                    _boxId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("boxWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BoxWeight
        {
            get { return _boxWeight; }
            set 
            {
                if (_boxWeight != value)
                {
                    _boxWeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxWeight
        {
            get { return _maxWeight; }
            set 
            {
                if (_maxWeight != value)
                {
                    _maxWeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("weightUoM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeightUoM
        {
            get { return _weightUoM; }
            set 
            {
                if (_weightUoM != value)
                {
                    _weightUoM = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxVolume
        {
            get { return _maxVolume; }
            set 
            {
                if (_maxVolume != value)
                {
                    _maxVolume = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("volumeUoM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeUoM
        {
            get { return _volumeUoM; }
            set 
            {
                if (_volumeUoM != value)
                {
                    _volumeUoM = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length
        {
            get { return _length; }
            set 
            {
                if (_length != value)
                {
                    _length = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width
        {
            get { return _width; }
            set 
            {
                if (_width != value)
                {
                    _width = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height
        {
            get { return _height; }
            set 
            {
                if (_height != value)
                {
                    _height = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("activeByDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ActiveByDefault
        {
            get { return _activeByDefault; }
            set 
            {
                if (_activeByDefault != value)
                {
                    _activeByDefault = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PackagingTypeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PackagingTypeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PackagingTypeQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PackagingTypeQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PackagingTypeQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Payment in PaymentController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PaymentDtoType? _type;
        private string _refNbr;
        private PaymentDtoStatus? _status;
        private bool? _hold;
        private System.DateTimeOffset? _applicationDate;
        private string _applicationPeriod;
        private string _paymentRef;
        private CustomerNumberDto _customer;
        private LocationDto _location;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _cashAccount;
        private string _currency;
        private double? _paymentAmount;
        private string _invoiceText;
        private double? _appliedToDocuments;
        private double? _appliedToOrders;
        private double? _availableBalance;
        private double? _writeOffAmount;
        private double? _financeCharges;
        private double? _deductedCharges;
        private string _branch;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<PaymentLineDto> _paymentLines;
        private System.Collections.ObjectModel.ObservableCollection<OrderToApplyDto> _ordersToApply;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ApplicationDate
        {
            get { return _applicationDate; }
            set 
            {
                if (_applicationDate != value)
                {
                    _applicationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("applicationPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationPeriod
        {
            get { return _applicationPeriod; }
            set 
            {
                if (_applicationPeriod != value)
                {
                    _applicationPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentRef
        {
            get { return _paymentRef; }
            set 
            {
                if (_paymentRef != value)
                {
                    _paymentRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaymentAmount
        {
            get { return _paymentAmount; }
            set 
            {
                if (_paymentAmount != value)
                {
                    _paymentAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("appliedToDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AppliedToDocuments
        {
            get { return _appliedToDocuments; }
            set 
            {
                if (_appliedToDocuments != value)
                {
                    _appliedToDocuments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("appliedToOrders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AppliedToOrders
        {
            get { return _appliedToOrders; }
            set 
            {
                if (_appliedToOrders != value)
                {
                    _appliedToOrders = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("availableBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AvailableBalance
        {
            get { return _availableBalance; }
            set 
            {
                if (_availableBalance != value)
                {
                    _availableBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("writeOffAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WriteOffAmount
        {
            get { return _writeOffAmount; }
            set 
            {
                if (_writeOffAmount != value)
                {
                    _writeOffAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("financeCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceCharges
        {
            get { return _financeCharges; }
            set 
            {
                if (_financeCharges != value)
                {
                    _financeCharges = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deductedCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductedCharges
        {
            get { return _deductedCharges; }
            set 
            {
                if (_deductedCharges != value)
                {
                    _deductedCharges = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PaymentLineDto> PaymentLines
        {
            get { return _paymentLines; }
            set 
            {
                if (_paymentLines != value)
                {
                    _paymentLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ordersToApply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderToApplyDto> OrdersToApply
        {
            get { return _ordersToApply; }
            set 
            {
                if (_ordersToApply != value)
                {
                    _ordersToApply = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PaymentLineDtoDocumentType? _documentType;
        private string _refNbr;
        private double? _amountPaid;
        private double? _cashDiscountTaken;
        private double? _balanceWriteOff;
        private ReasonCodeDto _writeOffReasonCode;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _dueDate;
        private System.DateTimeOffset? _cashDiscountDate;
        private double? _balance;
        private double? _cashDiscountBalance;
        private string _description;
        private string _currency;
        private string _postPeriod;
        private string _customerOrder;
        private double? _crossRate;
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentLineDtoDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountPaid
        {
            get { return _amountPaid; }
            set 
            {
                if (_amountPaid != value)
                {
                    _amountPaid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountTaken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountTaken
        {
            get { return _cashDiscountTaken; }
            set 
            {
                if (_cashDiscountTaken != value)
                {
                    _cashDiscountTaken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceWriteOff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BalanceWriteOff
        {
            get { return _balanceWriteOff; }
            set 
            {
                if (_balanceWriteOff != value)
                {
                    _balanceWriteOff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("writeOffReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonCodeDto WriteOffReasonCode
        {
            get { return _writeOffReasonCode; }
            set 
            {
                if (_writeOffReasonCode != value)
                {
                    _writeOffReasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate
        {
            get { return _cashDiscountDate; }
            set 
            {
                if (_cashDiscountDate != value)
                {
                    _cashDiscountDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountBalance
        {
            get { return _cashDiscountBalance; }
            set 
            {
                if (_cashDiscountBalance != value)
                {
                    _cashDiscountBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerOrder
        {
            get { return _customerOrder; }
            set 
            {
                if (_customerOrder != value)
                {
                    _customerOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("crossRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CrossRate
        {
            get { return _crossRate; }
            set 
            {
                if (_crossRate != value)
                {
                    _crossRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents an OrderToApply in Payments</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class OrderToApplyDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _orderType;
        private string _orderNo;
        private OrderToApplyDtoStatus? _status;
        private double? _appliedToOrder;
        private double? _transferredToInvoice;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _dueDate;
        private System.DateTimeOffset? _cashDiscountDate;
        private double? _balance;
        private string _description;
        private double? _orderTotal;
        private string _currency;
        private string _invoiceNbr;
        private System.DateTimeOffset? _invoiceDate;
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNo
        {
            get { return _orderNo; }
            set 
            {
                if (_orderNo != value)
                {
                    _orderNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderToApplyDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("appliedToOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AppliedToOrder
        {
            get { return _appliedToOrder; }
            set 
            {
                if (_appliedToOrder != value)
                {
                    _appliedToOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferredToInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransferredToInvoice
        {
            get { return _transferredToInvoice; }
            set 
            {
                if (_transferredToInvoice != value)
                {
                    _transferredToInvoice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate
        {
            get { return _cashDiscountDate; }
            set 
            {
                if (_cashDiscountDate != value)
                {
                    _cashDiscountDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderTotal
        {
            get { return _orderTotal; }
            set 
            {
                if (_orderTotal != value)
                {
                    _orderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNbr
        {
            get { return _invoiceNbr; }
            set 
            {
                if (_invoiceNbr != value)
                {
                    _invoiceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvoiceDate
        {
            get { return _invoiceDate; }
            set 
            {
                if (_invoiceDate != value)
                {
                    _invoiceDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderToApplyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderToApplyDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPaymentTypes _type;
        private DtoValueOfBoolean _hold;
        private DtoValueOfDateTime _applicationDate;
        private DtoValueOfString _applicationPeriod;
        private DtoValueOfString _paymentRef;
        private DtoValueOfString _customer;
        private DtoValueOfString _location;
        private DtoValueOfString _paymentMethod;
        private DtoValueOfString _cashAccount;
        private DtoValueOfString _currency;
        private DtoValueOfDecimal _paymentAmount;
        private DtoValueOfString _invoiceText;
        private DtoValueOfString _branch;
        private System.Collections.ObjectModel.ObservableCollection<PaymentOrdersLinesUpdateDto> _ordersToApply;
        private System.Collections.ObjectModel.ObservableCollection<PaymentLinesUpdateDto> _paymentLines;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPaymentTypes Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime ApplicationDate
        {
            get { return _applicationDate; }
            set 
            {
                if (_applicationDate != value)
                {
                    _applicationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("applicationPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ApplicationPeriod
        {
            get { return _applicationPeriod; }
            set 
            {
                if (_applicationPeriod != value)
                {
                    _applicationPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentRef
        {
            get { return _paymentRef; }
            set 
            {
                if (_paymentRef != value)
                {
                    _paymentRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal PaymentAmount
        {
            get { return _paymentAmount; }
            set 
            {
                if (_paymentAmount != value)
                {
                    _paymentAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InvoiceText
        {
            get { return _invoiceText; }
            set 
            {
                if (_invoiceText != value)
                {
                    _invoiceText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ordersToApply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PaymentOrdersLinesUpdateDto> OrdersToApply
        {
            get { return _ordersToApply; }
            set 
            {
                if (_ordersToApply != value)
                {
                    _ordersToApply = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PaymentLinesUpdateDto> PaymentLines
        {
            get { return _paymentLines; }
            set 
            {
                if (_paymentLines != value)
                {
                    _paymentLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfPaymentTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPaymentTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfPaymentTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfPaymentTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfPaymentTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentOrdersLinesUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PaymentOrdersLinesUpdateDtoOperation? _operation;
        private DtoValueOfString _orderType;
        private DtoValueOfString _orderNumber;
        private DtoValueOfDecimal _appliedToOrder;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrdersLinesUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrderNumber
        {
            get { return _orderNumber; }
            set 
            {
                if (_orderNumber != value)
                {
                    _orderNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("appliedToOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal AppliedToOrder
        {
            get { return _appliedToOrder; }
            set 
            {
                if (_appliedToOrder != value)
                {
                    _appliedToOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentOrdersLinesUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentOrdersLinesUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentLinesUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PaymentLinesUpdateDtoOperation? _operation;
        private DtoValueOfCustomerDocumentTypes _documentType;
        private DtoValueOfString _refNbr;
        private DtoValueOfDecimal _amountPaid;
        private DtoValueOfDecimal _cashDiscountTaken;
        private DtoValueOfDecimal _balanceWriteOff;
        private DtoValueOfString _writeOffReasonCode;
        private DtoValueOfDecimal _crossRate;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentLinesUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfCustomerDocumentTypes DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal AmountPaid
        {
            get { return _amountPaid; }
            set 
            {
                if (_amountPaid != value)
                {
                    _amountPaid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountTaken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal CashDiscountTaken
        {
            get { return _cashDiscountTaken; }
            set 
            {
                if (_cashDiscountTaken != value)
                {
                    _cashDiscountTaken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceWriteOff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal BalanceWriteOff
        {
            get { return _balanceWriteOff; }
            set 
            {
                if (_balanceWriteOff != value)
                {
                    _balanceWriteOff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("writeOffReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WriteOffReasonCode
        {
            get { return _writeOffReasonCode; }
            set 
            {
                if (_writeOffReasonCode != value)
                {
                    _writeOffReasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("crossRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal CrossRate
        {
            get { return _crossRate; }
            set 
            {
                if (_crossRate != value)
                {
                    _crossRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentLinesUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentLinesUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfCustomerDocumentTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfCustomerDocumentTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfCustomerDocumentTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfCustomerDocumentTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfCustomerDocumentTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReleasePaymentActionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfPaymentTypes _type;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPaymentTypes Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleasePaymentActionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleasePaymentActionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfPaymentTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfPaymentTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfPaymentTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfPaymentTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfPaymentTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReleasePaymentActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private ReleasePaymentActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReleasePaymentActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleasePaymentActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleasePaymentActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Payment Method in PaymentMethodController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentMethodDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _paymentMethodID;
        private bool? _active;
        private PaymentMethodDtoMeansOfPayment? _meansOfPayment;
        private string _description;
        private bool? _useInAP;
        private System.Collections.ObjectModel.ObservableCollection<PaymentMethodDetailDto> _details;
    
        [Newtonsoft.Json.JsonProperty("paymentMethodID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodID
        {
            get { return _paymentMethodID; }
            set 
            {
                if (_paymentMethodID != value)
                {
                    _paymentMethodID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("meansOfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentMethodDtoMeansOfPayment? MeansOfPayment
        {
            get { return _meansOfPayment; }
            set 
            {
                if (_meansOfPayment != value)
                {
                    _meansOfPayment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("useInAP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseInAP
        {
            get { return _useInAP; }
            set 
            {
                if (_useInAP != value)
                {
                    _useInAP = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PaymentMethodDetailDto> Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentMethodDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentMethodDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentMethodDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _detailID;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("detailID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailID
        {
            get { return _detailID; }
            set 
            {
                if (_detailID != value)
                {
                    _detailID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentMethodDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentMethodDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PaymentMethodQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentMethodQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentMethodQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Project in ProjectController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ProjectDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalID;
        private string _projectID;
        private CustomerNumberDto _customer;
        private bool? _hold;
        private ProjectDtoStatus? _status;
        private TemplateNumberDescriptionDto _template;
        private string _description;
        private double? _assets;
        private double? _liability;
        private double? _income;
        private double? _expenses;
        private System.DateTimeOffset? _startDate;
        private System.DateTimeOffset? _endDate;
        private EmployeeDto _projectManager;
        private bool? _restrictEmployees;
        private bool? _restrictEquipment;
        private VisibilityDto _visibility;
        private AccountNumberTypeDescriptionDto _defAccount;
        private SubAccountDescriptionDto _defSub;
        private AccountNumberTypeDescriptionDto _defAccrualAccount;
        private SubAccountDescriptionDto _defAccrualSub;
        private ProjectDtoBillingPeriod? _billingPeriod;
        private System.DateTimeOffset? _nextBillingDate;
        private System.DateTimeOffset? _lastBillingDate;
        private LocationIdNameDto _customerLocation;
        private AllocationRuleIdDescriptionDto _allocationRule;
        private BillingRuleIdDescriptionDto _billingRule;
        private RateTableIdDescriptionDto _rateTable;
        private bool? _autoAllocate;
        private bool? _automaticReleaseAr;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<TaskDto> _tasks;
        private System.Collections.ObjectModel.ObservableCollection<EmployeeDto> _employees;
    
        [Newtonsoft.Json.JsonProperty("internalID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalID
        {
            get { return _internalID; }
            set 
            {
                if (_internalID != value)
                {
                    _internalID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectID
        {
            get { return _projectID; }
            set 
            {
                if (_projectID != value)
                {
                    _projectID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerNumberDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateNumberDescriptionDto Template
        {
            get { return _template; }
            set 
            {
                if (_template != value)
                {
                    _template = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Assets
        {
            get { return _assets; }
            set 
            {
                if (_assets != value)
                {
                    _assets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("liability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Liability
        {
            get { return _liability; }
            set 
            {
                if (_liability != value)
                {
                    _liability = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("income", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Income
        {
            get { return _income; }
            set 
            {
                if (_income != value)
                {
                    _income = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Expenses
        {
            get { return _expenses; }
            set 
            {
                if (_expenses != value)
                {
                    _expenses = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate
        {
            get { return _endDate; }
            set 
            {
                if (_endDate != value)
                {
                    _endDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectManager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeDto ProjectManager
        {
            get { return _projectManager; }
            set 
            {
                if (_projectManager != value)
                {
                    _projectManager = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("restrictEmployees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictEmployees
        {
            get { return _restrictEmployees; }
            set 
            {
                if (_restrictEmployees != value)
                {
                    _restrictEmployees = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("restrictEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictEquipment
        {
            get { return _restrictEquipment; }
            set 
            {
                if (_restrictEquipment != value)
                {
                    _restrictEquipment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisibilityDto Visibility
        {
            get { return _visibility; }
            set 
            {
                if (_visibility != value)
                {
                    _visibility = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto DefAccount
        {
            get { return _defAccount; }
            set 
            {
                if (_defAccount != value)
                {
                    _defAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto DefSub
        {
            get { return _defSub; }
            set 
            {
                if (_defSub != value)
                {
                    _defSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defAccrualAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto DefAccrualAccount
        {
            get { return _defAccrualAccount; }
            set 
            {
                if (_defAccrualAccount != value)
                {
                    _defAccrualAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defAccrualSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto DefAccrualSub
        {
            get { return _defAccrualSub; }
            set 
            {
                if (_defAccrualSub != value)
                {
                    _defAccrualSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("billingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectDtoBillingPeriod? BillingPeriod
        {
            get { return _billingPeriod; }
            set 
            {
                if (_billingPeriod != value)
                {
                    _billingPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nextBillingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextBillingDate
        {
            get { return _nextBillingDate; }
            set 
            {
                if (_nextBillingDate != value)
                {
                    _nextBillingDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastBillingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastBillingDate
        {
            get { return _lastBillingDate; }
            set 
            {
                if (_lastBillingDate != value)
                {
                    _lastBillingDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationIdNameDto CustomerLocation
        {
            get { return _customerLocation; }
            set 
            {
                if (_customerLocation != value)
                {
                    _customerLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("allocationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllocationRuleIdDescriptionDto AllocationRule
        {
            get { return _allocationRule; }
            set 
            {
                if (_allocationRule != value)
                {
                    _allocationRule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("billingRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingRuleIdDescriptionDto BillingRule
        {
            get { return _billingRule; }
            set 
            {
                if (_billingRule != value)
                {
                    _billingRule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("rateTable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateTableIdDescriptionDto RateTable
        {
            get { return _rateTable; }
            set 
            {
                if (_rateTable != value)
                {
                    _rateTable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("autoAllocate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoAllocate
        {
            get { return _autoAllocate; }
            set 
            {
                if (_autoAllocate != value)
                {
                    _autoAllocate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("automaticReleaseAr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutomaticReleaseAr
        {
            get { return _automaticReleaseAr; }
            set 
            {
                if (_automaticReleaseAr != value)
                {
                    _automaticReleaseAr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TaskDto> Tasks
        {
            get { return _tasks; }
            set 
            {
                if (_tasks != value)
                {
                    _tasks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<EmployeeDto> Employees
        {
            get { return _employees; }
            set 
            {
                if (_employees != value)
                {
                    _employees = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TemplateNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private TemplateNumberDescriptionDtoStatus? _status;
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateNumberDescriptionDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TemplateNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VisibilityDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _visibleInGl;
        private bool? _visibleInAp;
        private bool? _visibleInAr;
        private bool? _visibleInSo;
        private bool? _visibleInPo;
        private bool? _visibleInEp;
        private bool? _visibleInIn;
        private bool? _visibleInCa;
        private bool? _visibleInCr;
    
        [Newtonsoft.Json.JsonProperty("visibleInGl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInGl
        {
            get { return _visibleInGl; }
            set 
            {
                if (_visibleInGl != value)
                {
                    _visibleInGl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInAp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInAp
        {
            get { return _visibleInAp; }
            set 
            {
                if (_visibleInAp != value)
                {
                    _visibleInAp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInAr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInAr
        {
            get { return _visibleInAr; }
            set 
            {
                if (_visibleInAr != value)
                {
                    _visibleInAr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInSo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInSo
        {
            get { return _visibleInSo; }
            set 
            {
                if (_visibleInSo != value)
                {
                    _visibleInSo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInPo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInPo
        {
            get { return _visibleInPo; }
            set 
            {
                if (_visibleInPo != value)
                {
                    _visibleInPo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInEp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInEp
        {
            get { return _visibleInEp; }
            set 
            {
                if (_visibleInEp != value)
                {
                    _visibleInEp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInIn
        {
            get { return _visibleInIn; }
            set 
            {
                if (_visibleInIn != value)
                {
                    _visibleInIn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInCa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInCa
        {
            get { return _visibleInCa; }
            set 
            {
                if (_visibleInCa != value)
                {
                    _visibleInCa = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInCr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisibleInCr
        {
            get { return _visibleInCr; }
            set 
            {
                if (_visibleInCr != value)
                {
                    _visibleInCr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VisibilityDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VisibilityDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AllocationRuleIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _active;
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AllocationRuleIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AllocationRuleIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class BillingRuleIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _active;
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BillingRuleIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BillingRuleIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class RateTableIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RateTableIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RateTableIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TaskDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _taskId;
        private string _description;
        private System.DateTimeOffset? _plannedStart;
        private System.DateTimeOffset? _plannedEnd;
        private System.DateTimeOffset? _startDate;
        private RateTableIdDescriptionDto _rateTable;
    
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId
        {
            get { return _taskId; }
            set 
            {
                if (_taskId != value)
                {
                    _taskId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("plannedStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PlannedStart
        {
            get { return _plannedStart; }
            set 
            {
                if (_plannedStart != value)
                {
                    _plannedStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("plannedEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PlannedEnd
        {
            get { return _plannedEnd; }
            set 
            {
                if (_plannedEnd != value)
                {
                    _plannedEnd = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("rateTable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateTableIdDescriptionDto RateTable
        {
            get { return _rateTable; }
            set 
            {
                if (_rateTable != value)
                {
                    _rateTable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TaskDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ProjectQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private ProjectQueryParametersStatus? _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Project in Project Controller. Used to pass data to server for creating or updating an project</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ProjectUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _projectID;
        private DtoValueOfString _customer = new DtoValueOfString();
        private DtoValueOfString _description = new DtoValueOfString();
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfString _template;
        private DtoValueOfNullableOfProjectStatus _status;
        private DtoValueOfString _defAccount;
        private DtoValueOfString _defSub;
        private DtoValueOfString _defAccrualAccount;
        private DtoValueOfString _defAccrualSub;
        private DtoValueOfNullableOfDateTime _startDate = new DtoValueOfNullableOfDateTime();
        private DtoValueOfNullableOfDateTime _endDate;
        private DtoValueOfNullableOfBillingPeriod _billingPeriod = new DtoValueOfNullableOfBillingPeriod();
        private DtoValueOfString _allocationRule;
        private DtoValueOfString _billingRule;
        private DtoValueOfString _rateTable;
        private DtoValueOfString _projectManger;
        private DtoValueOfNullableOfBoolean _autoAllocate;
        private DtoValueOfNullableOfBoolean _automaticReleaseArDoc;
        private DtoValueOfNullableOfBoolean _restricEmployees;
        private DtoValueOfNullableOfBoolean _restricEquipment;
        private DtoValueOfString _customerLocation;
        private VisibilityUpdateDto _visibility;
        private System.Collections.ObjectModel.ObservableCollection<TaskUpdateDto> _tasks;
        private System.Collections.ObjectModel.ObservableCollection<ProjectEmployeeUpdateDto> _employees;
    
        [Newtonsoft.Json.JsonProperty("projectID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectID
        {
            get { return _projectID; }
            set 
            {
                if (_projectID != value)
                {
                    _projectID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Template
        {
            get { return _template; }
            set 
            {
                if (_template != value)
                {
                    _template = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfProjectStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DefAccount
        {
            get { return _defAccount; }
            set 
            {
                if (_defAccount != value)
                {
                    _defAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DefSub
        {
            get { return _defSub; }
            set 
            {
                if (_defSub != value)
                {
                    _defSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defAccrualAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DefAccrualAccount
        {
            get { return _defAccrualAccount; }
            set 
            {
                if (_defAccrualAccount != value)
                {
                    _defAccrualAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defAccrualSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DefAccrualSub
        {
            get { return _defAccrualSub; }
            set 
            {
                if (_defAccrualSub != value)
                {
                    _defAccrualSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfNullableOfDateTime StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime EndDate
        {
            get { return _endDate; }
            set 
            {
                if (_endDate != value)
                {
                    _endDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("billingPeriod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfNullableOfBillingPeriod BillingPeriod
        {
            get { return _billingPeriod; }
            set 
            {
                if (_billingPeriod != value)
                {
                    _billingPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("allocationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AllocationRule
        {
            get { return _allocationRule; }
            set 
            {
                if (_allocationRule != value)
                {
                    _allocationRule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("billingRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BillingRule
        {
            get { return _billingRule; }
            set 
            {
                if (_billingRule != value)
                {
                    _billingRule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("rateTable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString RateTable
        {
            get { return _rateTable; }
            set 
            {
                if (_rateTable != value)
                {
                    _rateTable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectManger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectManger
        {
            get { return _projectManger; }
            set 
            {
                if (_projectManger != value)
                {
                    _projectManger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("autoAllocate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean AutoAllocate
        {
            get { return _autoAllocate; }
            set 
            {
                if (_autoAllocate != value)
                {
                    _autoAllocate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("automaticReleaseArDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean AutomaticReleaseArDoc
        {
            get { return _automaticReleaseArDoc; }
            set 
            {
                if (_automaticReleaseArDoc != value)
                {
                    _automaticReleaseArDoc = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("restricEmployees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean RestricEmployees
        {
            get { return _restricEmployees; }
            set 
            {
                if (_restricEmployees != value)
                {
                    _restricEmployees = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("restricEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean RestricEquipment
        {
            get { return _restricEquipment; }
            set 
            {
                if (_restricEquipment != value)
                {
                    _restricEquipment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerLocation
        {
            get { return _customerLocation; }
            set 
            {
                if (_customerLocation != value)
                {
                    _customerLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisibilityUpdateDto Visibility
        {
            get { return _visibility; }
            set 
            {
                if (_visibility != value)
                {
                    _visibility = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TaskUpdateDto> Tasks
        {
            get { return _tasks; }
            set 
            {
                if (_tasks != value)
                {
                    _tasks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ProjectEmployeeUpdateDto> Employees
        {
            get { return _employees; }
            set 
            {
                if (_employees != value)
                {
                    _employees = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfProjectStatus : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfProjectStatusValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfProjectStatusValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfProjectStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfProjectStatus>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfBillingPeriod : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBillingPeriodValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfBillingPeriodValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfBillingPeriod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfBillingPeriod>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VisibilityUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBoolean _visibleInGl;
        private DtoValueOfNullableOfBoolean _visibleInAp;
        private DtoValueOfNullableOfBoolean _visibleInAr;
        private DtoValueOfNullableOfBoolean _visibleInSo;
        private DtoValueOfNullableOfBoolean _visibleInPo;
        private DtoValueOfNullableOfBoolean _visibleInEp;
        private DtoValueOfNullableOfBoolean _visibleInIn;
        private DtoValueOfNullableOfBoolean _visibleInCa;
        private DtoValueOfNullableOfBoolean _visibleInCr;
    
        [Newtonsoft.Json.JsonProperty("visibleInGl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInGl
        {
            get { return _visibleInGl; }
            set 
            {
                if (_visibleInGl != value)
                {
                    _visibleInGl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInAp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInAp
        {
            get { return _visibleInAp; }
            set 
            {
                if (_visibleInAp != value)
                {
                    _visibleInAp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInAr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInAr
        {
            get { return _visibleInAr; }
            set 
            {
                if (_visibleInAr != value)
                {
                    _visibleInAr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInSo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInSo
        {
            get { return _visibleInSo; }
            set 
            {
                if (_visibleInSo != value)
                {
                    _visibleInSo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInPo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInPo
        {
            get { return _visibleInPo; }
            set 
            {
                if (_visibleInPo != value)
                {
                    _visibleInPo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInEp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInEp
        {
            get { return _visibleInEp; }
            set 
            {
                if (_visibleInEp != value)
                {
                    _visibleInEp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInIn
        {
            get { return _visibleInIn; }
            set 
            {
                if (_visibleInIn != value)
                {
                    _visibleInIn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInCa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInCa
        {
            get { return _visibleInCa; }
            set 
            {
                if (_visibleInCa != value)
                {
                    _visibleInCa = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibleInCr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean VisibleInCr
        {
            get { return _visibleInCr; }
            set 
            {
                if (_visibleInCr != value)
                {
                    _visibleInCr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VisibilityUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VisibilityUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TaskUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private TaskUpdateDtoOperation? _operation;
        private DtoValueOfString _taskId;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDateTime _plannedStart;
        private DtoValueOfNullableOfDateTime _plannedEnd;
        private DtoValueOfNullableOfDateTime _startDate;
        private DtoValueOfString _rateTable;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaskId
        {
            get { return _taskId; }
            set 
            {
                if (_taskId != value)
                {
                    _taskId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("plannedStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime PlannedStart
        {
            get { return _plannedStart; }
            set 
            {
                if (_plannedStart != value)
                {
                    _plannedStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("plannedEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime PlannedEnd
        {
            get { return _plannedEnd; }
            set 
            {
                if (_plannedEnd != value)
                {
                    _plannedEnd = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("rateTable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString RateTable
        {
            get { return _rateTable; }
            set 
            {
                if (_rateTable != value)
                {
                    _rateTable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TaskUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ProjectEmployeeUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private ProjectEmployeeUpdateDtoOperation? _operation;
        private DtoValueOfString _employeeId;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectEmployeeUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employeeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString EmployeeId
        {
            get { return _employeeId; }
            set 
            {
                if (_employeeId != value)
                {
                    _employeeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectEmployeeUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectEmployeeUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Order in PurchaseOrderController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseOrderDtoShippingDestinationType? _shippingDestinationType;
        private BAccountDescriptionDto _shipTo;
        private LocationIdNameDto _shippingLocation;
        private PurchaseOrderContactDto _shippingContact;
        private PurchaseOrderAddressDto _shippingAddress;
        private string _fobPoint;
        private string _shipVia;
        private PurchaseOrderContactDto _remitContact;
        private PurchaseOrderAddressDto _remitAddress;
        private CreditTermsDto _terms;
        private VatZoneDto _supplierVatZone;
        private System.Collections.ObjectModel.ObservableCollection<DiscountDetailDto> _discountDetails;
        private string _salesOrderType;
        private string _salesOrderNbr;
        private string _requisitionRefNbr;
        private string _paymentRefNbr;
        private int? _workgroupID;
        private bool? _dontPrint;
        private bool? _printed;
        private bool? _dontEmail;
        private bool? _emailed;
        private double? _openQuantity;
        private double? _openBalance;
        private PurchaseOrderDtoOrderType? _orderType;
        private string _orderNbr;
        private bool? _hold;
        private PurchaseOrderDtoStatus? _status;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _promisedOn;
        private string _description;
        private SupplierDescriptionDto _supplier;
        private LocationIdNameDto _location;
        private UserDescriptionDto _owner;
        private string _currency;
        private string _supplierRef;
        private double? _lineTotal;
        private double? _vatExemptTotal;
        private double? _taxTotal;
        private double? _orderTotal;
        private double? _controlTotal;
        private BranchNumberDto _branch;
        private System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineDto> _lines;
        private System.Collections.ObjectModel.ObservableCollection<TaxDetailDto> _taxDetails;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("shippingDestinationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderDtoShippingDestinationType? ShippingDestinationType
        {
            get { return _shippingDestinationType; }
            set 
            {
                if (_shippingDestinationType != value)
                {
                    _shippingDestinationType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BAccountDescriptionDto ShipTo
        {
            get { return _shipTo; }
            set 
            {
                if (_shipTo != value)
                {
                    _shipTo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationIdNameDto ShippingLocation
        {
            get { return _shippingLocation; }
            set 
            {
                if (_shippingLocation != value)
                {
                    _shippingLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchaseOrderContactDto ShippingContact
        {
            get { return _shippingContact; }
            set 
            {
                if (_shippingContact != value)
                {
                    _shippingContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchaseOrderAddressDto ShippingAddress
        {
            get { return _shippingAddress; }
            set 
            {
                if (_shippingAddress != value)
                {
                    _shippingAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fobPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FobPoint
        {
            get { return _fobPoint; }
            set 
            {
                if (_fobPoint != value)
                {
                    _fobPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipVia
        {
            get { return _shipVia; }
            set 
            {
                if (_shipVia != value)
                {
                    _shipVia = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchaseOrderContactDto RemitContact
        {
            get { return _remitContact; }
            set 
            {
                if (_remitContact != value)
                {
                    _remitContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchaseOrderAddressDto RemitAddress
        {
            get { return _remitAddress; }
            set 
            {
                if (_remitAddress != value)
                {
                    _remitAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto Terms
        {
            get { return _terms; }
            set 
            {
                if (_terms != value)
                {
                    _terms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierVatZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatZoneDto SupplierVatZone
        {
            get { return _supplierVatZone; }
            set 
            {
                if (_supplierVatZone != value)
                {
                    _supplierVatZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DiscountDetailDto> DiscountDetails
        {
            get { return _discountDetails; }
            set 
            {
                if (_discountDetails != value)
                {
                    _discountDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesOrderType
        {
            get { return _salesOrderType; }
            set 
            {
                if (_salesOrderType != value)
                {
                    _salesOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesOrderNbr
        {
            get { return _salesOrderNbr; }
            set 
            {
                if (_salesOrderNbr != value)
                {
                    _salesOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requisitionRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequisitionRefNbr
        {
            get { return _requisitionRefNbr; }
            set 
            {
                if (_requisitionRefNbr != value)
                {
                    _requisitionRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentRefNbr
        {
            get { return _paymentRefNbr; }
            set 
            {
                if (_paymentRefNbr != value)
                {
                    _paymentRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("workgroupID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkgroupID
        {
            get { return _workgroupID; }
            set 
            {
                if (_workgroupID != value)
                {
                    _workgroupID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dontPrint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DontPrint
        {
            get { return _dontPrint; }
            set 
            {
                if (_dontPrint != value)
                {
                    _dontPrint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Printed
        {
            get { return _printed; }
            set 
            {
                if (_printed != value)
                {
                    _printed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dontEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DontEmail
        {
            get { return _dontEmail; }
            set 
            {
                if (_dontEmail != value)
                {
                    _dontEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("emailed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Emailed
        {
            get { return _emailed; }
            set 
            {
                if (_emailed != value)
                {
                    _emailed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("openQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OpenQuantity
        {
            get { return _openQuantity; }
            set 
            {
                if (_openQuantity != value)
                {
                    _openQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("openBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OpenBalance
        {
            get { return _openBalance; }
            set 
            {
                if (_openBalance != value)
                {
                    _openBalance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderDtoOrderType? OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNbr
        {
            get { return _orderNbr; }
            set 
            {
                if (_orderNbr != value)
                {
                    _orderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promisedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PromisedOn
        {
            get { return _promisedOn; }
            set 
            {
                if (_promisedOn != value)
                {
                    _promisedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDescriptionDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationIdNameDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDescriptionDto Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LineTotal
        {
            get { return _lineTotal; }
            set 
            {
                if (_lineTotal != value)
                {
                    _lineTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxTotal
        {
            get { return _taxTotal; }
            set 
            {
                if (_taxTotal != value)
                {
                    _taxTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderTotal
        {
            get { return _orderTotal; }
            set 
            {
                if (_orderTotal != value)
                {
                    _orderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TaxDetailDto> TaxDetails
        {
            get { return _taxDetails; }
            set 
            {
                if (_taxDetails != value)
                {
                    _taxDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderContactDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _overrideContact;
        private int? _contactId;
        private string _name;
        private string _attention;
        private string _email;
        private string _web;
        private string _phone1;
        private string _phone2;
        private string _fax;
    
        [Newtonsoft.Json.JsonProperty("overrideContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideContact
        {
            get { return _overrideContact; }
            set 
            {
                if (_overrideContact != value)
                {
                    _overrideContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId
        {
            get { return _contactId; }
            set 
            {
                if (_contactId != value)
                {
                    _contactId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderContactDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderContactDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderAddressDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _overrideAddress;
        private int? _addressId;
        private string _addressLine1;
        private string _addressLine2;
        private string _addressLine3;
        private string _postalCode;
        private string _city;
        private CountryDto _country;
        private CountyDto _county;
    
        [Newtonsoft.Json.JsonProperty("overrideAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideAddress
        {
            get { return _overrideAddress; }
            set 
            {
                if (_overrideAddress != value)
                {
                    _overrideAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AddressId
        {
            get { return _addressId; }
            set 
            {
                if (_addressId != value)
                {
                    _addressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryDto Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountyDto County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderAddressDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderAddressDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DiscountDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNbr;
        private bool? _skipDiscount;
        private string _discountCode;
        private string _sequanceID;
        private DiscountDetailDtoType? _type;
        private bool? _manualDiscount;
        private double? _discountableAmt;
        private double? _discountableQty;
        private double? _discountAmt;
        private double? _discount;
        private int? _freeItem;
        private double? _freeItemQty;
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SkipDiscount
        {
            get { return _skipDiscount; }
            set 
            {
                if (_skipDiscount != value)
                {
                    _skipDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sequanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SequanceID
        {
            get { return _sequanceID; }
            set 
            {
                if (_sequanceID != value)
                {
                    _sequanceID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiscountDetailDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountableAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountableAmt
        {
            get { return _discountableAmt; }
            set 
            {
                if (_discountableAmt != value)
                {
                    _discountableAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountableQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountableQty
        {
            get { return _discountableQty; }
            set 
            {
                if (_discountableQty != value)
                {
                    _discountableQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmt
        {
            get { return _discountAmt; }
            set 
            {
                if (_discountAmt != value)
                {
                    _discountAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount
        {
            get { return _discount; }
            set 
            {
                if (_discount != value)
                {
                    _discount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freeItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FreeItem
        {
            get { return _freeItem; }
            set 
            {
                if (_freeItem != value)
                {
                    _freeItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freeItemQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FreeItemQty
        {
            get { return _freeItemQty; }
            set 
            {
                if (_freeItemQty != value)
                {
                    _freeItemQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DiscountDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalId;
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Order Line in PurchaseOrderController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNbr;
        private BranchNumberDto _branch;
        private InventoryNumberDescriptionDto _inventory;
        private PurchaseOrderLineDtoLineType? _lineType;
        private WarehouseIdDescriptionDto _warehouse;
        private string _lineDescription;
        private string _uom;
        private double? _orderQty;
        private double? _qtyOnReceipts;
        private double? _unitCost;
        private double? _extCost;
        private double? _discountPercent;
        private double? _discountAmount;
        private bool? _manualDiscount;
        private DiscountCodeNumberDescriptionDto _discountCode;
        private double? _amount;
        private double? _receivedAmt;
        private string _alternateId;
        private double? _minReceipt;
        private double? _maxReceipt;
        private double? _completeOn;
        private PurchaseOrderLineDtoReceiptAction? _receiptAction;
        private TaxCategoryNumberDescriptionDto _taxCategory;
        private AccountNumberTypeDescriptionDto _account;
        private SubAccountDto _sub;
        private ProjectIdDescriptionDto _project;
        private ProjectTaskIdDescriptionDto _projectTask;
        private System.DateTimeOffset? _requested;
        private System.DateTimeOffset? _promised;
        private bool? _completed;
        private bool? _canceled;
        private PurchaseOrderLineDtoOrderType? _orderType;
        private string _orderNumber;
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderLineDtoLineType? LineType
        {
            get { return _lineType; }
            set 
            {
                if (_lineType != value)
                {
                    _lineType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineDescription
        {
            get { return _lineDescription; }
            set 
            {
                if (_lineDescription != value)
                {
                    _lineDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderQty
        {
            get { return _orderQty; }
            set 
            {
                if (_orderQty != value)
                {
                    _orderQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("qtyOnReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QtyOnReceipts
        {
            get { return _qtyOnReceipts; }
            set 
            {
                if (_qtyOnReceipts != value)
                {
                    _qtyOnReceipts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiscountCodeNumberDescriptionDto DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receivedAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReceivedAmt
        {
            get { return _receivedAmt; }
            set 
            {
                if (_receivedAmt != value)
                {
                    _receivedAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("alternateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateId
        {
            get { return _alternateId; }
            set 
            {
                if (_alternateId != value)
                {
                    _alternateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("minReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinReceipt
        {
            get { return _minReceipt; }
            set 
            {
                if (_minReceipt != value)
                {
                    _minReceipt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxReceipt
        {
            get { return _maxReceipt; }
            set 
            {
                if (_maxReceipt != value)
                {
                    _maxReceipt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completeOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CompleteOn
        {
            get { return _completeOn; }
            set 
            {
                if (_completeOn != value)
                {
                    _completeOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderLineDtoReceiptAction? ReceiptAction
        {
            get { return _receiptAction; }
            set 
            {
                if (_receiptAction != value)
                {
                    _receiptAction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxCategoryNumberDescriptionDto TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Sub
        {
            get { return _sub; }
            set 
            {
                if (_sub != value)
                {
                    _sub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectIdDescriptionDto Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTaskIdDescriptionDto ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Requested
        {
            get { return _requested; }
            set 
            {
                if (_requested != value)
                {
                    _requested = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promised", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Promised
        {
            get { return _promised; }
            set 
            {
                if (_promised != value)
                {
                    _promised = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completed
        {
            get { return _completed; }
            set 
            {
                if (_completed != value)
                {
                    _completed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Canceled
        {
            get { return _canceled; }
            set 
            {
                if (_canceled != value)
                {
                    _canceled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderLineDtoOrderType? OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber
        {
            get { return _orderNumber; }
            set 
            {
                if (_orderNumber != value)
                {
                    _orderNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Tax Detail Line for Purchase Order in PurchaseOrderController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TaxDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _recordId;
        private TaxNumberDescriptionDto _vatId;
        private double? _vatRate;
        private double? _taxableAmount;
        private double? _vatAmount;
    
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordId
        {
            get { return _recordId; }
            set 
            {
                if (_recordId != value)
                {
                    _recordId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxNumberDescriptionDto VatId
        {
            get { return _vatId; }
            set 
            {
                if (_vatId != value)
                {
                    _vatId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatRate
        {
            get { return _vatRate; }
            set 
            {
                if (_vatRate != value)
                {
                    _vatRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxableAmount
        {
            get { return _taxableAmount; }
            set 
            {
                if (_taxableAmount != value)
                {
                    _taxableAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatAmount
        {
            get { return _vatAmount; }
            set 
            {
                if (_vatAmount != value)
                {
                    _vatAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TaxDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DiscountCodeNumberDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DiscountCodeNumberDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountCodeNumberDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private PurchaseOrderQueryParametersOrderType? _orderType;
        private PurchaseOrderQueryParametersOrderStatus? _orderStatus;
        private string _supplier;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderQueryParametersOrderType? OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderQueryParametersOrderStatus? OrderStatus
        {
            get { return _orderStatus; }
            set 
            {
                if (_orderStatus != value)
                {
                    _orderStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Purchase Order in Purchase Order Controller. Used to pass data to server for creating or updating an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPOShippingDestinationType _shippingDestinationType;
        private DtoValueOfString _shipTo;
        private DtoValueOfString _shippingLocation;
        private DtoValueOfPurchaseOrderContactUpdateDto _shippingContact;
        private DtoValueOfPurchaseOrderAddressUpdateDto _shippingAddress;
        private DtoValueOfString _fobPoint;
        private DtoValueOfString _shipVia;
        private DtoValueOfPurchaseOrderContactUpdateDto _remitContact;
        private DtoValueOfPurchaseOrderAddressUpdateDto _remitAddress;
        private DtoValueOfString _terms;
        private DtoValueOfString _supplierVatZone;
        private System.Collections.ObjectModel.ObservableCollection<DiscountDetailUpdateDto> _discountDetails;
        private DtoValueOfNullableOfBoolean _dontPrint;
        private DtoValueOfNullableOfBoolean _dontEmail;
        private DtoValueOfNullableOfPurchaseOrderType _orderType;
        private DtoValueOfString _orderNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfNullableOfDateTime _promisedOn;
        private DtoValueOfString _description;
        private DtoValueOfString _supplier;
        private DtoValueOfString _location;
        private DtoValueOfNullableOfGuid _owner;
        private DtoValueOfString _currency;
        private DtoValueOfString _supplierRef;
        private DtoValueOfNullableOfDecimal _controlTotal;
        private DtoValueOfString _branch;
        private System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineUpdateDto> _lines;
        private bool? _changeDatesOnLines;
    
        [Newtonsoft.Json.JsonProperty("shippingDestinationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPOShippingDestinationType ShippingDestinationType
        {
            get { return _shippingDestinationType; }
            set 
            {
                if (_shippingDestinationType != value)
                {
                    _shippingDestinationType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShipTo
        {
            get { return _shipTo; }
            set 
            {
                if (_shipTo != value)
                {
                    _shipTo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShippingLocation
        {
            get { return _shippingLocation; }
            set 
            {
                if (_shippingLocation != value)
                {
                    _shippingLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPurchaseOrderContactUpdateDto ShippingContact
        {
            get { return _shippingContact; }
            set 
            {
                if (_shippingContact != value)
                {
                    _shippingContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPurchaseOrderAddressUpdateDto ShippingAddress
        {
            get { return _shippingAddress; }
            set 
            {
                if (_shippingAddress != value)
                {
                    _shippingAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fobPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FobPoint
        {
            get { return _fobPoint; }
            set 
            {
                if (_fobPoint != value)
                {
                    _fobPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShipVia
        {
            get { return _shipVia; }
            set 
            {
                if (_shipVia != value)
                {
                    _shipVia = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPurchaseOrderContactUpdateDto RemitContact
        {
            get { return _remitContact; }
            set 
            {
                if (_remitContact != value)
                {
                    _remitContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPurchaseOrderAddressUpdateDto RemitAddress
        {
            get { return _remitAddress; }
            set 
            {
                if (_remitAddress != value)
                {
                    _remitAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Terms
        {
            get { return _terms; }
            set 
            {
                if (_terms != value)
                {
                    _terms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierVatZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierVatZone
        {
            get { return _supplierVatZone; }
            set 
            {
                if (_supplierVatZone != value)
                {
                    _supplierVatZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DiscountDetailUpdateDto> DiscountDetails
        {
            get { return _discountDetails; }
            set 
            {
                if (_discountDetails != value)
                {
                    _discountDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dontPrint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean DontPrint
        {
            get { return _dontPrint; }
            set 
            {
                if (_dontPrint != value)
                {
                    _dontPrint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dontEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean DontEmail
        {
            get { return _dontEmail; }
            set 
            {
                if (_dontEmail != value)
                {
                    _dontEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPurchaseOrderType OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrderNumber
        {
            get { return _orderNumber; }
            set 
            {
                if (_orderNumber != value)
                {
                    _orderNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promisedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime PromisedOn
        {
            get { return _promisedOn; }
            set 
            {
                if (_promisedOn != value)
                {
                    _promisedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfGuid Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("changeDatesOnLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChangeDatesOnLines
        {
            get { return _changeDatesOnLines; }
            set 
            {
                if (_changeDatesOnLines != value)
                {
                    _changeDatesOnLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfPOShippingDestinationType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPOShippingDestinationTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfPOShippingDestinationTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfPOShippingDestinationType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfPOShippingDestinationType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfPurchaseOrderContactUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseOrderContactUpdateDto _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchaseOrderContactUpdateDto Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfPurchaseOrderContactUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfPurchaseOrderContactUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfPurchaseOrderAddressUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseOrderAddressUpdateDto _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchaseOrderAddressUpdateDto Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfPurchaseOrderAddressUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfPurchaseOrderAddressUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Discount Detail for Purchase Order in Purchase Order Controller. Used to pass data to server for creating or updating an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DiscountDetailUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DiscountDetailUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNbr;
        private DtoValueOfNullableOfBoolean _skipDiscount;
        private DtoValueOfString _discountCode;
        private DtoValueOfString _sequanceID;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiscountDetailUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean SkipDiscount
        {
            get { return _skipDiscount; }
            set 
            {
                if (_skipDiscount != value)
                {
                    _skipDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sequanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SequanceID
        {
            get { return _sequanceID; }
            set 
            {
                if (_sequanceID != value)
                {
                    _sequanceID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DiscountDetailUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountDetailUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfPurchaseOrderType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPurchaseOrderTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfPurchaseOrderTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfPurchaseOrderType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfPurchaseOrderType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfGuid : System.ComponentModel.INotifyPropertyChanged
    {
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfGuid FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfGuid>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Purchase Order Line in Purchase Order Controller. Used to pass data to server for creating or updating an order line</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseOrderLineUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNumber;
        private DtoValueOfString _branch;
        private DtoValueOfString _inventory;
        private DtoValueOfNullableOfPoLineType _lineType;
        private DtoValueOfString _warehouse;
        private DtoValueOfString _lineDescription;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _orderQty;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _extCost;
        private DtoValueOfNullableOfDecimal _discountPercent;
        private DtoValueOfNullableOfBoolean _manualDiscount;
        private DtoValueOfString _discountCode;
        private DtoValueOfNullableOfDecimal _amount;
        private DtoValueOfString _alternateId;
        private DtoValueOfNullableOfDecimal _minReceipt;
        private DtoValueOfNullableOfDecimal _maxReceipt;
        private DtoValueOfNullableOfDecimal _completeOn;
        private DtoValueOfNullableOfPurchaseOrderReceiptAction _receiptAction;
        private DtoValueOfString _taxCategory;
        private DtoValueOfString _account;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _sub;
        private DtoValueOfString _project;
        private DtoValueOfString _projectTask;
        private DtoValueOfNullableOfDateTime _requested;
        private DtoValueOfNullableOfDateTime _promised;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPoLineType LineType
        {
            get { return _lineType; }
            set 
            {
                if (_lineType != value)
                {
                    _lineType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LineDescription
        {
            get { return _lineDescription; }
            set 
            {
                if (_lineDescription != value)
                {
                    _lineDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal OrderQty
        {
            get { return _orderQty; }
            set 
            {
                if (_orderQty != value)
                {
                    _orderQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("alternateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AlternateId
        {
            get { return _alternateId; }
            set 
            {
                if (_alternateId != value)
                {
                    _alternateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("minReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal MinReceipt
        {
            get { return _minReceipt; }
            set 
            {
                if (_minReceipt != value)
                {
                    _minReceipt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal MaxReceipt
        {
            get { return _maxReceipt; }
            set 
            {
                if (_maxReceipt != value)
                {
                    _maxReceipt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completeOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal CompleteOn
        {
            get { return _completeOn; }
            set 
            {
                if (_completeOn != value)
                {
                    _completeOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPurchaseOrderReceiptAction ReceiptAction
        {
            get { return _receiptAction; }
            set 
            {
                if (_receiptAction != value)
                {
                    _receiptAction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Sub
        {
            get { return _sub; }
            set 
            {
                if (_sub != value)
                {
                    _sub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Requested
        {
            get { return _requested; }
            set 
            {
                if (_requested != value)
                {
                    _requested = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promised", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Promised
        {
            get { return _promised; }
            set 
            {
                if (_promised != value)
                {
                    _promised = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderContactUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBoolean _overrideContact;
        private DtoValueOfString _name;
        private DtoValueOfString _attention;
        private DtoValueOfString _email;
        private DtoValueOfString _web;
        private DtoValueOfString _phone1;
        private DtoValueOfString _phone2;
        private DtoValueOfString _fax;
    
        [Newtonsoft.Json.JsonProperty("overrideContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean OverrideContact
        {
            get { return _overrideContact; }
            set 
            {
                if (_overrideContact != value)
                {
                    _overrideContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderContactUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderContactUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderAddressUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBoolean _overrideAddress;
        private DtoValueOfString _addressLine1;
        private DtoValueOfString _addressLine2;
        private DtoValueOfString _addressLine3;
        private DtoValueOfString _postalCode;
        private DtoValueOfString _city;
        private DtoValueOfString _countryId;
        private DtoValueOfString _county;
    
        [Newtonsoft.Json.JsonProperty("overrideAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean OverrideAddress
        {
            get { return _overrideAddress; }
            set 
            {
                if (_overrideAddress != value)
                {
                    _overrideAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CountryId
        {
            get { return _countryId; }
            set 
            {
                if (_countryId != value)
                {
                    _countryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderAddressUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderAddressUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfPoLineType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPoLineTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfPoLineTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfPoLineType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfPoLineType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfPurchaseOrderReceiptAction : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPurchaseOrderReceiptActionValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfPurchaseOrderReceiptActionValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfPurchaseOrderReceiptAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfPurchaseOrderReceiptAction>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Order in PurchaseOrderController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderBasicDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseOrderBasicDtoOrderType? _orderType;
        private string _orderNbr;
        private bool? _hold;
        private PurchaseOrderBasicDtoStatus? _status;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _promisedOn;
        private string _description;
        private SupplierDescriptionDto _supplier;
        private LocationIdNameDto _location;
        private UserDescriptionDto _owner;
        private string _currency;
        private string _supplierRef;
        private double? _lineTotal;
        private double? _vatExemptTotal;
        private double? _taxTotal;
        private double? _orderTotal;
        private double? _controlTotal;
        private BranchNumberDto _branch;
        private System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineDto> _lines;
        private System.Collections.ObjectModel.ObservableCollection<TaxDetailDto> _taxDetails;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderBasicDtoOrderType? OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNbr
        {
            get { return _orderNbr; }
            set 
            {
                if (_orderNbr != value)
                {
                    _orderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderBasicDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promisedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PromisedOn
        {
            get { return _promisedOn; }
            set 
            {
                if (_promisedOn != value)
                {
                    _promisedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDescriptionDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationIdNameDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDescriptionDto Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LineTotal
        {
            get { return _lineTotal; }
            set 
            {
                if (_lineTotal != value)
                {
                    _lineTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxTotal
        {
            get { return _taxTotal; }
            set 
            {
                if (_taxTotal != value)
                {
                    _taxTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderTotal
        {
            get { return _orderTotal; }
            set 
            {
                if (_orderTotal != value)
                {
                    _orderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TaxDetailDto> TaxDetails
        {
            get { return _taxDetails; }
            set 
            {
                if (_taxDetails != value)
                {
                    _taxDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderBasicDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderBasicDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Purchase Order in Purchase Order Controller. Used to pass data to server for creating or updating an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseOrderBasicUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfPurchaseOrderType _orderType;
        private DtoValueOfString _orderNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfNullableOfDateTime _promisedOn;
        private DtoValueOfString _description;
        private DtoValueOfString _supplier;
        private DtoValueOfString _location;
        private DtoValueOfNullableOfGuid _owner;
        private DtoValueOfString _currency;
        private DtoValueOfString _supplierRef;
        private DtoValueOfNullableOfDecimal _controlTotal;
        private DtoValueOfString _branch;
        private System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineUpdateDto> _lines;
        private bool? _changeDatesOnLines;
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPurchaseOrderType OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrderNumber
        {
            get { return _orderNumber; }
            set 
            {
                if (_orderNumber != value)
                {
                    _orderNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("promisedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime PromisedOn
        {
            get { return _promisedOn; }
            set 
            {
                if (_promisedOn != value)
                {
                    _promisedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfGuid Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseOrderLineUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("changeDatesOnLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChangeDatesOnLines
        {
            get { return _changeDatesOnLines; }
            set 
            {
                if (_changeDatesOnLines != value)
                {
                    _changeDatesOnLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseOrderBasicUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseOrderBasicUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Receipt in PurchaseReceiptController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<LandedCostDto> _landedCost;
        private PurchaseReceiptDtoReceiptType? _receiptType;
        private string _receiptNbr;
        private bool? _hold;
        private PurchaseReceiptDtoStatus? _status;
        private System.DateTimeOffset? _date;
        private string _postPeriod;
        private WarehouseIdDescriptionDto _warehouse;
        private SupplierDescriptionDto _supplier;
        private LocationDto _location;
        private string _currency;
        private bool? _createBill;
        private string _supplierRef;
        private double? _totalQty;
        private double? _controlQty;
        private double? _vatExemptTotal;
        private double? _vatTaxableTotal;
        private double? _totalAmt;
        private double? _controlTotal;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineDto> _lines;
    
        [Newtonsoft.Json.JsonProperty("landedCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<LandedCostDto> LandedCost
        {
            get { return _landedCost; }
            set 
            {
                if (_landedCost != value)
                {
                    _landedCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptDtoReceiptType? ReceiptType
        {
            get { return _receiptType; }
            set 
            {
                if (_receiptType != value)
                {
                    _receiptType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiptNbr
        {
            get { return _receiptNbr; }
            set 
            {
                if (_receiptNbr != value)
                {
                    _receiptNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDescriptionDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createBill", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateBill
        {
            get { return _createBill; }
            set 
            {
                if (_createBill != value)
                {
                    _createBill = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalQty
        {
            get { return _totalQty; }
            set 
            {
                if (_totalQty != value)
                {
                    _totalQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlQty
        {
            get { return _controlQty; }
            set 
            {
                if (_controlQty != value)
                {
                    _controlQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmt
        {
            get { return _totalAmt; }
            set 
            {
                if (_totalAmt != value)
                {
                    _totalAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Landed Cost Line for Purchase Receipt in PurchaseReceiptController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LandedCostDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNbr;
        private string _landedCostCode;
        private string _description;
        private string _purchaseInvoiceNbr;
        private SupplierDescriptionDto _supplier;
        private LocationDto _location;
        private System.DateTimeOffset? _apBillDate;
        private string _currency;
        private double? _amount;
        private TaxCategoryNumberDescriptionDto _taxCategory;
        private CreditTermsDto _terms;
        private InventoryNumberDescriptionDto _inventory;
        private LandedCostDtoApDocType? _apDocType;
        private string _apRefNbr;
        private LandedCostDtoInDocType? _inDocType;
        private string _inRefNbr;
        private bool? _postponePurchaseInvoiceCreation;
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("landedCostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LandedCostCode
        {
            get { return _landedCostCode; }
            set 
            {
                if (_landedCostCode != value)
                {
                    _landedCostCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchaseInvoiceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseInvoiceNbr
        {
            get { return _purchaseInvoiceNbr; }
            set 
            {
                if (_purchaseInvoiceNbr != value)
                {
                    _purchaseInvoiceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDescriptionDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("apBillDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ApBillDate
        {
            get { return _apBillDate; }
            set 
            {
                if (_apBillDate != value)
                {
                    _apBillDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxCategoryNumberDescriptionDto TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto Terms
        {
            get { return _terms; }
            set 
            {
                if (_terms != value)
                {
                    _terms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("apDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LandedCostDtoApDocType? ApDocType
        {
            get { return _apDocType; }
            set 
            {
                if (_apDocType != value)
                {
                    _apDocType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("apRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApRefNbr
        {
            get { return _apRefNbr; }
            set 
            {
                if (_apRefNbr != value)
                {
                    _apRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LandedCostDtoInDocType? InDocType
        {
            get { return _inDocType; }
            set 
            {
                if (_inDocType != value)
                {
                    _inDocType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InRefNbr
        {
            get { return _inRefNbr; }
            set 
            {
                if (_inRefNbr != value)
                {
                    _inRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postponePurchaseInvoiceCreation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostponePurchaseInvoiceCreation
        {
            get { return _postponePurchaseInvoiceCreation; }
            set 
            {
                if (_postponePurchaseInvoiceCreation != value)
                {
                    _postponePurchaseInvoiceCreation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LandedCostDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LandedCostDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Order Line in PurchaseReceiptContraoller. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<AllocationsDto> _allocations;
        private int? _lineNbr;
        private BranchNumberDto _branch;
        private BranchNumberDto _branchNumber;
        private InventoryNumberDescriptionDto _inventory;
        private PurchaseReceiptLineDtoLineType? _lineType;
        private WarehouseIdDescriptionDto _warehouse;
        private LocationDto _location;
        private string _transactionDescription;
        private string _uom;
        private double? _orderQty;
        private double? _openQty;
        private double? _receiptQty;
        private double? _unitCost;
        private double? _extCost;
        private double? _discountPercent;
        private double? _discountAmount;
        private bool? _manualDiscount;
        private DiscountCodeNumberDescriptionDto _discountCode;
        private double? _amount;
        private TaxCategoryNumberDescriptionDto _taxCategory;
        private AccountNumberTypeDescriptionDto _account;
        private string _accountDescription;
        private SubAccountDescriptionDto _sub;
        private AccountNumberTypeDescriptionDto _actualAccount;
        private SubAccountDescriptionDto _actualSub;
        private ProjectIdDescriptionDto _project;
        private ProjectTaskIdDescriptionDto _projectTask;
        private System.DateTimeOffset? _expirationDate;
        private string _lotSerialNumber;
        private PurchaseReceiptLineDtoPoOrderType? _poOrderType;
        private string _poOrderNbr;
        private int? _poOrderLineNbr;
        private PurchaseReceiptLineDtoTransferOrderType? _transferOrderType;
        private string _transferOrderNbr;
        private int? _transferOrderLineNbr;
        private bool? _completePoLine;
    
        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AllocationsDto> Allocations
        {
            get { return _allocations; }
            set 
            {
                if (_allocations != value)
                {
                    _allocations = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Branch is deprecated, please use BranchNumber instead.</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptLineDtoLineType? LineType
        {
            get { return _lineType; }
            set 
            {
                if (_lineType != value)
                {
                    _lineType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionDescription
        {
            get { return _transactionDescription; }
            set 
            {
                if (_transactionDescription != value)
                {
                    _transactionDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderQty
        {
            get { return _orderQty; }
            set 
            {
                if (_orderQty != value)
                {
                    _orderQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("openQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OpenQty
        {
            get { return _openQty; }
            set 
            {
                if (_openQty != value)
                {
                    _openQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReceiptQty
        {
            get { return _receiptQty; }
            set 
            {
                if (_receiptQty != value)
                {
                    _receiptQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiscountCodeNumberDescriptionDto DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxCategoryNumberDescriptionDto TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountDescription
        {
            get { return _accountDescription; }
            set 
            {
                if (_accountDescription != value)
                {
                    _accountDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto Sub
        {
            get { return _sub; }
            set 
            {
                if (_sub != value)
                {
                    _sub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actualAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberTypeDescriptionDto ActualAccount
        {
            get { return _actualAccount; }
            set 
            {
                if (_actualAccount != value)
                {
                    _actualAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actualSub", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto ActualSub
        {
            get { return _actualSub; }
            set 
            {
                if (_actualSub != value)
                {
                    _actualSub = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectIdDescriptionDto Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTaskIdDescriptionDto ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotSerialNumber
        {
            get { return _lotSerialNumber; }
            set 
            {
                if (_lotSerialNumber != value)
                {
                    _lotSerialNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptLineDtoPoOrderType? PoOrderType
        {
            get { return _poOrderType; }
            set 
            {
                if (_poOrderType != value)
                {
                    _poOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoOrderNbr
        {
            get { return _poOrderNbr; }
            set 
            {
                if (_poOrderNbr != value)
                {
                    _poOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poOrderLineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PoOrderLineNbr
        {
            get { return _poOrderLineNbr; }
            set 
            {
                if (_poOrderLineNbr != value)
                {
                    _poOrderLineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptLineDtoTransferOrderType? TransferOrderType
        {
            get { return _transferOrderType; }
            set 
            {
                if (_transferOrderType != value)
                {
                    _transferOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferOrderNbr
        {
            get { return _transferOrderNbr; }
            set 
            {
                if (_transferOrderNbr != value)
                {
                    _transferOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderLineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TransferOrderLineNbr
        {
            get { return _transferOrderLineNbr; }
            set 
            {
                if (_transferOrderLineNbr != value)
                {
                    _transferOrderLineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completePoLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletePoLine
        {
            get { return _completePoLine; }
            set 
            {
                if (_completePoLine != value)
                {
                    _completePoLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Allocations for Purchase Receipt Line in PurchaseReceiptController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AllocationsDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNbr;
        private LocationDto _location;
        private string _lotSerialNumber;
        private double? _quantity;
        private string _uom;
        private System.DateTimeOffset? _expirationDate;
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotSerialNumber
        {
            get { return _lotSerialNumber; }
            set 
            {
                if (_lotSerialNumber != value)
                {
                    _lotSerialNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AllocationsDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AllocationsDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseReceiptQueryParametersReceiptType? _receiptType;
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("receiptType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptQueryParametersReceiptType? ReceiptType
        {
            get { return _receiptType; }
            set 
            {
                if (_receiptType != value)
                {
                    _receiptType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Receipt in PurchaseReceiptController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineUpdateDto> _lines;
        private System.Collections.ObjectModel.ObservableCollection<LandedCostUpdateDto> _landedCost;
        private DtoValueOfPurchaseReceiptType _receiptType;
        private DtoValueOfString _receiptNbr;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _warehouseId;
        private DtoValueOfString _supplierId;
        private DtoValueOfString _locationId;
        private DtoValueOfString _currency;
        private DtoValueOfNullableOfBoolean _createBill;
        private DtoValueOfString _supplierRef;
        private DtoValueOfNullableOfDecimal _controlQty;
        private DtoValueOfNullableOfDecimal _controlAmount;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("landedCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<LandedCostUpdateDto> LandedCost
        {
            get { return _landedCost; }
            set 
            {
                if (_landedCost != value)
                {
                    _landedCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPurchaseReceiptType ReceiptType
        {
            get { return _receiptType; }
            set 
            {
                if (_receiptType != value)
                {
                    _receiptType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReceiptNbr
        {
            get { return _receiptNbr; }
            set 
            {
                if (_receiptNbr != value)
                {
                    _receiptNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierId
        {
            get { return _supplierId; }
            set 
            {
                if (_supplierId != value)
                {
                    _supplierId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createBill", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean CreateBill
        {
            get { return _createBill; }
            set 
            {
                if (_createBill != value)
                {
                    _createBill = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlQty
        {
            get { return _controlQty; }
            set 
            {
                if (_controlQty != value)
                {
                    _controlQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlAmount
        {
            get { return _controlAmount; }
            set 
            {
                if (_controlAmount != value)
                {
                    _controlAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Order Line in PurchaseReceiptContraoller. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<AllocationsUpdateDto> _allocations;
        private PurchaseReceiptLineUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNbr;
        private DtoValueOfNullableOfPoLineType _lineType;
        private DtoValueOfString _branchId;
        private DtoValueOfString _branchNumber;
        private DtoValueOfString _inventoryId;
        private DtoValueOfString _warehouseId;
        private DtoValueOfString _locationId;
        private DtoValueOfString _transactionDescription;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _receiptQty;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _extCost;
        private DtoValueOfNullableOfDecimal _discountPercent;
        private DtoValueOfNullableOfDecimal _discountAmount;
        private DtoValueOfNullableOfBoolean _manualDiscount;
        private DtoValueOfString _discountCodeId;
        private DtoValueOfNullableOfDecimal _amount;
        private DtoValueOfString _taxCategoryId;
        private DtoValueOfString _accountId;
        private DtoValueOfString _accountDescription;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfString _actualAccountId;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _actualSubaccount;
        private DtoValueOfString _projectId;
        private DtoValueOfString _projectTaskId;
        private DtoValueOfNullableOfDateTime _expirationDate;
        private DtoValueOfString _lotSerialNumber;
        private DtoValueOfNullableOfPurchaseOrderType _poOrderType;
        private DtoValueOfString _poOrderNbr;
        private DtoValueOfNullableOfInt32 _poOrderLineNbr;
        private DtoValueOfNullableOfSalesOrderTypes _transferOrderType;
        private DtoValueOfString _transferOrderNbr;
        private DtoValueOfNullableOfInt32 _transferOrderLineNbr;
        private DtoValueOfNullableOfBoolean _completePoLine;
    
        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AllocationsUpdateDto> Allocations
        {
            get { return _allocations; }
            set 
            {
                if (_allocations != value)
                {
                    _allocations = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPoLineType LineType
        {
            get { return _lineType; }
            set 
            {
                if (_lineType != value)
                {
                    _lineType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>BranchId is deprecated, please use BranchNumber instead.</summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchId
        {
            get { return _branchId; }
            set 
            {
                if (_branchId != value)
                {
                    _branchId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransactionDescription
        {
            get { return _transactionDescription; }
            set 
            {
                if (_transactionDescription != value)
                {
                    _transactionDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ReceiptQty
        {
            get { return _receiptQty; }
            set 
            {
                if (_receiptQty != value)
                {
                    _receiptQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCodeId
        {
            get { return _discountCodeId; }
            set 
            {
                if (_discountCodeId != value)
                {
                    _discountCodeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaxCategoryId
        {
            get { return _taxCategoryId; }
            set 
            {
                if (_taxCategoryId != value)
                {
                    _taxCategoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountDescription
        {
            get { return _accountDescription; }
            set 
            {
                if (_accountDescription != value)
                {
                    _accountDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actualAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ActualAccountId
        {
            get { return _actualAccountId; }
            set 
            {
                if (_actualAccountId != value)
                {
                    _actualAccountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actualSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> ActualSubaccount
        {
            get { return _actualSubaccount; }
            set 
            {
                if (_actualSubaccount != value)
                {
                    _actualSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectId
        {
            get { return _projectId; }
            set 
            {
                if (_projectId != value)
                {
                    _projectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectTaskId
        {
            get { return _projectTaskId; }
            set 
            {
                if (_projectTaskId != value)
                {
                    _projectTaskId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LotSerialNumber
        {
            get { return _lotSerialNumber; }
            set 
            {
                if (_lotSerialNumber != value)
                {
                    _lotSerialNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Deprecated, property will be replaced by an action</summary>
        [Newtonsoft.Json.JsonProperty("poOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPurchaseOrderType PoOrderType
        {
            get { return _poOrderType; }
            set 
            {
                if (_poOrderType != value)
                {
                    _poOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Deprecated, property will be replaced by an action</summary>
        [Newtonsoft.Json.JsonProperty("poOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PoOrderNbr
        {
            get { return _poOrderNbr; }
            set 
            {
                if (_poOrderNbr != value)
                {
                    _poOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Deprecated, property will be replaced by an action</summary>
        [Newtonsoft.Json.JsonProperty("poOrderLineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 PoOrderLineNbr
        {
            get { return _poOrderLineNbr; }
            set 
            {
                if (_poOrderLineNbr != value)
                {
                    _poOrderLineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfSalesOrderTypes TransferOrderType
        {
            get { return _transferOrderType; }
            set 
            {
                if (_transferOrderType != value)
                {
                    _transferOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransferOrderNbr
        {
            get { return _transferOrderNbr; }
            set 
            {
                if (_transferOrderNbr != value)
                {
                    _transferOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderLineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 TransferOrderLineNbr
        {
            get { return _transferOrderLineNbr; }
            set 
            {
                if (_transferOrderLineNbr != value)
                {
                    _transferOrderLineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completePoLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean CompletePoLine
        {
            get { return _completePoLine; }
            set 
            {
                if (_completePoLine != value)
                {
                    _completePoLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Landed Cost Line for Purchase Receipt in PurchaseReceiptController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class LandedCostUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private LandedCostUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNbr;
        private DtoValueOfString _landedCostCode;
        private DtoValueOfString _description;
        private DtoValueOfString _purchaseInvoiceNbr;
        private DtoValueOfString _supplierId;
        private DtoValueOfString _locationId;
        private DtoValueOfNullableOfDateTime _apBillDate;
        private DtoValueOfString _currency;
        private DtoValueOfNullableOfDecimal _amount;
        private DtoValueOfString _taxCategory;
        private DtoValueOfString _terms;
        private DtoValueOfString _inventoryId;
        private DtoValueOfNullableOfSupplierDocumentType _apDocType;
        private DtoValueOfString _apRefNbr;
        private DtoValueOfCustomerDocumentTypes _inDocType;
        private DtoValueOfString _inRefNbr;
        private DtoValueOfNullableOfBoolean _postponePurchaseInvoiceCreation;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LandedCostUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("landedCostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LandedCostCode
        {
            get { return _landedCostCode; }
            set 
            {
                if (_landedCostCode != value)
                {
                    _landedCostCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchaseInvoiceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PurchaseInvoiceNbr
        {
            get { return _purchaseInvoiceNbr; }
            set 
            {
                if (_purchaseInvoiceNbr != value)
                {
                    _purchaseInvoiceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierId
        {
            get { return _supplierId; }
            set 
            {
                if (_supplierId != value)
                {
                    _supplierId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("apBillDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ApBillDate
        {
            get { return _apBillDate; }
            set 
            {
                if (_apBillDate != value)
                {
                    _apBillDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Terms
        {
            get { return _terms; }
            set 
            {
                if (_terms != value)
                {
                    _terms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("apDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfSupplierDocumentType ApDocType
        {
            get { return _apDocType; }
            set 
            {
                if (_apDocType != value)
                {
                    _apDocType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("apRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ApRefNbr
        {
            get { return _apRefNbr; }
            set 
            {
                if (_apRefNbr != value)
                {
                    _apRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfCustomerDocumentTypes InDocType
        {
            get { return _inDocType; }
            set 
            {
                if (_inDocType != value)
                {
                    _inDocType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InRefNbr
        {
            get { return _inRefNbr; }
            set 
            {
                if (_inRefNbr != value)
                {
                    _inRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postponePurchaseInvoiceCreation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean PostponePurchaseInvoiceCreation
        {
            get { return _postponePurchaseInvoiceCreation; }
            set 
            {
                if (_postponePurchaseInvoiceCreation != value)
                {
                    _postponePurchaseInvoiceCreation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LandedCostUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LandedCostUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfPurchaseReceiptType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfPurchaseReceiptTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfPurchaseReceiptTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfPurchaseReceiptType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfPurchaseReceiptType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Allocations for Purchase Receipt Line in PurchaseReceiptEndpoint. Used to add/update data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class AllocationsUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private AllocationsUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNbr;
        private DtoValueOfString _location;
        private DtoValueOfString _lotSerialNumber;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDateTime _expirationDate;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AllocationsUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LotSerialNumber
        {
            get { return _lotSerialNumber; }
            set 
            {
                if (_lotSerialNumber != value)
                {
                    _lotSerialNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AllocationsUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AllocationsUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfSalesOrderTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfSalesOrderTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfSalesOrderTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfSalesOrderTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfSalesOrderTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfSupplierDocumentType : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfSupplierDocumentTypeValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfSupplierDocumentTypeValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfSupplierDocumentType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfSupplierDocumentType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReleasePurchaseReceiptActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private ReleasePurchaseReceiptActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReleasePurchaseReceiptActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleasePurchaseReceiptActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleasePurchaseReceiptActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Receipt in PurchaseReceiptController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptBasicDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseReceiptBasicDtoReceiptType? _receiptType;
        private string _receiptNbr;
        private bool? _hold;
        private PurchaseReceiptBasicDtoStatus? _status;
        private System.DateTimeOffset? _date;
        private string _postPeriod;
        private WarehouseIdDescriptionDto _warehouse;
        private SupplierDescriptionDto _supplier;
        private LocationDto _location;
        private string _currency;
        private bool? _createBill;
        private string _supplierRef;
        private double? _totalQty;
        private double? _controlQty;
        private double? _vatExemptTotal;
        private double? _vatTaxableTotal;
        private double? _totalAmt;
        private double? _controlTotal;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private BranchNumberDto _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineDto> _lines;
    
        [Newtonsoft.Json.JsonProperty("receiptType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptBasicDtoReceiptType? ReceiptType
        {
            get { return _receiptType; }
            set 
            {
                if (_receiptType != value)
                {
                    _receiptType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiptNbr
        {
            get { return _receiptNbr; }
            set 
            {
                if (_receiptNbr != value)
                {
                    _receiptNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptBasicDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDescriptionDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createBill", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateBill
        {
            get { return _createBill; }
            set 
            {
                if (_createBill != value)
                {
                    _createBill = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalQty
        {
            get { return _totalQty; }
            set 
            {
                if (_totalQty != value)
                {
                    _totalQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlQty
        {
            get { return _controlQty; }
            set 
            {
                if (_controlQty != value)
                {
                    _controlQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmt
        {
            get { return _totalAmt; }
            set 
            {
                if (_totalAmt != value)
                {
                    _totalAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlTotal
        {
            get { return _controlTotal; }
            set 
            {
                if (_controlTotal != value)
                {
                    _controlTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptBasicDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptBasicDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Receipt in PurchaseReceiptBasicController. Used for adding data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptBasicUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineBasicUpdateDto> _lines;
        private DtoValueOfPurchaseReceiptType _receiptType;
        private DtoValueOfString _receiptNbr;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _warehouseId;
        private DtoValueOfString _supplierId;
        private DtoValueOfString _locationId;
        private DtoValueOfString _currency;
        private DtoValueOfNullableOfBoolean _createBill;
        private DtoValueOfString _supplierRef;
        private DtoValueOfNullableOfDecimal _controlQty;
        private DtoValueOfNullableOfDecimal _controlAmount;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PurchaseReceiptLineBasicUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPurchaseReceiptType ReceiptType
        {
            get { return _receiptType; }
            set 
            {
                if (_receiptType != value)
                {
                    _receiptType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReceiptNbr
        {
            get { return _receiptNbr; }
            set 
            {
                if (_receiptNbr != value)
                {
                    _receiptNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierId
        {
            get { return _supplierId; }
            set 
            {
                if (_supplierId != value)
                {
                    _supplierId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createBill", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean CreateBill
        {
            get { return _createBill; }
            set 
            {
                if (_createBill != value)
                {
                    _createBill = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierRef
        {
            get { return _supplierRef; }
            set 
            {
                if (_supplierRef != value)
                {
                    _supplierRef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlQty
        {
            get { return _controlQty; }
            set 
            {
                if (_controlQty != value)
                {
                    _controlQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlAmount
        {
            get { return _controlAmount; }
            set 
            {
                if (_controlAmount != value)
                {
                    _controlAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptBasicUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptBasicUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Purchase Receipt Line in PurchaseReceiptBasicContraoller. Used for adding data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PurchaseReceiptLineBasicUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private PurchaseReceiptLineBasicUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNbr;
        private DtoValueOfNullableOfPoLineType _lineType;
        private DtoValueOfString _branchId;
        private DtoValueOfString _branchNumber;
        private DtoValueOfString _inventoryId;
        private DtoValueOfString _warehouseId;
        private DtoValueOfString _locationId;
        private DtoValueOfString _transactionDescription;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _receiptQty;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _extCost;
        private DtoValueOfNullableOfDecimal _discountPercent;
        private DtoValueOfNullableOfDecimal _discountAmount;
        private DtoValueOfNullableOfBoolean _manualDiscount;
        private DtoValueOfString _discountCodeId;
        private DtoValueOfNullableOfDecimal _amount;
        private DtoValueOfString _taxCategoryId;
        private DtoValueOfString _accountId;
        private DtoValueOfString _accountDescription;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfString _actualAccountId;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _actualSubaccount;
        private DtoValueOfString _projectId;
        private DtoValueOfString _projectTaskId;
        private DtoValueOfNullableOfDateTime _expirationDate;
        private DtoValueOfString _lotSerialNumber;
        private DtoValueOfNullableOfPurchaseOrderType _poOrderType;
        private DtoValueOfString _poOrderNbr;
        private DtoValueOfNullableOfInt32 _poOrderLineNbr;
        private DtoValueOfNullableOfSalesOrderTypes _transferOrderType;
        private DtoValueOfString _transferOrderNbr;
        private DtoValueOfNullableOfInt32 _transferOrderLineNbr;
        private DtoValueOfNullableOfBoolean _completePoLine;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseReceiptLineBasicUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPoLineType LineType
        {
            get { return _lineType; }
            set 
            {
                if (_lineType != value)
                {
                    _lineType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>BranchId is deprecated, please use BranchNumber instead.</summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchId
        {
            get { return _branchId; }
            set 
            {
                if (_branchId != value)
                {
                    _branchId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString WarehouseId
        {
            get { return _warehouseId; }
            set 
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransactionDescription
        {
            get { return _transactionDescription; }
            set 
            {
                if (_transactionDescription != value)
                {
                    _transactionDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ReceiptQty
        {
            get { return _receiptQty; }
            set 
            {
                if (_receiptQty != value)
                {
                    _receiptQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ExtCost
        {
            get { return _extCost; }
            set 
            {
                if (_extCost != value)
                {
                    _extCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCodeId
        {
            get { return _discountCodeId; }
            set 
            {
                if (_discountCodeId != value)
                {
                    _discountCodeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaxCategoryId
        {
            get { return _taxCategoryId; }
            set 
            {
                if (_taxCategoryId != value)
                {
                    _taxCategoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountDescription
        {
            get { return _accountDescription; }
            set 
            {
                if (_accountDescription != value)
                {
                    _accountDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actualAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ActualAccountId
        {
            get { return _actualAccountId; }
            set 
            {
                if (_actualAccountId != value)
                {
                    _actualAccountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actualSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> ActualSubaccount
        {
            get { return _actualSubaccount; }
            set 
            {
                if (_actualSubaccount != value)
                {
                    _actualSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectId
        {
            get { return _projectId; }
            set 
            {
                if (_projectId != value)
                {
                    _projectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectTaskId
        {
            get { return _projectTaskId; }
            set 
            {
                if (_projectTaskId != value)
                {
                    _projectTaskId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LotSerialNumber
        {
            get { return _lotSerialNumber; }
            set 
            {
                if (_lotSerialNumber != value)
                {
                    _lotSerialNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Deprecated, property will be replaced by an action</summary>
        [Newtonsoft.Json.JsonProperty("poOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfPurchaseOrderType PoOrderType
        {
            get { return _poOrderType; }
            set 
            {
                if (_poOrderType != value)
                {
                    _poOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Deprecated, property will be replaced by an action</summary>
        [Newtonsoft.Json.JsonProperty("poOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PoOrderNbr
        {
            get { return _poOrderNbr; }
            set 
            {
                if (_poOrderNbr != value)
                {
                    _poOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Deprecated, property will be replaced by an action</summary>
        [Newtonsoft.Json.JsonProperty("poOrderLineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 PoOrderLineNbr
        {
            get { return _poOrderLineNbr; }
            set 
            {
                if (_poOrderLineNbr != value)
                {
                    _poOrderLineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfSalesOrderTypes TransferOrderType
        {
            get { return _transferOrderType; }
            set 
            {
                if (_transferOrderType != value)
                {
                    _transferOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransferOrderNbr
        {
            get { return _transferOrderNbr; }
            set 
            {
                if (_transferOrderNbr != value)
                {
                    _transferOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transferOrderLineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 TransferOrderLineNbr
        {
            get { return _transferOrderLineNbr; }
            set 
            {
                if (_transferOrderLineNbr != value)
                {
                    _transferOrderLineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completePoLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean CompletePoLine
        {
            get { return _completePoLine; }
            set 
            {
                if (_completePoLine != value)
                {
                    _completePoLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PurchaseReceiptLineBasicUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchaseReceiptLineBasicUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Sales Category in SalesCategoryController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesCategoryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _categoryID;
        private string _description;
        private int? _parentID;
        private int? _sortOrder;
        private System.Collections.ObjectModel.ObservableCollection<SalesCategoryDto> _subCategories;
    
        [Newtonsoft.Json.JsonProperty("categoryID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryID
        {
            get { return _categoryID; }
            set 
            {
                if (_categoryID != value)
                {
                    _categoryID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentID
        {
            get { return _parentID; }
            set 
            {
                if (_parentID != value)
                {
                    _parentID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder
        {
            get { return _sortOrder; }
            set 
            {
                if (_sortOrder != value)
                {
                    _sortOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SalesCategoryDto> SubCategories
        {
            get { return _subCategories; }
            set 
            {
                if (_subCategories != value)
                {
                    _subCategories = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesCategoryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesCategoryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Sales Order in Sales Order Controller. Used to pass data to server for creating or updating an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfInt32 _project;
        private DtoValueOfNullableOfBoolean _printDescriptionOnInvoice;
        private DtoValueOfNullableOfBoolean _printNoteOnExternalDocuments;
        private DtoValueOfNullableOfBoolean _printNoteOnInternalDocuments;
        private DtoValueOfSalesOrderContactUpdateDto _soBillingContact;
        private DtoValueOfSalesOrderAddressUpdateDto _soBillingAddress;
        private DtoValueOfString _customerVATZone;
        private DtoValueOfNullableOfBoolean _invoiceSeparately;
        private DtoValueOfString _terms;
        private DtoValueOfString _salesPerson;
        private DtoValueOfNullableOfGuid _owner;
        private DtoValueOfString _origOrderType;
        private DtoValueOfString _origOrderNbr;
        private DtoValueOfSalesOrderContactUpdateDto _soShippingContact;
        private DtoValueOfSalesOrderAddressUpdateDto _soShippingAddress;
        private DtoValueOfNullableOfDateTime _schedShipment;
        private DtoValueOfNullableOfBoolean _shipSeparately;
        private DtoValueOfNullableOfSalesOrderShipCompleteStatuses _shipComplete;
        private DtoValueOfNullableOfDateTime _cancelBy;
        private DtoValueOfNullableOfBoolean _canceled;
        private DtoValueOfString _preferredWarehouse;
        private DtoValueOfString _shipVia;
        private DtoValueOfString _fobPoint;
        private DtoValueOfNullableOfInt16 _priority;
        private DtoValueOfString _shippingTerms;
        private DtoValueOfString _shippingZone;
        private DtoValueOfNullableOfBoolean _residentialDelivery;
        private DtoValueOfNullableOfBoolean _saturdayDelivery;
        private DtoValueOfNullableOfBoolean _insurance;
        private DtoValueOfNullableOfInt32 _transactionType;
        private System.Collections.ObjectModel.ObservableCollection<SalesOrderLineUpdateDto> _lines;
        private DtoValueOfString _orderType = new DtoValueOfString();
        private DtoValueOfString _orderNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfNullableOfDateTime _requestOn;
        private DtoValueOfString _customerOrder;
        private DtoValueOfString _customerRefNo;
        private DtoValueOfString _customer = new DtoValueOfString();
        private DtoValueOfString _location;
        private DtoValueOfString _currency;
        private DtoValueOfString _description;
        private bool? _recalculateShipment;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printDescriptionOnInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean PrintDescriptionOnInvoice
        {
            get { return _printDescriptionOnInvoice; }
            set 
            {
                if (_printDescriptionOnInvoice != value)
                {
                    _printDescriptionOnInvoice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printNoteOnExternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean PrintNoteOnExternalDocuments
        {
            get { return _printNoteOnExternalDocuments; }
            set 
            {
                if (_printNoteOnExternalDocuments != value)
                {
                    _printNoteOnExternalDocuments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("printNoteOnInternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean PrintNoteOnInternalDocuments
        {
            get { return _printNoteOnInternalDocuments; }
            set 
            {
                if (_printNoteOnInternalDocuments != value)
                {
                    _printNoteOnInternalDocuments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soBillingContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfSalesOrderContactUpdateDto SoBillingContact
        {
            get { return _soBillingContact; }
            set 
            {
                if (_soBillingContact != value)
                {
                    _soBillingContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soBillingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfSalesOrderAddressUpdateDto SoBillingAddress
        {
            get { return _soBillingAddress; }
            set 
            {
                if (_soBillingAddress != value)
                {
                    _soBillingAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerVATZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerVATZone
        {
            get { return _customerVATZone; }
            set 
            {
                if (_customerVATZone != value)
                {
                    _customerVATZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean InvoiceSeparately
        {
            get { return _invoiceSeparately; }
            set 
            {
                if (_invoiceSeparately != value)
                {
                    _invoiceSeparately = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Terms
        {
            get { return _terms; }
            set 
            {
                if (_terms != value)
                {
                    _terms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SalesPerson
        {
            get { return _salesPerson; }
            set 
            {
                if (_salesPerson != value)
                {
                    _salesPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfGuid Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("origOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrigOrderType
        {
            get { return _origOrderType; }
            set 
            {
                if (_origOrderType != value)
                {
                    _origOrderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("origOrderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrigOrderNbr
        {
            get { return _origOrderNbr; }
            set 
            {
                if (_origOrderNbr != value)
                {
                    _origOrderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soShippingContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfSalesOrderContactUpdateDto SoShippingContact
        {
            get { return _soShippingContact; }
            set 
            {
                if (_soShippingContact != value)
                {
                    _soShippingContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("soShippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfSalesOrderAddressUpdateDto SoShippingAddress
        {
            get { return _soShippingAddress; }
            set 
            {
                if (_soShippingAddress != value)
                {
                    _soShippingAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("schedShipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime SchedShipment
        {
            get { return _schedShipment; }
            set 
            {
                if (_schedShipment != value)
                {
                    _schedShipment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ShipSeparately
        {
            get { return _shipSeparately; }
            set 
            {
                if (_shipSeparately != value)
                {
                    _shipSeparately = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfSalesOrderShipCompleteStatuses ShipComplete
        {
            get { return _shipComplete; }
            set 
            {
                if (_shipComplete != value)
                {
                    _shipComplete = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancelBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime CancelBy
        {
            get { return _cancelBy; }
            set 
            {
                if (_cancelBy != value)
                {
                    _cancelBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Canceled
        {
            get { return _canceled; }
            set 
            {
                if (_canceled != value)
                {
                    _canceled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("preferredWarehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PreferredWarehouse
        {
            get { return _preferredWarehouse; }
            set 
            {
                if (_preferredWarehouse != value)
                {
                    _preferredWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShipVia
        {
            get { return _shipVia; }
            set 
            {
                if (_shipVia != value)
                {
                    _shipVia = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fobPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FobPoint
        {
            get { return _fobPoint; }
            set 
            {
                if (_fobPoint != value)
                {
                    _fobPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt16 Priority
        {
            get { return _priority; }
            set 
            {
                if (_priority != value)
                {
                    _priority = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShippingTerms
        {
            get { return _shippingTerms; }
            set 
            {
                if (_shippingTerms != value)
                {
                    _shippingTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShippingZone
        {
            get { return _shippingZone; }
            set 
            {
                if (_shippingZone != value)
                {
                    _shippingZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ResidentialDelivery
        {
            get { return _residentialDelivery; }
            set 
            {
                if (_residentialDelivery != value)
                {
                    _residentialDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean SaturdayDelivery
        {
            get { return _saturdayDelivery; }
            set 
            {
                if (_saturdayDelivery != value)
                {
                    _saturdayDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Insurance
        {
            get { return _insurance; }
            set 
            {
                if (_insurance != value)
                {
                    _insurance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 TransactionType
        {
            get { return _transactionType; }
            set 
            {
                if (_transactionType != value)
                {
                    _transactionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SalesOrderLineUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrderNumber
        {
            get { return _orderNumber; }
            set 
            {
                if (_orderNumber != value)
                {
                    _orderNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime RequestOn
        {
            get { return _requestOn; }
            set 
            {
                if (_requestOn != value)
                {
                    _requestOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerOrder
        {
            get { return _customerOrder; }
            set 
            {
                if (_customerOrder != value)
                {
                    _customerOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerRefNo
        {
            get { return _customerRefNo; }
            set 
            {
                if (_customerRefNo != value)
                {
                    _customerRefNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("recalculateShipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RecalculateShipment
        {
            get { return _recalculateShipment; }
            set 
            {
                if (_recalculateShipment != value)
                {
                    _recalculateShipment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfSalesOrderContactUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private SalesOrderContactUpdateDto _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderContactUpdateDto Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfSalesOrderContactUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfSalesOrderContactUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfSalesOrderAddressUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private SalesOrderAddressUpdateDto _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderAddressUpdateDto Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfSalesOrderAddressUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfSalesOrderAddressUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfSalesOrderShipCompleteStatuses : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfSalesOrderShipCompleteStatusesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfSalesOrderShipCompleteStatusesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfSalesOrderShipCompleteStatuses FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfSalesOrderShipCompleteStatuses>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Sales Order Line in Sales Order Controller. Used to pass data to server for creating or updating an order line</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _invoiceNbr;
        private DtoValueOfNullableOfSalesOrderOperations _salesOrderOperation;
        private DtoValueOfNullableOfBoolean _freeItem;
        private DtoValueOfNullableOfDateTime _requestedOn;
        private DtoValueOfNullableOfDateTime _shipOn;
        private DtoValueOfNullableOfSalesOrderShipCompleteStatuses _shipComplete;
        private DtoValueOfNullableOfDecimal _undershipThreshold;
        private DtoValueOfNullableOfDecimal _overshipThreshold;
        private DtoValueOfNullableOfBoolean _completed;
        private DtoValueOfNullableOfBoolean _markForPO;
        private DtoValueOfNullableOfInventoryReplenishmentSources _poSource;
        private DtoValueOfString _lotSerialNbr;
        private DtoValueOfNullableOfDateTime _expirationDate;
        private DtoValueOfString _reasonCode;
        private DtoValueOfString _salesPerson;
        private DtoValueOfString _taxCategory;
        private DtoValueOfNullableOfBoolean _commissionable;
        private DtoValueOfString _alternateID;
        private DtoValueOfString _projectTask;
        private DtoValueOfString _branchNumber;
        private SalesOrderLineUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNbr;
        private DtoValueOfString _inventoryId = new DtoValueOfString();
        private DtoValueOfString _warehouse;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _unitPrice;
        private DtoValueOfNullableOfDecimal _discountPercent;
        private DtoValueOfNullableOfDecimal _discountAmount;
        private DtoValueOfString _discountCode;
        private DtoValueOfNullableOfBoolean _manualDiscount;
        private DtoValueOfNullableOfDecimal _discUnitPrice;
        private DtoValueOfString _lineDescription;
    
        [Newtonsoft.Json.JsonProperty("invoiceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InvoiceNbr
        {
            get { return _invoiceNbr; }
            set 
            {
                if (_invoiceNbr != value)
                {
                    _invoiceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesOrderOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfSalesOrderOperations SalesOrderOperation
        {
            get { return _salesOrderOperation; }
            set 
            {
                if (_salesOrderOperation != value)
                {
                    _salesOrderOperation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freeItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean FreeItem
        {
            get { return _freeItem; }
            set 
            {
                if (_freeItem != value)
                {
                    _freeItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requestedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime RequestedOn
        {
            get { return _requestedOn; }
            set 
            {
                if (_requestedOn != value)
                {
                    _requestedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ShipOn
        {
            get { return _shipOn; }
            set 
            {
                if (_shipOn != value)
                {
                    _shipOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfSalesOrderShipCompleteStatuses ShipComplete
        {
            get { return _shipComplete; }
            set 
            {
                if (_shipComplete != value)
                {
                    _shipComplete = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("undershipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UndershipThreshold
        {
            get { return _undershipThreshold; }
            set 
            {
                if (_undershipThreshold != value)
                {
                    _undershipThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overshipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal OvershipThreshold
        {
            get { return _overshipThreshold; }
            set 
            {
                if (_overshipThreshold != value)
                {
                    _overshipThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Completed
        {
            get { return _completed; }
            set 
            {
                if (_completed != value)
                {
                    _completed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("markForPO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean MarkForPO
        {
            get { return _markForPO; }
            set 
            {
                if (_markForPO != value)
                {
                    _markForPO = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInventoryReplenishmentSources PoSource
        {
            get { return _poSource; }
            set 
            {
                if (_poSource != value)
                {
                    _poSource = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LotSerialNbr
        {
            get { return _lotSerialNbr; }
            set 
            {
                if (_lotSerialNbr != value)
                {
                    _lotSerialNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SalesPerson
        {
            get { return _salesPerson; }
            set 
            {
                if (_salesPerson != value)
                {
                    _salesPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TaxCategory
        {
            get { return _taxCategory; }
            set 
            {
                if (_taxCategory != value)
                {
                    _taxCategory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commissionable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Commissionable
        {
            get { return _commissionable; }
            set 
            {
                if (_commissionable != value)
                {
                    _commissionable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("alternateID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AlternateID
        {
            get { return _alternateID; }
            set 
            {
                if (_alternateID != value)
                {
                    _alternateID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscUnitPrice
        {
            get { return _discUnitPrice; }
            set 
            {
                if (_discUnitPrice != value)
                {
                    _discUnitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LineDescription
        {
            get { return _lineDescription; }
            set 
            {
                if (_lineDescription != value)
                {
                    _lineDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderContactUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBoolean _overrideContact;
        private DtoValueOfString _name;
        private DtoValueOfString _attention;
        private DtoValueOfString _email;
        private DtoValueOfString _web;
        private DtoValueOfString _phone1;
        private DtoValueOfString _phone2;
        private DtoValueOfString _fax;
    
        [Newtonsoft.Json.JsonProperty("overrideContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean OverrideContact
        {
            get { return _overrideContact; }
            set 
            {
                if (_overrideContact != value)
                {
                    _overrideContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderContactUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderContactUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderAddressUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBoolean _overrideAddress;
        private DtoValueOfString _addressLine1;
        private DtoValueOfString _addressLine2;
        private DtoValueOfString _addressLine3;
        private DtoValueOfString _postalCode;
        private DtoValueOfString _city;
        private DtoValueOfString _countryId;
        private DtoValueOfString _county;
    
        [Newtonsoft.Json.JsonProperty("overrideAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean OverrideAddress
        {
            get { return _overrideAddress; }
            set 
            {
                if (_overrideAddress != value)
                {
                    _overrideAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CountryId
        {
            get { return _countryId; }
            set 
            {
                if (_countryId != value)
                {
                    _countryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderAddressUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderAddressUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfSalesOrderOperations : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfSalesOrderOperationsValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfSalesOrderOperationsValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfSalesOrderOperations FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfSalesOrderOperations>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfInventoryReplenishmentSources : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfInventoryReplenishmentSourcesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfInventoryReplenishmentSourcesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfInventoryReplenishmentSources FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfInventoryReplenishmentSources>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreateShipmentActionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _orderType;
        private bool? _returnShipmentDto;
        private System.DateTimeOffset _shipmentDate;
        private string _shipmentWarehouse;
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("returnShipmentDto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnShipmentDto
        {
            get { return _returnShipmentDto; }
            set 
            {
                if (_returnShipmentDto != value)
                {
                    _returnShipmentDto = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("shipmentDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset ShipmentDate
        {
            get { return _shipmentDate; }
            set 
            {
                if (_shipmentDate != value)
                {
                    _shipmentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("shipmentWarehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ShipmentWarehouse
        {
            get { return _shipmentWarehouse; }
            set 
            {
                if (_shipmentWarehouse != value)
                {
                    _shipmentWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateShipmentActionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShipmentActionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class CreateShipmentActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _referenceNumber;
        private ShipmentDto _shipmentDto;
        private System.Guid? _actionId;
        private CreateShipmentActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentDto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDto ShipmentDto
        {
            get { return _shipmentDto; }
            set 
            {
                if (_shipmentDto != value)
                {
                    _shipmentDto = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateShipmentActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateShipmentActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShipmentActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Shipment in ShipmentController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _shipmentNumber;
        private ShipmentDtoShipmentType? _shipmentType;
        private ShipmentDtoStatus? _status;
        private bool? _hold;
        private ShipmentDtoOperation? _operation;
        private System.DateTimeOffset? _shipmentDate;
        private CustomerDescriptionDto _customer;
        private LocationDto _location;
        private WarehouseIdDescriptionDto _fromWarehouse;
        private WarehouseIdDescriptionDto _toWarehouse;
        private string _currencyId;
        private UserDescriptionDto _owner;
        private double? _shippedQuantity;
        private double? _shippedWeight;
        private double? _shippedVolume;
        private double? _packages;
        private double? _packagesWeight;
        private double? _controlQuantity;
        private ShipmentAddressDto _deliveryAddress;
        private ShipmentContactDto _deliveryContact;
        private CarrierDescriptionDto _shipVia;
        private FOBPointDescriptionDto _fobPoint;
        private ShippingTermsDescriptionDto _shippingTerms;
        private ShippingZoneDescriptionDto _shippingZone;
        private bool? _residentialDelivery;
        private bool? _saturdayDelivery;
        private bool? _useCustomerAccount;
        private bool? _insurance;
        private double? _freightCost;
        private double? _freightAmt;
        private SigmaIntrastatTransactionDescriptionDto _transactionType;
        private ModeOfTransportDto _modeOfTrasport;
        private bool? _container;
        private System.Collections.ObjectModel.ObservableCollection<ShipmentDetailLineDto> _shipmentDetailLines;
        private System.Collections.ObjectModel.ObservableCollection<ShipmentOrderLineDto> _shipmentOrderLines;
        private System.Collections.ObjectModel.ObservableCollection<PackageDetailLineDto> _shipmentPackageLines;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("shipmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentNumber
        {
            get { return _shipmentNumber; }
            set 
            {
                if (_shipmentNumber != value)
                {
                    _shipmentNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentDtoShipmentType? ShipmentType
        {
            get { return _shipmentType; }
            set 
            {
                if (_shipmentType != value)
                {
                    _shipmentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipmentDate
        {
            get { return _shipmentDate; }
            set 
            {
                if (_shipmentDate != value)
                {
                    _shipmentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDescriptionDto Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fromWarehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto FromWarehouse
        {
            get { return _fromWarehouse; }
            set 
            {
                if (_fromWarehouse != value)
                {
                    _fromWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("toWarehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto ToWarehouse
        {
            get { return _toWarehouse; }
            set 
            {
                if (_toWarehouse != value)
                {
                    _toWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDescriptionDto Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShippedQuantity
        {
            get { return _shippedQuantity; }
            set 
            {
                if (_shippedQuantity != value)
                {
                    _shippedQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShippedWeight
        {
            get { return _shippedWeight; }
            set 
            {
                if (_shippedWeight != value)
                {
                    _shippedWeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShippedVolume
        {
            get { return _shippedVolume; }
            set 
            {
                if (_shippedVolume != value)
                {
                    _shippedVolume = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Packages
        {
            get { return _packages; }
            set 
            {
                if (_packages != value)
                {
                    _packages = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("packagesWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PackagesWeight
        {
            get { return _packagesWeight; }
            set 
            {
                if (_packagesWeight != value)
                {
                    _packagesWeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentAddressDto DeliveryAddress
        {
            get { return _deliveryAddress; }
            set 
            {
                if (_deliveryAddress != value)
                {
                    _deliveryAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deliveryContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentContactDto DeliveryContact
        {
            get { return _deliveryContact; }
            set 
            {
                if (_deliveryContact != value)
                {
                    _deliveryContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarrierDescriptionDto ShipVia
        {
            get { return _shipVia; }
            set 
            {
                if (_shipVia != value)
                {
                    _shipVia = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fobPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FOBPointDescriptionDto FobPoint
        {
            get { return _fobPoint; }
            set 
            {
                if (_fobPoint != value)
                {
                    _fobPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingTermsDescriptionDto ShippingTerms
        {
            get { return _shippingTerms; }
            set 
            {
                if (_shippingTerms != value)
                {
                    _shippingTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingZoneDescriptionDto ShippingZone
        {
            get { return _shippingZone; }
            set 
            {
                if (_shippingZone != value)
                {
                    _shippingZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ResidentialDelivery
        {
            get { return _residentialDelivery; }
            set 
            {
                if (_residentialDelivery != value)
                {
                    _residentialDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaturdayDelivery
        {
            get { return _saturdayDelivery; }
            set 
            {
                if (_saturdayDelivery != value)
                {
                    _saturdayDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("useCustomerAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseCustomerAccount
        {
            get { return _useCustomerAccount; }
            set 
            {
                if (_useCustomerAccount != value)
                {
                    _useCustomerAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Insurance
        {
            get { return _insurance; }
            set 
            {
                if (_insurance != value)
                {
                    _insurance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freightCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FreightCost
        {
            get { return _freightCost; }
            set 
            {
                if (_freightCost != value)
                {
                    _freightCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freightAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FreightAmt
        {
            get { return _freightAmt; }
            set 
            {
                if (_freightAmt != value)
                {
                    _freightAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SigmaIntrastatTransactionDescriptionDto TransactionType
        {
            get { return _transactionType; }
            set 
            {
                if (_transactionType != value)
                {
                    _transactionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("modeOfTrasport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModeOfTransportDto ModeOfTrasport
        {
            get { return _modeOfTrasport; }
            set 
            {
                if (_modeOfTrasport != value)
                {
                    _modeOfTrasport = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Container
        {
            get { return _container; }
            set 
            {
                if (_container != value)
                {
                    _container = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentDetailLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ShipmentDetailLineDto> ShipmentDetailLines
        {
            get { return _shipmentDetailLines; }
            set 
            {
                if (_shipmentDetailLines != value)
                {
                    _shipmentDetailLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentOrderLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ShipmentOrderLineDto> ShipmentOrderLines
        {
            get { return _shipmentOrderLines; }
            set 
            {
                if (_shipmentOrderLines != value)
                {
                    _shipmentOrderLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentPackageLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PackageDetailLineDto> ShipmentPackageLines
        {
            get { return _shipmentPackageLines; }
            set 
            {
                if (_shipmentPackageLines != value)
                {
                    _shipmentPackageLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentAddressDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _overrideAddress;
        private int? _addressId;
        private string _addressLine1;
        private string _addressLine2;
        private string _addressLine3;
        private string _postalCode;
        private string _city;
        private CountryDto _country;
        private CountyDto _county;
    
        [Newtonsoft.Json.JsonProperty("overrideAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideAddress
        {
            get { return _overrideAddress; }
            set 
            {
                if (_overrideAddress != value)
                {
                    _overrideAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AddressId
        {
            get { return _addressId; }
            set 
            {
                if (_addressId != value)
                {
                    _addressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryDto Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountyDto County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentAddressDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentAddressDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentContactDto : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _overrideContact;
        private int? _contactId;
        private string _name;
        private string _attention;
        private string _email;
        private string _web;
        private string _phone1;
        private string _phone2;
        private string _fax;
    
        [Newtonsoft.Json.JsonProperty("overrideContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideContact
        {
            get { return _overrideContact; }
            set 
            {
                if (_overrideContact != value)
                {
                    _overrideContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId
        {
            get { return _contactId; }
            set 
            {
                if (_contactId != value)
                {
                    _contactId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentContactDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentContactDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ModeOfTransportDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModeOfTransportDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModeOfTransportDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentDetailLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private string _orderType;
        private string _orderNbr;
        private string _inventoryNumber;
        private bool? _freeItem;
        private WarehouseIdDescriptionDto _warehouse;
        private LocationDto _location;
        private string _uom;
        private double? _shippedQty;
        private double? _orderedQty;
        private double? _openQty;
        private string _lotSerialNbr;
        private System.DateTimeOffset? _expirationDate;
        private string _reasonCode;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<AllocationsDto> _allocations;
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNbr
        {
            get { return _orderNbr; }
            set 
            {
                if (_orderNbr != value)
                {
                    _orderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freeItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeItem
        {
            get { return _freeItem; }
            set 
            {
                if (_freeItem != value)
                {
                    _freeItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShippedQty
        {
            get { return _shippedQty; }
            set 
            {
                if (_shippedQty != value)
                {
                    _shippedQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderedQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderedQty
        {
            get { return _orderedQty; }
            set 
            {
                if (_orderedQty != value)
                {
                    _orderedQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("openQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OpenQty
        {
            get { return _openQty; }
            set 
            {
                if (_openQty != value)
                {
                    _openQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotSerialNbr
        {
            get { return _lotSerialNbr; }
            set 
            {
                if (_lotSerialNbr != value)
                {
                    _lotSerialNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AllocationsDto> Allocations
        {
            get { return _allocations; }
            set 
            {
                if (_allocations != value)
                {
                    _allocations = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentDetailLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentDetailLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentOrderLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _orderType;
        private string _orderNbr;
        private double? _shippedQty;
        private double? _shippedWeight;
        private double? _shippedVolume;
        private string _invoiceType;
        private string _invoiceNbr;
        private string _inventoryDocType;
        private string _inventoryRefNbr;
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNbr
        {
            get { return _orderNbr; }
            set 
            {
                if (_orderNbr != value)
                {
                    _orderNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShippedQty
        {
            get { return _shippedQty; }
            set 
            {
                if (_shippedQty != value)
                {
                    _shippedQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShippedWeight
        {
            get { return _shippedWeight; }
            set 
            {
                if (_shippedWeight != value)
                {
                    _shippedWeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShippedVolume
        {
            get { return _shippedVolume; }
            set 
            {
                if (_shippedVolume != value)
                {
                    _shippedVolume = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceType
        {
            get { return _invoiceType; }
            set 
            {
                if (_invoiceType != value)
                {
                    _invoiceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNbr
        {
            get { return _invoiceNbr; }
            set 
            {
                if (_invoiceNbr != value)
                {
                    _invoiceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryDocType
        {
            get { return _inventoryDocType; }
            set 
            {
                if (_inventoryDocType != value)
                {
                    _inventoryDocType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryRefNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryRefNbr
        {
            get { return _inventoryRefNbr; }
            set 
            {
                if (_inventoryRefNbr != value)
                {
                    _inventoryRefNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentOrderLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentOrderLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class PackageDetailLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private bool? _confirmed;
        private string _boxId;
        private string _type;
        private string _description;
        private double? _weight;
        private string _uom;
        private double? _declaredValue;
        private double? _coDAmount;
        private string _trackingNumber;
        private string _customRefNbr1;
        private string _customRefNbr2;
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("confirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Confirmed
        {
            get { return _confirmed; }
            set 
            {
                if (_confirmed != value)
                {
                    _confirmed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("boxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoxId
        {
            get { return _boxId; }
            set 
            {
                if (_boxId != value)
                {
                    _boxId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight
        {
            get { return _weight; }
            set 
            {
                if (_weight != value)
                {
                    _weight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeclaredValue
        {
            get { return _declaredValue; }
            set 
            {
                if (_declaredValue != value)
                {
                    _declaredValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("coDAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoDAmount
        {
            get { return _coDAmount; }
            set 
            {
                if (_coDAmount != value)
                {
                    _coDAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber
        {
            get { return _trackingNumber; }
            set 
            {
                if (_trackingNumber != value)
                {
                    _trackingNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customRefNbr1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomRefNbr1
        {
            get { return _customRefNbr1; }
            set 
            {
                if (_customRefNbr1 != value)
                {
                    _customRefNbr1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customRefNbr2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomRefNbr2
        {
            get { return _customRefNbr2; }
            set 
            {
                if (_customRefNbr2 != value)
                {
                    _customRefNbr2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PackageDetailLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PackageDetailLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Sales Order in Sales Order Controller. Used to pass data to server for creating or updating an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderBasicUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicLineUpdateDto> _lines;
        private DtoValueOfString _orderType = new DtoValueOfString();
        private DtoValueOfString _orderNumber;
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfNullableOfDateTime _date;
        private DtoValueOfNullableOfDateTime _requestOn;
        private DtoValueOfString _customerOrder;
        private DtoValueOfString _customerRefNo;
        private DtoValueOfString _customer = new DtoValueOfString();
        private DtoValueOfString _location;
        private DtoValueOfString _currency;
        private DtoValueOfString _description;
        private bool? _recalculateShipment;
        private DtoValueOfString _branchNumber;
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SalesOrderBasicLineUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString OrderNumber
        {
            get { return _orderNumber; }
            set 
            {
                if (_orderNumber != value)
                {
                    _orderNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime RequestOn
        {
            get { return _requestOn; }
            set 
            {
                if (_requestOn != value)
                {
                    _requestOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerOrder
        {
            get { return _customerOrder; }
            set 
            {
                if (_customerOrder != value)
                {
                    _customerOrder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomerRefNo
        {
            get { return _customerRefNo; }
            set 
            {
                if (_customerRefNo != value)
                {
                    _customerRefNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString Customer
        {
            get { return _customer; }
            set 
            {
                if (_customer != value)
                {
                    _customer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("recalculateShipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RecalculateShipment
        {
            get { return _recalculateShipment; }
            set 
            {
                if (_recalculateShipment != value)
                {
                    _recalculateShipment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderBasicUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderBasicUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Sales Order Line in Sales Order Controller. Used to pass data to server for creating or updating an order line</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderBasicLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _branchNumber;
        private SalesOrderBasicLineUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNbr;
        private DtoValueOfString _inventoryId = new DtoValueOfString();
        private DtoValueOfString _warehouse;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _quantity;
        private DtoValueOfNullableOfDecimal _unitCost;
        private DtoValueOfNullableOfDecimal _unitPrice;
        private DtoValueOfNullableOfDecimal _discountPercent;
        private DtoValueOfNullableOfDecimal _discountAmount;
        private DtoValueOfString _discountCode;
        private DtoValueOfNullableOfBoolean _manualDiscount;
        private DtoValueOfNullableOfDecimal _discUnitPrice;
        private DtoValueOfString _lineDescription;
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalesOrderBasicLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Mandatory field</summary>
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DtoValueOfString InventoryId
        {
            get { return _inventoryId; }
            set 
            {
                if (_inventoryId != value)
                {
                    _inventoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitPrice
        {
            get { return _unitPrice; }
            set 
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountPercent
        {
            get { return _discountPercent; }
            set 
            {
                if (_discountPercent != value)
                {
                    _discountPercent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DiscountCode
        {
            get { return _discountCode; }
            set 
            {
                if (_discountCode != value)
                {
                    _discountCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("manualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ManualDiscount
        {
            get { return _manualDiscount; }
            set 
            {
                if (_manualDiscount != value)
                {
                    _manualDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DiscUnitPrice
        {
            get { return _discUnitPrice; }
            set 
            {
                if (_discUnitPrice != value)
                {
                    _discUnitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LineDescription
        {
            get { return _lineDescription; }
            set 
            {
                if (_lineDescription != value)
                {
                    _lineDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderBasicLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderBasicLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a SOOrderType in SalesOrderTypeController. Used to get data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderTypeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _orderType;
        private bool? _active;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType
        {
            get { return _orderType; }
            set 
            {
                if (_orderType != value)
                {
                    _orderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderTypeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderTypeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SalesOrderTypeQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SalesOrderTypeQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesOrderTypeQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentsQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentsQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentsQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfBoolean _hold;
        private DtoValueOfString _fromWarehouse;
        private DtoValueOfString _toWarehouse;
        private DtoValueOfNullableOfDecimal _controlQuantity;
        private DtoValueOfNullableOfBoolean _overrideContact;
        private DtoValueOfString _businessName;
        private DtoValueOfString _attention;
        private DtoValueOfString _phone1;
        private DtoValueOfString _email;
        private DtoValueOfNullableOfBoolean _overrideAddress;
        private DtoValueOfString _addressLine1;
        private DtoValueOfString _addressLine2;
        private DtoValueOfString _city;
        private DtoValueOfString _country;
        private DtoValueOfString _county;
        private DtoValueOfString _postalCode;
        private DtoValueOfString _shipVia;
        private DtoValueOfString _fobPoint;
        private DtoValueOfString _shippingTerms;
        private DtoValueOfString _shippingZone;
        private DtoValueOfNullableOfBoolean _residentialDelivery;
        private DtoValueOfNullableOfBoolean _saturdayDelivery;
        private DtoValueOfNullableOfBoolean _useCustomerAccount;
        private DtoValueOfNullableOfBoolean _insurance;
        private DtoValueOfNullableOfDecimal _freightAmt;
        private DtoValueOfNullableOfInt32 _transactionType;
        private DtoValueOfNullableOfTransportationModes _modeOfTrasport;
        private DtoValueOfNullableOfBoolean _container;
        private System.Collections.ObjectModel.ObservableCollection<ShipmentDetailLineUpdateDto> _shipmentDetailLines;
        private System.Collections.ObjectModel.ObservableCollection<ShipmentPackageLineUpdateDto> _shipmentPackageLines;
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fromWarehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FromWarehouse
        {
            get { return _fromWarehouse; }
            set 
            {
                if (_fromWarehouse != value)
                {
                    _fromWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("toWarehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ToWarehouse
        {
            get { return _toWarehouse; }
            set 
            {
                if (_toWarehouse != value)
                {
                    _toWarehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("controlQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ControlQuantity
        {
            get { return _controlQuantity; }
            set 
            {
                if (_controlQuantity != value)
                {
                    _controlQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overrideContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean OverrideContact
        {
            get { return _overrideContact; }
            set 
            {
                if (_overrideContact != value)
                {
                    _overrideContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("businessName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BusinessName
        {
            get { return _businessName; }
            set 
            {
                if (_businessName != value)
                {
                    _businessName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overrideAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean OverrideAddress
        {
            get { return _overrideAddress; }
            set 
            {
                if (_overrideAddress != value)
                {
                    _overrideAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShipVia
        {
            get { return _shipVia; }
            set 
            {
                if (_shipVia != value)
                {
                    _shipVia = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fobPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FobPoint
        {
            get { return _fobPoint; }
            set 
            {
                if (_fobPoint != value)
                {
                    _fobPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShippingTerms
        {
            get { return _shippingTerms; }
            set 
            {
                if (_shippingTerms != value)
                {
                    _shippingTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippingZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ShippingZone
        {
            get { return _shippingZone; }
            set 
            {
                if (_shippingZone != value)
                {
                    _shippingZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean ResidentialDelivery
        {
            get { return _residentialDelivery; }
            set 
            {
                if (_residentialDelivery != value)
                {
                    _residentialDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean SaturdayDelivery
        {
            get { return _saturdayDelivery; }
            set 
            {
                if (_saturdayDelivery != value)
                {
                    _saturdayDelivery = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("useCustomerAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean UseCustomerAccount
        {
            get { return _useCustomerAccount; }
            set 
            {
                if (_useCustomerAccount != value)
                {
                    _useCustomerAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Insurance
        {
            get { return _insurance; }
            set 
            {
                if (_insurance != value)
                {
                    _insurance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freightAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal FreightAmt
        {
            get { return _freightAmt; }
            set 
            {
                if (_freightAmt != value)
                {
                    _freightAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 TransactionType
        {
            get { return _transactionType; }
            set 
            {
                if (_transactionType != value)
                {
                    _transactionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("modeOfTrasport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfTransportationModes ModeOfTrasport
        {
            get { return _modeOfTrasport; }
            set 
            {
                if (_modeOfTrasport != value)
                {
                    _modeOfTrasport = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Container
        {
            get { return _container; }
            set 
            {
                if (_container != value)
                {
                    _container = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentDetailLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ShipmentDetailLineUpdateDto> ShipmentDetailLines
        {
            get { return _shipmentDetailLines; }
            set 
            {
                if (_shipmentDetailLines != value)
                {
                    _shipmentDetailLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipmentPackageLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ShipmentPackageLineUpdateDto> ShipmentPackageLines
        {
            get { return _shipmentPackageLines; }
            set 
            {
                if (_shipmentPackageLines != value)
                {
                    _shipmentPackageLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfTransportationModes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfTransportationModesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfTransportationModesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfTransportationModes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfTransportationModes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentDetailLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private ShipmentDetailLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _warehouse;
        private DtoValueOfString _location;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _shippedQty;
        private DtoValueOfString _lotSerialNbr;
        private DtoValueOfNullableOfDateTime _expirationDate;
        private DtoValueOfString _reasonCode;
        private DtoValueOfString _description;
        private System.Collections.ObjectModel.ObservableCollection<AllocationsUpdateDto> _allocations;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentDetailLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shippedQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal ShippedQty
        {
            get { return _shippedQty; }
            set 
            {
                if (_shippedQty != value)
                {
                    _shippedQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LotSerialNbr
        {
            get { return _lotSerialNbr; }
            set 
            {
                if (_lotSerialNbr != value)
                {
                    _lotSerialNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Property will become obsolete after version 5.31</summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDateTime ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AllocationsUpdateDto> Allocations
        {
            get { return _allocations; }
            set 
            {
                if (_allocations != value)
                {
                    _allocations = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentDetailLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentDetailLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ShipmentPackageLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private ShipmentPackageLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfNullableOfBoolean _confirmed;
        private DtoValueOfString _boxId;
        private DtoValueOfString _description;
        private DtoValueOfNullableOfDecimal _weight;
        private DtoValueOfNullableOfDecimal _declaredValue;
        private DtoValueOfNullableOfDecimal _codAmount;
        private DtoValueOfString _trackingNumber;
        private DtoValueOfString _customRefNbr1;
        private DtoValueOfString _customRefNbr2;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentPackageLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("confirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Confirmed
        {
            get { return _confirmed; }
            set 
            {
                if (_confirmed != value)
                {
                    _confirmed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("boxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BoxId
        {
            get { return _boxId; }
            set 
            {
                if (_boxId != value)
                {
                    _boxId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal Weight
        {
            get { return _weight; }
            set 
            {
                if (_weight != value)
                {
                    _weight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal DeclaredValue
        {
            get { return _declaredValue; }
            set 
            {
                if (_declaredValue != value)
                {
                    _declaredValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("codAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal CodAmount
        {
            get { return _codAmount; }
            set 
            {
                if (_codAmount != value)
                {
                    _codAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TrackingNumber
        {
            get { return _trackingNumber; }
            set 
            {
                if (_trackingNumber != value)
                {
                    _trackingNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customRefNbr1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomRefNbr1
        {
            get { return _customRefNbr1; }
            set 
            {
                if (_customRefNbr1 != value)
                {
                    _customRefNbr1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customRefNbr2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CustomRefNbr2
        {
            get { return _customRefNbr2; }
            set 
            {
                if (_customRefNbr2 != value)
                {
                    _customRefNbr2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShipmentPackageLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentPackageLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ConfirmShipmentActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private ConfirmShipmentActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfirmShipmentActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfirmShipmentActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmShipmentActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class StocktakeDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _referenceNbr;
        private string _description;
        private StocktakeDtoSummaryStatus? _summaryStatus;
        private System.DateTimeOffset? _freezeDate;
        private int? _numberOfLines;
        private double? _physicalQty;
        private double? _varianceQty;
        private double? _varianceCost;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<StocktakeLineDto> _lines;
    
        [Newtonsoft.Json.JsonProperty("referenceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNbr
        {
            get { return _referenceNbr; }
            set 
            {
                if (_referenceNbr != value)
                {
                    _referenceNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("summaryStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StocktakeDtoSummaryStatus? SummaryStatus
        {
            get { return _summaryStatus; }
            set 
            {
                if (_summaryStatus != value)
                {
                    _summaryStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freezeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FreezeDate
        {
            get { return _freezeDate; }
            set 
            {
                if (_freezeDate != value)
                {
                    _freezeDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberOfLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfLines
        {
            get { return _numberOfLines; }
            set 
            {
                if (_numberOfLines != value)
                {
                    _numberOfLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("physicalQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PhysicalQty
        {
            get { return _physicalQty; }
            set 
            {
                if (_physicalQty != value)
                {
                    _physicalQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("varianceQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VarianceQty
        {
            get { return _varianceQty; }
            set 
            {
                if (_varianceQty != value)
                {
                    _varianceQty = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("varianceCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VarianceCost
        {
            get { return _varianceCost; }
            set 
            {
                if (_varianceCost != value)
                {
                    _varianceCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<StocktakeLineDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StocktakeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StocktakeDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class StocktakeLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private StocktakeLineDtoStatus? _status;
        private int? _lineNbr;
        private int? _tagNbr;
        private InventoryIdNameDto _inventory;
        private LocationIdNameDto _location;
        private WarehouseIdDescriptionDto _warehouse;
        private string _lotSerialNbr;
        private System.DateTimeOffset? _expirationDate;
        private double? _bookQuantity;
        private double? _physicalQuantity;
        private double? _varianceQuantity;
        private double? _unitCost;
        private double? _extVarianceCost;
        private string _reasonCode;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StocktakeLineDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tagNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TagNbr
        {
            get { return _tagNbr; }
            set 
            {
                if (_tagNbr != value)
                {
                    _tagNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryIdNameDto Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationIdNameDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseIdDescriptionDto Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotSerialNbr
        {
            get { return _lotSerialNbr; }
            set 
            {
                if (_lotSerialNbr != value)
                {
                    _lotSerialNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate
        {
            get { return _expirationDate; }
            set 
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bookQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BookQuantity
        {
            get { return _bookQuantity; }
            set 
            {
                if (_bookQuantity != value)
                {
                    _bookQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("physicalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PhysicalQuantity
        {
            get { return _physicalQuantity; }
            set 
            {
                if (_physicalQuantity != value)
                {
                    _physicalQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("varianceQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VarianceQuantity
        {
            get { return _varianceQuantity; }
            set 
            {
                if (_varianceQuantity != value)
                {
                    _varianceQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extVarianceCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtVarianceCost
        {
            get { return _extVarianceCost; }
            set 
            {
                if (_extVarianceCost != value)
                {
                    _extVarianceCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode
        {
            get { return _reasonCode; }
            set 
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StocktakeLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StocktakeLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class InventoryIdNameDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InventoryIdNameDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryIdNameDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Stocktake in StocktakeController. Used to update Stocktake.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class StocktakeUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<StocktakeLineUpdateDto> _lines;
    
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<StocktakeLineUpdateDto> Lines
        {
            get { return _lines; }
            set 
            {
                if (_lines != value)
                {
                    _lines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StocktakeUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StocktakeUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represent a Stocktake line in StocktakeContoller. Used to update a Stocktake line</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class StocktakeLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private StocktakeLineUpdateDtoOperation? _operation;
        private DtoValueOfNullableOfInt32 _lineNbr;
        private DtoValueOfNullableOfDecimal _physicalQuantity;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StocktakeLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 LineNbr
        {
            get { return _lineNbr; }
            set 
            {
                if (_lineNbr != value)
                {
                    _lineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("physicalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal PhysicalQuantity
        {
            get { return _physicalQuantity; }
            set 
            {
                if (_physicalQuantity != value)
                {
                    _physicalQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StocktakeLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StocktakeLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class StocktakeQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _warehouse;
        private string _location;
        private string _inventory;
        private string _lotSerialNumber;
        private StocktakeQueryParametersSummaryStatus? _summaryStatus;
        private int? _numberToRead;
        private int? _startWithLine;
        private int? _endWithLine;
        private string _freezeDateTime;
        private string _freezeDateTimeCondition;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private string _expirationDateTime;
        private string _expirationDateTimeCondition;
        private StocktakeQueryParametersStatus? _status;
        private int? _skipRecords;
    
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse
        {
            get { return _warehouse; }
            set 
            {
                if (_warehouse != value)
                {
                    _warehouse = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Inventory
        {
            get { return _inventory; }
            set 
            {
                if (_inventory != value)
                {
                    _inventory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotSerialNumber
        {
            get { return _lotSerialNumber; }
            set 
            {
                if (_lotSerialNumber != value)
                {
                    _lotSerialNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("summaryStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StocktakeQueryParametersSummaryStatus? SummaryStatus
        {
            get { return _summaryStatus; }
            set 
            {
                if (_summaryStatus != value)
                {
                    _summaryStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("startWithLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartWithLine
        {
            get { return _startWithLine; }
            set 
            {
                if (_startWithLine != value)
                {
                    _startWithLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("endWithLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndWithLine
        {
            get { return _endWithLine; }
            set 
            {
                if (_endWithLine != value)
                {
                    _endWithLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freezeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FreezeDateTime
        {
            get { return _freezeDateTime; }
            set 
            {
                if (_freezeDateTime != value)
                {
                    _freezeDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("freezeDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FreezeDateTimeCondition
        {
            get { return _freezeDateTimeCondition; }
            set 
            {
                if (_freezeDateTimeCondition != value)
                {
                    _freezeDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDateTime
        {
            get { return _expirationDateTime; }
            set 
            {
                if (_expirationDateTime != value)
                {
                    _expirationDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expirationDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDateTimeCondition
        {
            get { return _expirationDateTimeCondition; }
            set 
            {
                if (_expirationDateTimeCondition != value)
                {
                    _expirationDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StocktakeQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StocktakeQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StocktakeQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SubAccountUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _subaccountCd;
        private DtoValueOfString _description;
        private DtoValueOfBoolean _active;
    
        [Newtonsoft.Json.JsonProperty("subaccountCd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SubaccountCd
        {
            get { return _subaccountCd; }
            set 
            {
                if (_subaccountCd != value)
                {
                    _subaccountCd = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubAccountUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubAccountUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierClassDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ClassAttributeDto> _attributes;
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ClassAttributeDto> Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierClassDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierClassDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierBalanceQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierBalanceQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierBalanceQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierBalanceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private SupplierDescriptionDto _supplier;
        private double? _balance;
        private WithoutWithVatDto _unreleasedPurchasesNotInApproval;
        private WithoutWithVatDto _totalSentForApproval;
        private WithoutWithVatDto _totalPurchaseInvoicePeriod;
        private WithoutWithVatDto _totalPurchaseInvoiceYear;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDescriptionDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unreleasedPurchasesNotInApproval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WithoutWithVatDto UnreleasedPurchasesNotInApproval
        {
            get { return _unreleasedPurchasesNotInApproval; }
            set 
            {
                if (_unreleasedPurchasesNotInApproval != value)
                {
                    _unreleasedPurchasesNotInApproval = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalSentForApproval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WithoutWithVatDto TotalSentForApproval
        {
            get { return _totalSentForApproval; }
            set 
            {
                if (_totalSentForApproval != value)
                {
                    _totalSentForApproval = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalPurchaseInvoicePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WithoutWithVatDto TotalPurchaseInvoicePeriod
        {
            get { return _totalPurchaseInvoicePeriod; }
            set 
            {
                if (_totalPurchaseInvoicePeriod != value)
                {
                    _totalPurchaseInvoicePeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalPurchaseInvoiceYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WithoutWithVatDto TotalPurchaseInvoiceYear
        {
            get { return _totalPurchaseInvoiceYear; }
            set 
            {
                if (_totalPurchaseInvoiceYear != value)
                {
                    _totalPurchaseInvoiceYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierBalanceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierBalanceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WithoutWithVatDto : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _withoutVat;
        private double? _withVat;
    
        [Newtonsoft.Json.JsonProperty("withoutVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WithoutVat
        {
            get { return _withoutVat; }
            set 
            {
                if (_withoutVat != value)
                {
                    _withoutVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("withVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WithVat
        {
            get { return _withVat; }
            set 
            {
                if (_withVat != value)
                {
                    _withVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WithoutWithVatDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WithoutWithVatDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierPOBalanceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private SupplierDescriptionDto _supplier;
        private double? _totalPOOnHoldOrderTotal;
        private double? _totalPOOnHoldLineTotal;
        private double? _totalOpenPOOrderTotal;
        private double? _totalOpenPOLineTotal;
        private double? _totalClosedPOOrderTotal;
        private double? _totalClosedPOLineTotal;
        private System.DateTimeOffset? _lastModifiedDateTime;
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDescriptionDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalPOOnHoldOrderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPOOnHoldOrderTotal
        {
            get { return _totalPOOnHoldOrderTotal; }
            set 
            {
                if (_totalPOOnHoldOrderTotal != value)
                {
                    _totalPOOnHoldOrderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalPOOnHoldLineTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPOOnHoldLineTotal
        {
            get { return _totalPOOnHoldLineTotal; }
            set 
            {
                if (_totalPOOnHoldLineTotal != value)
                {
                    _totalPOOnHoldLineTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalOpenPOOrderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalOpenPOOrderTotal
        {
            get { return _totalOpenPOOrderTotal; }
            set 
            {
                if (_totalOpenPOOrderTotal != value)
                {
                    _totalOpenPOOrderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalOpenPOLineTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalOpenPOLineTotal
        {
            get { return _totalOpenPOLineTotal; }
            set 
            {
                if (_totalOpenPOLineTotal != value)
                {
                    _totalOpenPOLineTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalClosedPOOrderTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalClosedPOOrderTotal
        {
            get { return _totalClosedPOOrderTotal; }
            set 
            {
                if (_totalClosedPOOrderTotal != value)
                {
                    _totalClosedPOOrderTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalClosedPOLineTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalClosedPOLineTotal
        {
            get { return _totalClosedPOLineTotal; }
            set 
            {
                if (_totalClosedPOLineTotal != value)
                {
                    _totalClosedPOLineTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierPOBalanceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierPOBalanceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a supplier in SupplierController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _internalId;
        private string _number;
        private string _name;
        private SupplierDtoStatus? _status;
        private AddressDto _mainAddress;
        private ContactInfoDto _mainContact;
        private string _accountReference;
        private ParentRecordDto _parentRecord;
        private ClassDescriptionDto _supplierClass;
        private CreditTermsDto _creditTerms;
        private string _documentLanguage;
        private string _currencyId;
        private AddressDto _remitAddress;
        private ContactInfoDto _remitContact;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _cashAccount;
        private SupplierDtoChargeBearer? _chargeBearer;
        private SupplierDtoAccountUsedForPayment? _accountUsedForPayment;
        private SupplierDtoPaymentBy? _paymentBy;
        private int? _paymentLeadTime;
        private string _paymentRefDisplayMask;
        private bool? _paySeparately;
        private AddressDto _supplierAddress;
        private ContactInfoDto _supplierContact;
        private LocationDto _location;
        private string _vatRegistrationId;
        private string _corporateId;
        private VatZoneDto _vatZone;
        private System.Collections.ObjectModel.ObservableCollection<AttributeIdValueDto> _attributes;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<SupplierPaymentMethodDetailDto> _supplierPaymentMethodDetails;
    
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId
        {
            get { return _internalId; }
            set 
            {
                if (_internalId != value)
                {
                    _internalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto MainAddress
        {
            get { return _mainAddress; }
            set 
            {
                if (_mainAddress != value)
                {
                    _mainAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto MainContact
        {
            get { return _mainContact; }
            set 
            {
                if (_mainContact != value)
                {
                    _mainContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountReference
        {
            get { return _accountReference; }
            set 
            {
                if (_accountReference != value)
                {
                    _accountReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParentRecordDto ParentRecord
        {
            get { return _parentRecord; }
            set 
            {
                if (_parentRecord != value)
                {
                    _parentRecord = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassDescriptionDto SupplierClass
        {
            get { return _supplierClass; }
            set 
            {
                if (_supplierClass != value)
                {
                    _supplierClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto CreditTerms
        {
            get { return _creditTerms; }
            set 
            {
                if (_creditTerms != value)
                {
                    _creditTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentLanguage
        {
            get { return _documentLanguage; }
            set 
            {
                if (_documentLanguage != value)
                {
                    _documentLanguage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto RemitAddress
        {
            get { return _remitAddress; }
            set 
            {
                if (_remitAddress != value)
                {
                    _remitAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto RemitContact
        {
            get { return _remitContact; }
            set 
            {
                if (_remitContact != value)
                {
                    _remitContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("chargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierDtoChargeBearer? ChargeBearer
        {
            get { return _chargeBearer; }
            set 
            {
                if (_chargeBearer != value)
                {
                    _chargeBearer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountUsedForPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierDtoAccountUsedForPayment? AccountUsedForPayment
        {
            get { return _accountUsedForPayment; }
            set 
            {
                if (_accountUsedForPayment != value)
                {
                    _accountUsedForPayment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierDtoPaymentBy? PaymentBy
        {
            get { return _paymentBy; }
            set 
            {
                if (_paymentBy != value)
                {
                    _paymentBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentLeadTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PaymentLeadTime
        {
            get { return _paymentLeadTime; }
            set 
            {
                if (_paymentLeadTime != value)
                {
                    _paymentLeadTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentRefDisplayMask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentRefDisplayMask
        {
            get { return _paymentRefDisplayMask; }
            set 
            {
                if (_paymentRefDisplayMask != value)
                {
                    _paymentRefDisplayMask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paySeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PaySeparately
        {
            get { return _paySeparately; }
            set 
            {
                if (_paySeparately != value)
                {
                    _paySeparately = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto SupplierAddress
        {
            get { return _supplierAddress; }
            set 
            {
                if (_supplierAddress != value)
                {
                    _supplierAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInfoDto SupplierContact
        {
            get { return _supplierContact; }
            set 
            {
                if (_supplierContact != value)
                {
                    _supplierContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatRegistrationId
        {
            get { return _vatRegistrationId; }
            set 
            {
                if (_vatRegistrationId != value)
                {
                    _vatRegistrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId
        {
            get { return _corporateId; }
            set 
            {
                if (_corporateId != value)
                {
                    _corporateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatZoneDto VatZone
        {
            get { return _vatZone; }
            set 
            {
                if (_vatZone != value)
                {
                    _vatZone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttributeIdValueDto> Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierPaymentMethodDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SupplierPaymentMethodDetailDto> SupplierPaymentMethodDetails
        {
            get { return _supplierPaymentMethodDetails; }
            set 
            {
                if (_supplierPaymentMethodDetails != value)
                {
                    _supplierPaymentMethodDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Payment Method Detail in SupplierController. Used to get data for SupplierPaymentMethodDetails of a Supplier.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierPaymentMethodDetailDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _paymentMethodDetailDescription;
        private string _paymentMethodDetailValue;
    
        [Newtonsoft.Json.JsonProperty("paymentMethodDetailDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodDetailDescription
        {
            get { return _paymentMethodDetailDescription; }
            set 
            {
                if (_paymentMethodDetailDescription != value)
                {
                    _paymentMethodDetailDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethodDetailValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodDetailValue
        {
            get { return _paymentMethodDetailValue; }
            set 
            {
                if (_paymentMethodDetailValue != value)
                {
                    _paymentMethodDetailValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierPaymentMethodDetailDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierPaymentMethodDetailDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a supplier in SupplierController. Used to create and update supplier.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _number;
        private DtoValueOfString _name;
        private DtoValueOfSupplierStatus _status;
        private DtoValueOfString _accountReference;
        private DtoValueOfString _parentRecordNumber;
        private DtoValueOfString _supplierClassId;
        private bool? _overrideWithClassValues;
        private DtoValueOfString _creditTermsId;
        private DtoValueOfString _documentLanguage;
        private DtoValueOfString _currencyId;
        private DtoValueOfString _paymentMethodId;
        private DtoValueOfString _cashAccount;
        private DtoValueOfNullableOfInt16 _paymentLeadTime;
        private DtoValueOfString _paymentRefDisplayMask;
        private DtoValueOfNullableOfBoolean _paySeparately;
        private DtoValueOfString _vatRegistrationId;
        private DtoValueOfString _corporateId;
        private DtoValueOfString _vatZoneId;
        private DtoValueOfSupplierChargeBearer _chargeBearer;
        private DtoValueOfAccountUsedForPayment _accountUsedForPayment;
        private DtoValueOfPaymentBy _paymentBy;
        private DtoValueOfAddressUpdateDto _mainAddress;
        private DtoValueOfContactInfoUpdateDto _mainContact;
        private DtoValueOfAddressUpdateDto _remitAddress;
        private DtoValueOfContactInfoUpdateDto _remitContact;
        private DtoValueOfAddressUpdateDto _supplierAddress;
        private DtoValueOfContactInfoUpdateDto _supplierContact;
        private System.Collections.ObjectModel.ObservableCollection<SupplierPaymentMethodDetailUpdateDto> _supplierPaymentMethodDetails;
        private System.Collections.ObjectModel.ObservableCollection<AttributeLineUpdateDto> _attributeLines;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfSupplierStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountReference
        {
            get { return _accountReference; }
            set 
            {
                if (_accountReference != value)
                {
                    _accountReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentRecordNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ParentRecordNumber
        {
            get { return _parentRecordNumber; }
            set 
            {
                if (_parentRecordNumber != value)
                {
                    _parentRecordNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierClassId
        {
            get { return _supplierClassId; }
            set 
            {
                if (_supplierClassId != value)
                {
                    _supplierClassId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overrideWithClassValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideWithClassValues
        {
            get { return _overrideWithClassValues; }
            set 
            {
                if (_overrideWithClassValues != value)
                {
                    _overrideWithClassValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTermsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CreditTermsId
        {
            get { return _creditTermsId; }
            set 
            {
                if (_creditTermsId != value)
                {
                    _creditTermsId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DocumentLanguage
        {
            get { return _documentLanguage; }
            set 
            {
                if (_documentLanguage != value)
                {
                    _documentLanguage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentMethodId
        {
            get { return _paymentMethodId; }
            set 
            {
                if (_paymentMethodId != value)
                {
                    _paymentMethodId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CashAccount
        {
            get { return _cashAccount; }
            set 
            {
                if (_cashAccount != value)
                {
                    _cashAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentLeadTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt16 PaymentLeadTime
        {
            get { return _paymentLeadTime; }
            set 
            {
                if (_paymentLeadTime != value)
                {
                    _paymentLeadTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentRefDisplayMask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentRefDisplayMask
        {
            get { return _paymentRefDisplayMask; }
            set 
            {
                if (_paymentRefDisplayMask != value)
                {
                    _paymentRefDisplayMask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paySeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean PaySeparately
        {
            get { return _paySeparately; }
            set 
            {
                if (_paySeparately != value)
                {
                    _paySeparately = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatRegistrationId
        {
            get { return _vatRegistrationId; }
            set 
            {
                if (_vatRegistrationId != value)
                {
                    _vatRegistrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CorporateId
        {
            get { return _corporateId; }
            set 
            {
                if (_corporateId != value)
                {
                    _corporateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatZoneId
        {
            get { return _vatZoneId; }
            set 
            {
                if (_vatZoneId != value)
                {
                    _vatZoneId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("chargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfSupplierChargeBearer ChargeBearer
        {
            get { return _chargeBearer; }
            set 
            {
                if (_chargeBearer != value)
                {
                    _chargeBearer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountUsedForPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAccountUsedForPayment AccountUsedForPayment
        {
            get { return _accountUsedForPayment; }
            set 
            {
                if (_accountUsedForPayment != value)
                {
                    _accountUsedForPayment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfPaymentBy PaymentBy
        {
            get { return _paymentBy; }
            set 
            {
                if (_paymentBy != value)
                {
                    _paymentBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAddressUpdateDto MainAddress
        {
            get { return _mainAddress; }
            set 
            {
                if (_mainAddress != value)
                {
                    _mainAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mainContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfContactInfoUpdateDto MainContact
        {
            get { return _mainContact; }
            set 
            {
                if (_mainContact != value)
                {
                    _mainContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAddressUpdateDto RemitAddress
        {
            get { return _remitAddress; }
            set 
            {
                if (_remitAddress != value)
                {
                    _remitAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remitContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfContactInfoUpdateDto RemitContact
        {
            get { return _remitContact; }
            set 
            {
                if (_remitContact != value)
                {
                    _remitContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfAddressUpdateDto SupplierAddress
        {
            get { return _supplierAddress; }
            set 
            {
                if (_supplierAddress != value)
                {
                    _supplierAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfContactInfoUpdateDto SupplierContact
        {
            get { return _supplierContact; }
            set 
            {
                if (_supplierContact != value)
                {
                    _supplierContact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierPaymentMethodDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SupplierPaymentMethodDetailUpdateDto> SupplierPaymentMethodDetails
        {
            get { return _supplierPaymentMethodDetails; }
            set 
            {
                if (_supplierPaymentMethodDetails != value)
                {
                    _supplierPaymentMethodDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributeLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttributeLineUpdateDto> AttributeLines
        {
            get { return _attributeLines; }
            set 
            {
                if (_attributeLines != value)
                {
                    _attributeLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfSupplierStatus : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfSupplierStatusValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfSupplierStatusValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfSupplierStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfSupplierStatus>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfSupplierChargeBearer : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfSupplierChargeBearerValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfSupplierChargeBearerValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfSupplierChargeBearer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfSupplierChargeBearer>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfAccountUsedForPayment : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfAccountUsedForPaymentValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfAccountUsedForPaymentValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfAccountUsedForPayment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfAccountUsedForPayment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfPaymentBy : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfPaymentByValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfPaymentByValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfPaymentBy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfPaymentBy>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Payment Method Detail in SupplierController. Used to update SupplierPaymentMethodDetails when creating or updating a Supplier.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierPaymentMethodDetailUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _paymentMethodDetailDescription;
        private DtoValueOfString _paymentMethodDetailValue;
    
        [Newtonsoft.Json.JsonProperty("paymentMethodDetailDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodDetailDescription
        {
            get { return _paymentMethodDetailDescription; }
            set 
            {
                if (_paymentMethodDetailDescription != value)
                {
                    _paymentMethodDetailDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethodDetailValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentMethodDetailValue
        {
            get { return _paymentMethodDetailValue; }
            set 
            {
                if (_paymentMethodDetailValue != value)
                {
                    _paymentMethodDetailValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierPaymentMethodDetailUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierPaymentMethodDetailUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private string _greaterThanValue;
        private int? _numberToRead;
        private int? _skipRecords;
        private string _orderBy;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
        private string _name;
        private SupplierQueryParametersStatus? _status;
        private string _vatRegistrationId;
        private string _corporateId;
        private string _attributes;
    
        [Newtonsoft.Json.JsonProperty("greaterThanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GreaterThanValue
        {
            get { return _greaterThanValue; }
            set 
            {
                if (_greaterThanValue != value)
                {
                    _greaterThanValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy
        {
            get { return _orderBy; }
            set 
            {
                if (_orderBy != value)
                {
                    _orderBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierQueryParametersStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatRegistrationId
        {
            get { return _vatRegistrationId; }
            set 
            {
                if (_vatRegistrationId != value)
                {
                    _vatRegistrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId
        {
            get { return _corporateId; }
            set 
            {
                if (_corporateId != value)
                {
                    _corporateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a ApInvoice in SupplierInvoiceController. Used by getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierInvoiceDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
        private System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceLineDto> _invoiceLines;
        private bool? _hold;
        private double? _exchangeRate;
        private string _paymentRefNo;
        private CreditTermsDto _creditTerms;
        private System.DateTimeOffset? _cashDiscountDate;
        private double? _detailTotal;
        private double? _detailTotalInCurrency;
        private double? _vatTaxableTotal;
        private double? _vatTaxableTotalInCurrency;
        private double? _vatExemptTotal;
        private double? _vatExemptTotalInCurrency;
        private double? _withholdingTax;
        private double? _withholdingTaxInCurrency;
        private SupplierNumberDto _supplier;
        private SupplierInvoiceDtoDocumentType? _documentType;
        private string _referenceNumber;
        private string _postPeriod;
        private string _financialPeriod;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _dueDate;
        private SupplierInvoiceDtoApprovalStatus? _approvalStatus;
        private SupplierInvoiceDtoStatus? _status;
        private string _currencyId;
        private double? _balance;
        private double? _balanceInCurrency;
        private double? _cashDiscount;
        private double? _cashDiscountInCurrency;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _supplierReference;
        private string _description;
        private System.DateTimeOffset? _createdDateTime;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private string _note;
        private string _closedFinancialPeriod;
        private LocationDto _location;
        private double? _vatTotal;
        private double? _vatTotalInCurrency;
        private BranchNumberDto _branchNumber;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceLineDto> InvoiceLines
        {
            get { return _invoiceLines; }
            set 
            {
                if (_invoiceLines != value)
                {
                    _invoiceLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentRefNo
        {
            get { return _paymentRefNo; }
            set 
            {
                if (_paymentRefNo != value)
                {
                    _paymentRefNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditTermsDto CreditTerms
        {
            get { return _creditTerms; }
            set 
            {
                if (_creditTerms != value)
                {
                    _creditTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate
        {
            get { return _cashDiscountDate; }
            set 
            {
                if (_cashDiscountDate != value)
                {
                    _cashDiscountDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotal
        {
            get { return _detailTotal; }
            set 
            {
                if (_detailTotal != value)
                {
                    _detailTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detailTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DetailTotalInCurrency
        {
            get { return _detailTotalInCurrency; }
            set 
            {
                if (_detailTotalInCurrency != value)
                {
                    _detailTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotal
        {
            get { return _vatTaxableTotal; }
            set 
            {
                if (_vatTaxableTotal != value)
                {
                    _vatTaxableTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTaxableTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTaxableTotalInCurrency
        {
            get { return _vatTaxableTotalInCurrency; }
            set 
            {
                if (_vatTaxableTotalInCurrency != value)
                {
                    _vatTaxableTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotal
        {
            get { return _vatExemptTotal; }
            set 
            {
                if (_vatExemptTotal != value)
                {
                    _vatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatExemptTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatExemptTotalInCurrency
        {
            get { return _vatExemptTotalInCurrency; }
            set 
            {
                if (_vatExemptTotalInCurrency != value)
                {
                    _vatExemptTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("withholdingTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WithholdingTax
        {
            get { return _withholdingTax; }
            set 
            {
                if (_withholdingTax != value)
                {
                    _withholdingTax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("withholdingTaxInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WithholdingTaxInCurrency
        {
            get { return _withholdingTaxInCurrency; }
            set 
            {
                if (_withholdingTaxInCurrency != value)
                {
                    _withholdingTaxInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierNumberDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierInvoiceDtoDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierInvoiceDtoApprovalStatus? ApprovalStatus
        {
            get { return _approvalStatus; }
            set 
            {
                if (_approvalStatus != value)
                {
                    _approvalStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierInvoiceDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BalanceInCurrency
        {
            get { return _balanceInCurrency; }
            set 
            {
                if (_balanceInCurrency != value)
                {
                    _balanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountInCurrency
        {
            get { return _cashDiscountInCurrency; }
            set 
            {
                if (_cashDiscountInCurrency != value)
                {
                    _cashDiscountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierReference
        {
            get { return _supplierReference; }
            set 
            {
                if (_supplierReference != value)
                {
                    _supplierReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("closedFinancialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosedFinancialPeriod
        {
            get { return _closedFinancialPeriod; }
            set 
            {
                if (_closedFinancialPeriod != value)
                {
                    _closedFinancialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotalInCurrency
        {
            get { return _vatTotalInCurrency; }
            set 
            {
                if (_vatTotalInCurrency != value)
                {
                    _vatTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierInvoiceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierInvoiceDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierInvoiceLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _lineNumber;
        private string _inventoryNumber;
        private string _transactionDescription;
        private double? _quantity;
        private string _uom;
        private double? _unitCost;
        private double? _unitCostInCurrency;
        private double? _cost;
        private double? _costInCurrency;
        private AccountNumberDto _account;
        private SubAccountDto _subaccount;
        private int? _deferralSchedule;
        private string _deferralCode;
        private VatCodeDto _vatCode;
        private string _poNumber;
        private int? _poLineNr;
        private string _poReceiptNbr;
        private int? _poReceiptLineNbr;
        private BranchNumberDto _branchNumber;
        private string _note;
        private System.Collections.ObjectModel.ObservableCollection<AttachmentDto> _attachments;
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionDescription
        {
            get { return _transactionDescription; }
            set 
            {
                if (_transactionDescription != value)
                {
                    _transactionDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost
        {
            get { return _unitCost; }
            set 
            {
                if (_unitCost != value)
                {
                    _unitCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCostInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCostInCurrency
        {
            get { return _unitCostInCurrency; }
            set 
            {
                if (_unitCostInCurrency != value)
                {
                    _unitCostInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cost
        {
            get { return _cost; }
            set 
            {
                if (_cost != value)
                {
                    _cost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("costInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CostInCurrency
        {
            get { return _costInCurrency; }
            set 
            {
                if (_costInCurrency != value)
                {
                    _costInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatCodeDto VatCode
        {
            get { return _vatCode; }
            set 
            {
                if (_vatCode != value)
                {
                    _vatCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoNumber
        {
            get { return _poNumber; }
            set 
            {
                if (_poNumber != value)
                {
                    _poNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poLineNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PoLineNr
        {
            get { return _poLineNr; }
            set 
            {
                if (_poLineNr != value)
                {
                    _poLineNr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poReceiptNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoReceiptNbr
        {
            get { return _poReceiptNbr; }
            set 
            {
                if (_poReceiptNbr != value)
                {
                    _poReceiptNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poReceiptLineNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PoReceiptLineNbr
        {
            get { return _poReceiptLineNbr; }
            set 
            {
                if (_poReceiptLineNbr != value)
                {
                    _poReceiptLineNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Note: The field type has been changed from string to BranchNumberDto, please consider doing changes accordingly.</summary>
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttachmentDto> Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierInvoiceLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierInvoiceLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierNumberDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _number;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierNumberDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierNumberDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierDocumentDto : System.ComponentModel.INotifyPropertyChanged
    {
        private AccountNumberDto _account;
        private SubAccountDto _subaccount;
        private double? _amount;
        private double? _amountInCurrency;
        private BranchNumberDto _branch;
        private SupplierNumberDto _supplier;
        private SupplierDocumentDtoDocumentType? _documentType;
        private string _referenceNumber;
        private string _postPeriod;
        private string _financialPeriod;
        private System.DateTimeOffset? _date;
        private System.DateTimeOffset? _dueDate;
        private SupplierDocumentDtoApprovalStatus? _approvalStatus;
        private SupplierDocumentDtoStatus? _status;
        private string _currencyId;
        private double? _balance;
        private double? _balanceInCurrency;
        private double? _cashDiscount;
        private double? _cashDiscountInCurrency;
        private PaymentMethodIdDescriptionDto _paymentMethod;
        private string _supplierReference;
        private string _description;
        private System.DateTimeOffset? _createdDateTime;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private string _note;
        private string _closedFinancialPeriod;
        private LocationDto _location;
        private double? _vatTotal;
        private double? _vatTotalInCurrency;
        private BranchNumberDto _branchNumber;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto Account
        {
            get { return _account; }
            set 
            {
                if (_account != value)
                {
                    _account = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDto Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInCurrency
        {
            get { return _amountInCurrency; }
            set 
            {
                if (_amountInCurrency != value)
                {
                    _amountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Branch is deprecated, please use BranchNumber instead.</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierNumberDto Supplier
        {
            get { return _supplier; }
            set 
            {
                if (_supplier != value)
                {
                    _supplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierDocumentDtoDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierDocumentDtoApprovalStatus? ApprovalStatus
        {
            get { return _approvalStatus; }
            set 
            {
                if (_approvalStatus != value)
                {
                    _approvalStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierDocumentDtoStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("balanceInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BalanceInCurrency
        {
            get { return _balanceInCurrency; }
            set 
            {
                if (_balanceInCurrency != value)
                {
                    _balanceInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CashDiscountInCurrency
        {
            get { return _cashDiscountInCurrency; }
            set 
            {
                if (_cashDiscountInCurrency != value)
                {
                    _cashDiscountInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodIdDescriptionDto PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierReference
        {
            get { return _supplierReference; }
            set 
            {
                if (_supplierReference != value)
                {
                    _supplierReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDateTime
        {
            get { return _createdDateTime; }
            set 
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("closedFinancialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosedFinancialPeriod
        {
            get { return _closedFinancialPeriod; }
            set 
            {
                if (_closedFinancialPeriod != value)
                {
                    _closedFinancialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatTotalInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatTotalInCurrency
        {
            get { return _vatTotalInCurrency; }
            set 
            {
                if (_vatTotalInCurrency != value)
                {
                    _vatTotalInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierDocumentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierDocumentDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierInvoiceUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfSupplierInvoiceTypes _documentType;
        private DtoValueOfString _referenceNumber;
        private DtoValueOfBoolean _hold;
        private DtoValueOfDateTime _date;
        private DtoValueOfString _postPeriod;
        private DtoValueOfString _financialPeriod;
        private DtoValueOfString _supplierReference;
        private DtoValueOfString _description;
        private DtoValueOfString _supplierNumber;
        private DtoValueOfString _locationId;
        private DtoValueOfString _currencyId;
        private DtoValueOfString _paymentRefNo;
        private DtoValueOfString _creditTermsId;
        private DtoValueOfDateTime _dueDate;
        private DtoValueOfDateTime _cashDiscountDate;
        private DtoValueOfString _note;
        private DtoValueOfDecimal _exchangeRate;
        private DtoValueOfString _branchNumber;
        private System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceLineUpdateDto> _invoiceLines;
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfSupplierInvoiceTypes DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ReferenceNumber
        {
            get { return _referenceNumber; }
            set 
            {
                if (_referenceNumber != value)
                {
                    _referenceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfBoolean Hold
        {
            get { return _hold; }
            set 
            {
                if (_hold != value)
                {
                    _hold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.</summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PostPeriod
        {
            get { return _postPeriod; }
            set 
            {
                if (_postPeriod != value)
                {
                    _postPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.</summary>
        [Newtonsoft.Json.JsonProperty("financialPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString FinancialPeriod
        {
            get { return _financialPeriod; }
            set 
            {
                if (_financialPeriod != value)
                {
                    _financialPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierReference
        {
            get { return _supplierReference; }
            set 
            {
                if (_supplierReference != value)
                {
                    _supplierReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supplierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString SupplierNumber
        {
            get { return _supplierNumber; }
            set 
            {
                if (_supplierNumber != value)
                {
                    _supplierNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CurrencyId
        {
            get { return _currencyId; }
            set 
            {
                if (_currencyId != value)
                {
                    _currencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString PaymentRefNo
        {
            get { return _paymentRefNo; }
            set 
            {
                if (_paymentRefNo != value)
                {
                    _paymentRefNo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditTermsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString CreditTermsId
        {
            get { return _creditTermsId; }
            set 
            {
                if (_creditTermsId != value)
                {
                    _creditTermsId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDateTime CashDiscountDate
        {
            get { return _cashDiscountDate; }
            set 
            {
                if (_cashDiscountDate != value)
                {
                    _cashDiscountDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SupplierInvoiceLineUpdateDto> InvoiceLines
        {
            get { return _invoiceLines; }
            set 
            {
                if (_invoiceLines != value)
                {
                    _invoiceLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierInvoiceUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierInvoiceUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class DtoValueOfNullableOfSupplierInvoiceTypes : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfNullableOfSupplierInvoiceTypesValue? _value;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DtoValueOfNullableOfSupplierInvoiceTypesValue? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DtoValueOfNullableOfSupplierInvoiceTypes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DtoValueOfNullableOfSupplierInvoiceTypes>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class SupplierInvoiceLineUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private SupplierInvoiceLineUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _inventoryNumber;
        private DtoValueOfString _transactionDescription;
        private DtoValueOfDecimal _quantity;
        private DtoValueOfString _uom;
        private DtoValueOfNullableOfDecimal _unitCostInCurrency;
        private DtoValueOfNullableOfDecimal _costInCurrency;
        private DtoValueOfString _accountNumber;
        private System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> _subaccount;
        private DtoValueOfNullableOfInt32 _deferralSchedule;
        private DtoValueOfString _deferralCode;
        private DtoValueOfString _vatCodeId;
        private DtoValueOfString _branch;
        private DtoValueOfString _branchNumber;
        private DtoValueOfString _note;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupplierInvoiceLineUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString InventoryNumber
        {
            get { return _inventoryNumber; }
            set 
            {
                if (_inventoryNumber != value)
                {
                    _inventoryNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString TransactionDescription
        {
            get { return _transactionDescription; }
            set 
            {
                if (_transactionDescription != value)
                {
                    _transactionDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfDecimal Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Uom
        {
            get { return _uom; }
            set 
            {
                if (_uom != value)
                {
                    _uom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unitCostInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal UnitCostInCurrency
        {
            get { return _unitCostInCurrency; }
            set 
            {
                if (_unitCostInCurrency != value)
                {
                    _unitCostInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("costInCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfDecimal CostInCurrency
        {
            get { return _costInCurrency; }
            set 
            {
                if (_costInCurrency != value)
                {
                    _costInCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString AccountNumber
        {
            get { return _accountNumber; }
            set 
            {
                if (_accountNumber != value)
                {
                    _accountNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SegmentUpdateDto> Subaccount
        {
            get { return _subaccount; }
            set 
            {
                if (_subaccount != value)
                {
                    _subaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 DeferralSchedule
        {
            get { return _deferralSchedule; }
            set 
            {
                if (_deferralSchedule != value)
                {
                    _deferralSchedule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deferralCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString DeferralCode
        {
            get { return _deferralCode; }
            set 
            {
                if (_deferralCode != value)
                {
                    _deferralCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString VatCodeId
        {
            get { return _vatCodeId; }
            set 
            {
                if (_vatCodeId != value)
                {
                    _vatCodeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Branch is deprecated, please use BranchNumber instead.</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString BranchNumber
        {
            get { return _branchNumber; }
            set 
            {
                if (_branchNumber != value)
                {
                    _branchNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SupplierInvoiceLineUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupplierInvoiceLineUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReleaseSupplierInvoiceActionResultDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _actionId;
        private ReleaseSupplierInvoiceActionResultDtoActionResult? _actionResult;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId
        {
            get { return _actionId; }
            set 
            {
                if (_actionId != value)
                {
                    _actionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("actionResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReleaseSupplierInvoiceActionResultDtoActionResult? ActionResult
        {
            get { return _actionResult; }
            set 
            {
                if (_actionResult != value)
                {
                    _actionResult = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleaseSupplierInvoiceActionResultDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseSupplierInvoiceActionResultDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TimeCardUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private DtoValueOfString _refNbr;
        private DtoValueOfString _employee;
        private System.Collections.ObjectModel.ObservableCollection<TimeCardSummaryUpdateDto> _summary;
        private System.Collections.Generic.Dictionary<string, object> _extras;
        private string _errorInfo;
    
        [Newtonsoft.Json.JsonProperty("refNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString RefNbr
        {
            get { return _refNbr; }
            set 
            {
                if (_refNbr != value)
                {
                    _refNbr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Employee
        {
            get { return _employee; }
            set 
            {
                if (_employee != value)
                {
                    _employee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time Card summary information</summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TimeCardSummaryUpdateDto> Summary
        {
            get { return _summary; }
            set 
            {
                if (_summary != value)
                {
                    _summary = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extras
        {
            get { return _extras; }
            set 
            {
                if (_extras != value)
                {
                    _extras = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("errorInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorInfo
        {
            get { return _errorInfo; }
            set 
            {
                if (_errorInfo != value)
                {
                    _errorInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeCardUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCardUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class TimeCardSummaryUpdateDto : System.ComponentModel.INotifyPropertyChanged
    {
        private TimeCardSummaryUpdateDtoOperation? _operation;
        private DtoValueOfInt32 _lineNumber;
        private DtoValueOfString _earningType;
        private DtoValueOfString _project;
        private DtoValueOfString _projectTask;
        private DtoValueOfNullableOfInt32 _mon;
        private DtoValueOfNullableOfInt32 _tue;
        private DtoValueOfNullableOfInt32 _wed;
        private DtoValueOfNullableOfInt32 _thu;
        private DtoValueOfNullableOfInt32 _fri;
        private DtoValueOfNullableOfInt32 _sat;
        private DtoValueOfNullableOfInt32 _sun;
        private DtoValueOfNullableOfBoolean _invoiceable;
        private DtoValueOfString _description;
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeCardSummaryUpdateDtoOperation? Operation
        {
            get { return _operation; }
            set 
            {
                if (_operation != value)
                {
                    _operation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfInt32 LineNumber
        {
            get { return _lineNumber; }
            set 
            {
                if (_lineNumber != value)
                {
                    _lineNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of the work time spent by the employee</summary>
        [Newtonsoft.Json.JsonProperty("earningType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString EarningType
        {
            get { return _earningType; }
            set 
            {
                if (_earningType != value)
                {
                    _earningType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project that the employee worked on.</summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project task that the employee worked on.</summary>
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Monday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("mon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Mon
        {
            get { return _mon; }
            set 
            {
                if (_mon != value)
                {
                    _mon = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Tuesday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("tue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Tue
        {
            get { return _tue; }
            set 
            {
                if (_tue != value)
                {
                    _tue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Wednesday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("wed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Wed
        {
            get { return _wed; }
            set 
            {
                if (_wed != value)
                {
                    _wed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Thursday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("thu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Thu
        {
            get { return _thu; }
            set 
            {
                if (_thu != value)
                {
                    _thu = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Friday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("fri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Fri
        {
            get { return _fri; }
            set 
            {
                if (_fri != value)
                {
                    _fri = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Saturday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("sat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Sat
        {
            get { return _sat; }
            set 
            {
                if (_sat != value)
                {
                    _sat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work time reported for Sunday, including overtime.</summary>
        [Newtonsoft.Json.JsonProperty("sun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfInt32 Sun
        {
            get { return _sun; }
            set 
            {
                if (_sun != value)
                {
                    _sun = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A check box that you select to indicate that these work hours are invoiceable.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfNullableOfBoolean Invoiceable
        {
            get { return _invoiceable; }
            set 
            {
                if (_invoiceable != value)
                {
                    _invoiceable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The description of the reported work hours.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DtoValueOfString Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeCardSummaryUpdateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCardSummaryUpdateDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatInformationDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _vatCategoryId;
        private string _vatId;
        private string _description;
        private VatInformationDtoType? _type;
        private bool? _deductibleVat;
        private bool? _reverseVat;
        private bool? _statisticalVat;
        private bool? _pendingVat;
        private bool? _includeinVatExemptTotal;
        private bool? _includeinVatTotal;
        private bool? _enterFromVatInvoice;
        private VatInformationDtoCalculateOn? _calculateOn;
        private VatInformationDtoCashDiscount? _cashDiscount;
        private SupplierNumberDto _vatAgencyId;
        private System.DateTimeOffset? _notValidAfter;
        private VatInformationDtoEuReportCode? _euReportCode;
        private VatInformationDtoDocumentText? _documentText;
        private InventoryNumberDescriptionDto _defaultNonStockItem;
        private VatInformationDtoVismaXmlVatType? _vismaXmlVatType;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private VatGlAccountsDto _glAccounts;
        private System.Collections.ObjectModel.ObservableCollection<VatInformationScheduleDto> _schedules;
        private System.Collections.ObjectModel.ObservableCollection<VatCategoryDto> _categories;
        private System.Collections.ObjectModel.ObservableCollection<VatZoneDto> _zones;
    
        /// <summary>VatCategoryId is deprecated, please use Vat Id instead</summary>
        [Newtonsoft.Json.JsonProperty("vatCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatCategoryId
        {
            get { return _vatCategoryId; }
            set 
            {
                if (_vatCategoryId != value)
                {
                    _vatCategoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatId
        {
            get { return _vatId; }
            set 
            {
                if (_vatId != value)
                {
                    _vatId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatInformationDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deductibleVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeductibleVat
        {
            get { return _deductibleVat; }
            set 
            {
                if (_deductibleVat != value)
                {
                    _deductibleVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reverseVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseVat
        {
            get { return _reverseVat; }
            set 
            {
                if (_reverseVat != value)
                {
                    _reverseVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statisticalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StatisticalVat
        {
            get { return _statisticalVat; }
            set 
            {
                if (_statisticalVat != value)
                {
                    _statisticalVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pendingVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PendingVat
        {
            get { return _pendingVat; }
            set 
            {
                if (_pendingVat != value)
                {
                    _pendingVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeinVatExemptTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeinVatExemptTotal
        {
            get { return _includeinVatExemptTotal; }
            set 
            {
                if (_includeinVatExemptTotal != value)
                {
                    _includeinVatExemptTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeinVatTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeinVatTotal
        {
            get { return _includeinVatTotal; }
            set 
            {
                if (_includeinVatTotal != value)
                {
                    _includeinVatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("enterFromVatInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnterFromVatInvoice
        {
            get { return _enterFromVatInvoice; }
            set 
            {
                if (_enterFromVatInvoice != value)
                {
                    _enterFromVatInvoice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("calculateOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatInformationDtoCalculateOn? CalculateOn
        {
            get { return _calculateOn; }
            set 
            {
                if (_calculateOn != value)
                {
                    _calculateOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatInformationDtoCashDiscount? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatAgencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierNumberDto VatAgencyId
        {
            get { return _vatAgencyId; }
            set 
            {
                if (_vatAgencyId != value)
                {
                    _vatAgencyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notValidAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NotValidAfter
        {
            get { return _notValidAfter; }
            set 
            {
                if (_notValidAfter != value)
                {
                    _notValidAfter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("euReportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatInformationDtoEuReportCode? EuReportCode
        {
            get { return _euReportCode; }
            set 
            {
                if (_euReportCode != value)
                {
                    _euReportCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documentText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatInformationDtoDocumentText? DocumentText
        {
            get { return _documentText; }
            set 
            {
                if (_documentText != value)
                {
                    _documentText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defaultNonStockItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto DefaultNonStockItem
        {
            get { return _defaultNonStockItem; }
            set 
            {
                if (_defaultNonStockItem != value)
                {
                    _defaultNonStockItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vismaXmlVatType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatInformationDtoVismaXmlVatType? VismaXmlVatType
        {
            get { return _vismaXmlVatType; }
            set 
            {
                if (_vismaXmlVatType != value)
                {
                    _vismaXmlVatType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("glAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VatGlAccountsDto GlAccounts
        {
            get { return _glAccounts; }
            set 
            {
                if (_glAccounts != value)
                {
                    _glAccounts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<VatInformationScheduleDto> Schedules
        {
            get { return _schedules; }
            set 
            {
                if (_schedules != value)
                {
                    _schedules = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<VatCategoryDto> Categories
        {
            get { return _categories; }
            set 
            {
                if (_categories != value)
                {
                    _categories = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("zones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<VatZoneDto> Zones
        {
            get { return _zones; }
            set 
            {
                if (_zones != value)
                {
                    _zones = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatInformationDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatInformationDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatGlAccountsDto : System.ComponentModel.INotifyPropertyChanged
    {
        private AccountNumberDto _vatPayableAccount;
        private SubAccountDescriptionDto _vatPayableSubaccount;
        private AccountNumberDto _vatClaimableAccount;
        private SubAccountDescriptionDto _vatClaimableSubccount;
    
        [Newtonsoft.Json.JsonProperty("vatPayableAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto VatPayableAccount
        {
            get { return _vatPayableAccount; }
            set 
            {
                if (_vatPayableAccount != value)
                {
                    _vatPayableAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatPayableSubaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto VatPayableSubaccount
        {
            get { return _vatPayableSubaccount; }
            set 
            {
                if (_vatPayableSubaccount != value)
                {
                    _vatPayableSubaccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatClaimableAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumberDto VatClaimableAccount
        {
            get { return _vatClaimableAccount; }
            set 
            {
                if (_vatClaimableAccount != value)
                {
                    _vatClaimableAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatClaimableSubccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubAccountDescriptionDto VatClaimableSubccount
        {
            get { return _vatClaimableSubccount; }
            set 
            {
                if (_vatClaimableSubccount != value)
                {
                    _vatClaimableSubccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatGlAccountsDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatGlAccountsDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatInformationScheduleDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTimeOffset? _startDate;
        private double? _vatRate;
        private double? _minTaxableAmt;
        private double? _maxTaxableAmt;
        private string _reportingGroup;
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatRate
        {
            get { return _vatRate; }
            set 
            {
                if (_vatRate != value)
                {
                    _vatRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("minTaxableAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinTaxableAmt
        {
            get { return _minTaxableAmt; }
            set 
            {
                if (_minTaxableAmt != value)
                {
                    _minTaxableAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxTaxableAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxTaxableAmt
        {
            get { return _maxTaxableAmt; }
            set 
            {
                if (_maxTaxableAmt != value)
                {
                    _maxTaxableAmt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reportingGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportingGroup
        {
            get { return _reportingGroup; }
            set 
            {
                if (_reportingGroup != value)
                {
                    _reportingGroup = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatInformationScheduleDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatInformationScheduleDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatCategoryDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _vatCategoryId;
        private string _description;
        private bool? _active;
        private bool? _excludeListedTaxes;
        private System.DateTimeOffset? _lastModifiedDateTime;
        private System.Collections.ObjectModel.ObservableCollection<VatCategoryLineDto> _vatCategoryLines;
    
        [Newtonsoft.Json.JsonProperty("vatCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatCategoryId
        {
            get { return _vatCategoryId; }
            set 
            {
                if (_vatCategoryId != value)
                {
                    _vatCategoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("excludeListedTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeListedTaxes
        {
            get { return _excludeListedTaxes; }
            set 
            {
                if (_excludeListedTaxes != value)
                {
                    _excludeListedTaxes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vatCategoryLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<VatCategoryLineDto> VatCategoryLines
        {
            get { return _vatCategoryLines; }
            set 
            {
                if (_vatCategoryLines != value)
                {
                    _vatCategoryLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatCategoryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatCategoryDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatCategoryLineDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _vatId;
        private string _description;
        private VatCategoryLineDtoType? _type;
        private VatCategoryLineDtoCalculateOn? _calculateOn;
        private VatCategoryLineDtoCashDiscount? _cashDiscount;
    
        [Newtonsoft.Json.JsonProperty("vatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatId
        {
            get { return _vatId; }
            set 
            {
                if (_vatId != value)
                {
                    _vatId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatCategoryLineDtoType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("calculateOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatCategoryLineDtoCalculateOn? CalculateOn
        {
            get { return _calculateOn; }
            set 
            {
                if (_calculateOn != value)
                {
                    _calculateOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cashDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatCategoryLineDtoCashDiscount? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatCategoryLineDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatCategoryLineDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class VatCategoryQueryParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _numberToRead;
        private int? _skipRecords;
        private string _lastModifiedDateTime;
        private string _lastModifiedDateTimeCondition;
    
        [Newtonsoft.Json.JsonProperty("numberToRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberToRead
        {
            get { return _numberToRead; }
            set 
            {
                if (_numberToRead != value)
                {
                    _numberToRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("skipRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkipRecords
        {
            get { return _skipRecords; }
            set 
            {
                if (_skipRecords != value)
                {
                    _skipRecords = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTime
        {
            get { return _lastModifiedDateTime; }
            set 
            {
                if (_lastModifiedDateTime != value)
                {
                    _lastModifiedDateTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTimeCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDateTimeCondition
        {
            get { return _lastModifiedDateTimeCondition; }
            set 
            {
                if (_lastModifiedDateTimeCondition != value)
                {
                    _lastModifiedDateTimeCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VatCategoryQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VatCategoryQueryParameters>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>This class represents a Warehouse in WarehouseController. Used for getting data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WarehouseDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _warehouseID;
        private BranchNumberDto _branch;
        private ReplenishmentClassIdDescriptionDto _replenishmentClass;
        private bool? _active;
        private bool? _lockSitePICountEntry;
        private string _description;
        private WarehouseDtoLocationEntry? _locationEntry;
        private WarehouseDtoAvgDefaultCost? _avgDefaultCost;
        private WarehouseDtoFifoDefaultCost? _fifoDefaultCost;
        private LocationNameDescriptionDto _receiptLocation;
        private LocationNameDescriptionDto _shipLocation;
        private LocationNameDescriptionDto _returnLocation;
        private LocationNameDescriptionDto _dropShipLocation;
        private WarehouseContactDto _contact;
        private WarehouseAddressDto _address;
        private System.Collections.ObjectModel.ObservableCollection<WarehouseLocationDto> _locations;
    
        [Newtonsoft.Json.JsonProperty("warehouseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseID
        {
            get { return _warehouseID; }
            set 
            {
                if (_warehouseID != value)
                {
                    _warehouseID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BranchNumberDto Branch
        {
            get { return _branch; }
            set 
            {
                if (_branch != value)
                {
                    _branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("replenishmentClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReplenishmentClassIdDescriptionDto ReplenishmentClass
        {
            get { return _replenishmentClass; }
            set 
            {
                if (_replenishmentClass != value)
                {
                    _replenishmentClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lockSitePICountEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LockSitePICountEntry
        {
            get { return _lockSitePICountEntry; }
            set 
            {
                if (_lockSitePICountEntry != value)
                {
                    _lockSitePICountEntry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locationEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseDtoLocationEntry? LocationEntry
        {
            get { return _locationEntry; }
            set 
            {
                if (_locationEntry != value)
                {
                    _locationEntry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("avgDefaultCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseDtoAvgDefaultCost? AvgDefaultCost
        {
            get { return _avgDefaultCost; }
            set 
            {
                if (_avgDefaultCost != value)
                {
                    _avgDefaultCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fifoDefaultCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseDtoFifoDefaultCost? FifoDefaultCost
        {
            get { return _fifoDefaultCost; }
            set 
            {
                if (_fifoDefaultCost != value)
                {
                    _fifoDefaultCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto ReceiptLocation
        {
            get { return _receiptLocation; }
            set 
            {
                if (_receiptLocation != value)
                {
                    _receiptLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shipLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto ShipLocation
        {
            get { return _shipLocation; }
            set 
            {
                if (_shipLocation != value)
                {
                    _shipLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("returnLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto ReturnLocation
        {
            get { return _returnLocation; }
            set 
            {
                if (_returnLocation != value)
                {
                    _returnLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dropShipLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationNameDescriptionDto DropShipLocation
        {
            get { return _dropShipLocation; }
            set 
            {
                if (_dropShipLocation != value)
                {
                    _dropShipLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseContactDto Contact
        {
            get { return _contact; }
            set 
            {
                if (_contact != value)
                {
                    _contact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarehouseAddressDto Address
        {
            get { return _address; }
            set 
            {
                if (_address != value)
                {
                    _address = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WarehouseLocationDto> Locations
        {
            get { return _locations; }
            set 
            {
                if (_locations != value)
                {
                    _locations = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WarehouseDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarehouseDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class ReplenishmentClassIdDescriptionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReplenishmentClassIdDescriptionDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReplenishmentClassIdDescriptionDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WarehouseContactDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _contactId;
        private string _companyName;
        private string _attention;
        private string _email;
        private string _web;
        private string _phone1;
        private string _phone2;
        private string _fax;
    
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId
        {
            get { return _contactId; }
            set 
            {
                if (_contactId != value)
                {
                    _contactId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName
        {
            get { return _companyName; }
            set 
            {
                if (_companyName != value)
                {
                    _companyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attention
        {
            get { return _attention; }
            set 
            {
                if (_attention != value)
                {
                    _attention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Web
        {
            get { return _web; }
            set 
            {
                if (_web != value)
                {
                    _web = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1
        {
            get { return _phone1; }
            set 
            {
                if (_phone1 != value)
                {
                    _phone1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2
        {
            get { return _phone2; }
            set 
            {
                if (_phone2 != value)
                {
                    _phone2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WarehouseContactDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarehouseContactDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WarehouseAddressDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _addressId;
        private string _addressType;
        private bool? _validated;
        private string _addressLine1;
        private string _addressLine2;
        private string _city;
        private CountryDto _country;
        private CountyDto _county;
        private string _postalCode;
    
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AddressId
        {
            get { return _addressId; }
            set 
            {
                if (_addressId != value)
                {
                    _addressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressType
        {
            get { return _addressType; }
            set 
            {
                if (_addressType != value)
                {
                    _addressType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("validated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Validated
        {
            get { return _validated; }
            set 
            {
                if (_validated != value)
                {
                    _validated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryDto Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountyDto County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WarehouseAddressDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarehouseAddressDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public partial class WarehouseLocationDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _locationId;
        private string _description;
        private bool? _active;
        private bool? _inclQtyAvail;
        private bool? _isCosted;
        private bool? _salesValid;
        private bool? _receiptsValid;
        private bool? _transfersValid;
        private bool? _assemblyValid;
        private WarehouseLocationDtoPrimaryItemValid? _primaryItemValid;
        private InventoryNumberDescriptionDto _primaryItem;
        private ItemClassDto _primaryItemClass;
        private ProjectIdDescriptionDto _project;
        private ProjectTaskIdDescriptionDto _projectTask;
    
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId
        {
            get { return _locationId; }
            set 
            {
                if (_locationId != value)
                {
                    _locationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inclQtyAvail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InclQtyAvail
        {
            get { return _inclQtyAvail; }
            set 
            {
                if (_inclQtyAvail != value)
                {
                    _inclQtyAvail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isCosted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCosted
        {
            get { return _isCosted; }
            set 
            {
                if (_isCosted != value)
                {
                    _isCosted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("salesValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SalesValid
        {
            get { return _salesValid; }
            set 
            {
                if (_salesValid != value)
                {
                    _salesValid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("receiptsValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReceiptsValid
        {
            get { return _receiptsValid; }
            set 
            {
                if (_receiptsValid != value)
                {
                    _receiptsValid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transfersValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransfersValid
        {
            get { return _transfersValid; }
            set 
            {
                if (_transfersValid != value)
                {
                    _transfersValid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("assemblyValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssemblyValid
        {
            get { return _assemblyValid; }
            set 
            {
                if (_assemblyValid != value)
                {
                    _assemblyValid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("primaryItemValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseLocationDtoPrimaryItemValid? PrimaryItemValid
        {
            get { return _primaryItemValid; }
            set 
            {
                if (_primaryItemValid != value)
                {
                    _primaryItemValid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("primaryItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryNumberDescriptionDto PrimaryItem
        {
            get { return _primaryItem; }
            set 
            {
                if (_primaryItem != value)
                {
                    _primaryItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("primaryItemClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemClassDto PrimaryItemClass
        {
            get { return _primaryItemClass; }
            set 
            {
                if (_primaryItemClass != value)
                {
                    _primaryItemClass = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectIdDescriptionDto Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("projectTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTaskIdDescriptionDto ProjectTask
        {
            get { return _projectTask; }
            set 
            {
                if (_projectTask != value)
                {
                    _projectTask = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WarehouseLocationDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarehouseLocationDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType3
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType4
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType5
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InApproval")]
        InApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Expired")]
        Expired = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "InUpgrade")]
        InUpgrade = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingActivation")]
        PendingActivation = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType6
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType7
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PriceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Base")]
        Base = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Customer")]
        Customer = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerPriceClass")]
        CustomerPriceClass = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status3
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Correction")]
        Correction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NormalCorrected")]
        NormalCorrected = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status4
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status5
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status6
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status7
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum BalanceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Actual")]
        Actual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Report")]
        Report = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Statistical")]
        Statistical = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Budget")]
        Budget = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status8
    {
        [System.Runtime.Serialization.EnumMember(Value = "Planned")]
        Planned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum OrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum OrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum OrderType2
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum OrderStatus2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReceiptType
    {
        [System.Runtime.Serialization.EnumMember(Value = "PoReceipt")]
        PoReceipt = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PoReturn")]
        PoReturn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReceipt")]
        TransferReceipt = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReceiptType2
    {
        [System.Runtime.Serialization.EnumMember(Value = "PoReceipt")]
        PoReceipt = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PoReturn")]
        PoReturn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReceipt")]
        TransferReceipt = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SummaryStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Counting")]
        Counting = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Entering")]
        Entering = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status9
    {
        [System.Runtime.Serialization.EnumMember(Value = "NotEntered")]
        NotEntered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Entered")]
        Entered = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Skipped")]
        Skipped = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status10
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HoldPayments")]
        HoldPayments = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType8
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType9
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType10
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentType11
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Status11
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum Type2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Correction")]
        Correction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NormalCorrected")]
        NormalCorrected = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum AccountDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asset")]
        Asset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Liability")]
        Liability = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Income")]
        Income = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Expense")]
        Expense = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum AccountNumberDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asset")]
        Asset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Liability")]
        Liability = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Income")]
        Income = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Expense")]
        Expense = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum FinancialPeriodAmountUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum EntryTypeDtoDisableReceipt
    {
        [System.Runtime.Serialization.EnumMember(Value = "Disbursement")]
        Disbursement = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Receipt")]
        Receipt = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum EntryTypeDtoTaxCalculationMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "TaxSetting")]
        TaxSetting = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gross")]
        Gross = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Net")]
        Net = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashSaleDtoDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashSaleDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "CcHold")]
        CcHold = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DocumentQueryParametersDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashSaleLinesUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashTransactionDtoTranType
    {
        [System.Runtime.Serialization.EnumMember(Value = "TransferOut")]
        TransferOut = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferIn")]
        TransferIn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferExp")]
        TransferExp = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Adjustment")]
        Adjustment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashTransactionDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pending")]
        Pending = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashTransactionDtoDisbReceipt
    {
        [System.Runtime.Serialization.EnumMember(Value = "Disbursement")]
        Disbursement = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Receipt")]
        Receipt = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashTranTaxDetailDtoTaxType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Sales")]
        Sales = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Use")]
        Use = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Vat")]
        Vat = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Withholding")]
        Withholding = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum FinancialsDetailDtoTaxCalcMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "TaxSetting")]
        TaxSetting = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gross")]
        Gross = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Net")]
        Net = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfTaxCalcModeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "TaxSetting")]
        TaxSetting = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gross")]
        Gross = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Net")]
        Net = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CashTransactionDetailUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReleaseCashTransactionActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReverseCashTransactionActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ContactDtoTitle
    {
        [System.Runtime.Serialization.EnumMember(Value = "Doctor")]
        Doctor = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Miss")]
        Miss = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mr")]
        Mr = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mrs")]
        Mrs = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ms")]
        Ms = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prof")]
        Prof = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ContactDtoContactMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = "Any")]
        Any = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Email")]
        Email = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mail")]
        Mail = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Fax")]
        Fax = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Phone")]
        Phone = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfEmployeeTitlesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Doctor")]
        Doctor = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Miss")]
        Miss = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mr")]
        Mr = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mrs")]
        Mrs = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ms")]
        Ms = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prof")]
        Prof = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfContactMethodsValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Any")]
        Any = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Email")]
        Email = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mail")]
        Mail = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Fax")]
        Fax = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Phone")]
        Phone = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ContractUsageLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CreditNoteDtoDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CreditNoteDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "CcHold")]
        CcHold = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CreditNoteLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReleaseInvoiceActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ClassAttributeDtoAttributeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Text")]
        Text = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Combo")]
        Combo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Lookup")]
        Lookup = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Checkbox")]
        Checkbox = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Datetime")]
        Datetime = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "MultiSelectCombo")]
        MultiSelectCombo = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderDtoShipComplete
    {
        [System.Runtime.Serialization.EnumMember(Value = "BackOrderAllowed")]
        BackOrderAllowed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CancelRemainder")]
        CancelRemainder = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ShipComplete")]
        ShipComplete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "BackOrder")]
        BackOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shipping")]
        Shipping = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoiced")]
        Invoiced = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderLineDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Issue")]
        Issue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Receipt")]
        Receipt = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderLineDtoShipComplete
    {
        [System.Runtime.Serialization.EnumMember(Value = "BackOrderAllowed")]
        BackOrderAllowed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CancelRemainder")]
        CancelRemainder = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ShipComplete")]
        ShipComplete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderLineDtoPoSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "DropShipToOrder")]
        DropShipToOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manufactured")]
        Manufactured = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Purchased")]
        Purchased = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PurchaseToOrder")]
        PurchaseToOrder = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Transfer")]
        Transfer = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderBasicDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "BackOrder")]
        BackOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shipping")]
        Shipping = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoiced")]
        Invoiced = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerDtoCreditVerification
    {
        [System.Runtime.Serialization.EnumMember(Value = "Disabled")]
        Disabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DaysPastDue")]
        DaysPastDue = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditLimit")]
        CreditLimit = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "LimitAndDaysPastDue")]
        LimitAndDaysPastDue = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerDtoStatementType
    {
        [System.Runtime.Serialization.EnumMember(Value = "OpenItem")]
        OpenItem = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BalanceBroughtForward")]
        BalanceBroughtForward = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfCustomerStatusValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfCreditRuleValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Disabled")]
        Disabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DaysPastDue")]
        DaysPastDue = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditLimit")]
        CreditLimit = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "LimitAndDaysPastDue")]
        LimitAndDaysPastDue = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfStatementTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "OpenItem")]
        OpenItem = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BalanceBroughtForward")]
        BalanceBroughtForward = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerDirectDebitUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerInvoiceDtoDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerInvoiceDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "CcHold")]
        CcHold = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerInvoiceLineDtoItemType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Service")]
        Service = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MaterialCost")]
        MaterialCost = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OtherCost")]
        OtherCost = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum WorkTypeDtoRutRotType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rut")]
        Rut = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rot")]
        Rot = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerDocumentDtoDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerDocumentDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "CcHold")]
        CcHold = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CreateDunningLetterActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerContractDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InApproval")]
        InApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Expired")]
        Expired = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "InUpgrade")]
        InUpgrade = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingActivation")]
        PendingActivation = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerContractQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InApproval")]
        InApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Expired")]
        Expired = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "InUpgrade")]
        InUpgrade = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingActivation")]
        PendingActivation = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfInvoiceToTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "ParentAccount")]
        ParentAccount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerAccount")]
        CustomerAccount = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SpecificAccount")]
        SpecificAccount = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerContractDetailsUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerContractSummaryDtoInvoicingPeriod
    {
        [System.Runtime.Serialization.EnumMember(Value = "Statement")]
        Statement = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Quarterly")]
        Quarterly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Annual")]
        Annual = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "SemiAnnual")]
        SemiAnnual = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnDemand")]
        OnDemand = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerContractSummaryDtoInvoiceTo
    {
        [System.Runtime.Serialization.EnumMember(Value = "ParentAccount")]
        ParentAccount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerAccount")]
        CustomerAccount = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SpecificAccount")]
        SpecificAccount = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerContractRecurringSummaryLineDtoInvoiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepay")]
        Prepay = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Usage")]
        Usage = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deposits")]
        Deposits = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerInvoiceLinesUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfRutRotTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rut")]
        Rut = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rot")]
        Rot = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum RotRutDistributionUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfRutRotItemTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Service")]
        Service = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MaterialCost")]
        MaterialCost = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OtherCost")]
        OtherCost = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum RotRutDtoDocType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum RotRutDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rut")]
        Rut = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rot")]
        Rot = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReverseInvoiceActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerSalesPriceQueryParametersPriceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Base")]
        Base = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Customer")]
        Customer = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerPriceClass")]
        CustomerPriceClass = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CustomerSalesPriceDtoPriceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Base")]
        Base = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Customer")]
        Customer = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerPriceClass")]
        CustomerPriceClass = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoSegmentValueUpdateDtoBaseOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum EmployeeDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HoldPayments")]
        HoldPayments = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum EmployeeContactDtoTitle
    {
        [System.Runtime.Serialization.EnumMember(Value = "Doctor")]
        Doctor = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Miss")]
        Miss = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mr")]
        Mr = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Mrs")]
        Mrs = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ms")]
        Ms = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prof")]
        Prof = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum EmployeeTimeCardQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum EmployeeTimeCardQueryParametersType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Correction")]
        Correction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NormalCorrected")]
        NormalCorrected = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum TimeCardDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum TimeCardDtoApprovalStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SentToApproval")]
        SentToApproval = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReceivedByApproval")]
        ReceivedByApproval = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgressApproval")]
        InProgressApproval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "RejectedInApproval")]
        RejectedInApproval = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ApprovedInApproval")]
        ApprovedInApproval = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActiveWorkflowApproval")]
        ActiveWorkflowApproval = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum TimeCardDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Correction")]
        Correction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NormalCorrected")]
        NormalCorrected = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum TimeCardSummaryDtoApprovalStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SentToApproval")]
        SentToApproval = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReceivedByApproval")]
        ReceivedByApproval = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgressApproval")]
        InProgressApproval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "RejectedInApproval")]
        RejectedInApproval = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ApprovedInApproval")]
        ApprovedInApproval = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActiveWorkflowApproval")]
        ActiveWorkflowApproval = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseClaimQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseClaimDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseClaimDtoApprovalStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SentToApproval")]
        SentToApproval = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReceivedByApproval")]
        ReceivedByApproval = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgressApproval")]
        InProgressApproval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "RejectedInApproval")]
        RejectedInApproval = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ApprovedInApproval")]
        ApprovedInApproval = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActiveWorkflowApproval")]
        ActiveWorkflowApproval = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseClaimDetailDtoApprovalStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SentToApproval")]
        SentToApproval = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReceivedByApproval")]
        ReceivedByApproval = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgressApproval")]
        InProgressApproval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "RejectedInApproval")]
        RejectedInApproval = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ApprovedInApproval")]
        ApprovedInApproval = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActiveWorkflowApproval")]
        ActiveWorkflowApproval = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseReceiptQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseReceiptDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseClaimUpdateDtoCustomerUpdateAnswer
    {
        [System.Runtime.Serialization.EnumMember(Value = "SelectedCustomer")]
        SelectedCustomer = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AllLines")]
        AllLines = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Nothing")]
        Nothing = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ExpenseClaimDetailUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum GeneralLedgerBalanceQueryParametersBalanceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Actual")]
        Actual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Report")]
        Report = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Statistical")]
        Statistical = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Budget")]
        Budget = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum GeneralLedgerBalanceDtoBalanceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Actual")]
        Actual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Report")]
        Report = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Statistical")]
        Statistical = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Budget")]
        Budget = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum AccountNumberDescriptionDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asset")]
        Asset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Liability")]
        Liability = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Income")]
        Income = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Expense")]
        Expense = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ItemClassDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "NonStockItem")]
        NonStockItem = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LaborItem")]
        LaborItem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ServiceItem")]
        ServiceItem = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ChargeItem")]
        ChargeItem = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ExpenseItem")]
        ExpenseItem = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinishedGoodItem")]
        FinishedGoodItem = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ComponentPartItem")]
        ComponentPartItem = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "SubassemblyItem")]
        SubassemblyItem = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoSales")]
        NoSales = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoPurchases")]
        NoPurchases = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoRequest")]
        NoRequest = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "MarkedForDeletion")]
        MarkedForDeletion = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "NonStockItem")]
        NonStockItem = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LaborItem")]
        LaborItem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ServiceItem")]
        ServiceItem = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ChargeItem")]
        ChargeItem = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ExpenseItem")]
        ExpenseItem = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinishedGoodItem")]
        FinishedGoodItem = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ComponentPartItem")]
        ComponentPartItem = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "SubassemblyItem")]
        SubassemblyItem = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryCrossReferenceDtoAlternateType
    {
        [System.Runtime.Serialization.EnumMember(Value = "CPN")]
        CPN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "VPN")]
        VPN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Global")]
        Global = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Barcode")]
        Barcode = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfInventoryStatusValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoSales")]
        NoSales = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoPurchases")]
        NoPurchases = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoRequest")]
        NoRequest = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "MarkedForDeletion")]
        MarkedForDeletion = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfInventoryTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "NonStockItem")]
        NonStockItem = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LaborItem")]
        LaborItem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ServiceItem")]
        ServiceItem = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ChargeItem")]
        ChargeItem = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ExpenseItem")]
        ExpenseItem = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinishedGoodItem")]
        FinishedGoodItem = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ComponentPartItem")]
        ComponentPartItem = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "SubassemblyItem")]
        SubassemblyItem = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryAdjustmentDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryAdjustmentLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReleaseInventoryDocumentActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryIssueDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryIssueLineDtoTransactionType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Issue")]
        Issue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Return")]
        Return = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryIssueLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfInventoryTransactionTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Issue")]
        Issue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Return")]
        Return = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryReceiptDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryReceiptLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryTransferDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum InventoryTransferLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum JournalTransactionDtoModule
    {
        [System.Runtime.Serialization.EnumMember(Value = "ModuleGL")]
        ModuleGL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleAP")]
        ModuleAP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleAR")]
        ModuleAR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleCA")]
        ModuleCA = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleCM")]
        ModuleCM = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleIN")]
        ModuleIN = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleSO")]
        ModuleSO = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModulePO")]
        ModulePO = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleDR")]
        ModuleDR = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleFA")]
        ModuleFA = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleEP")]
        ModuleEP = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModulePM")]
        ModulePM = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleTX")]
        ModuleTX = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "ModuleCR")]
        ModuleCR = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum JournalTransactionDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unposted")]
        Unposted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Posted")]
        Posted = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PartiallyReleased")]
        PartiallyReleased = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum JournalTransactionLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum LedgerDtoBalanceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Actual")]
        Actual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Report")]
        Report = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Statistical")]
        Statistical = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Budget")]
        Budget = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PaymentDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PaymentDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "CcHold")]
        CcHold = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PaymentLineDtoDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum OrderToApplyDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditHold")]
        CreditHold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "BackOrder")]
        BackOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shipping")]
        Shipping = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoiced")]
        Invoiced = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfPaymentTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PaymentOrdersLinesUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PaymentLinesUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfCustomerDocumentTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfPaymentTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReleasePaymentActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PaymentMethodDtoMeansOfPayment
    {
        [System.Runtime.Serialization.EnumMember(Value = "CreditCard")]
        CreditCard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashOrCheck")]
        CashOrCheck = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DirectDeposit")]
        DirectDeposit = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ProjectDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Planned")]
        Planned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ProjectDtoBillingPeriod
    {
        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Quarterly")]
        Quarterly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Annual")]
        Annual = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnDemand")]
        OnDemand = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum TemplateNumberDescriptionDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Planned")]
        Planned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ProjectQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Planned")]
        Planned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfProjectStatusValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Planned")]
        Planned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingApproval")]
        PendingApproval = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfBillingPeriodValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Quarterly")]
        Quarterly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Annual")]
        Annual = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnDemand")]
        OnDemand = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum TaskUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ProjectEmployeeUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderDtoShippingDestinationType
    {
        [System.Runtime.Serialization.EnumMember(Value = "CompanyLocation")]
        CompanyLocation = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Customer")]
        Customer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Vendor")]
        Vendor = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Site")]
        Site = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderDtoOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DiscountDetailDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Line")]
        Line = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Group")]
        Group = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Document")]
        Document = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Flat")]
        Flat = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderLineDtoLineType
    {
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForInventory")]
        GoodsForInventory = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForSalesOrder")]
        GoodsForSalesOrder = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForReplenishment")]
        GoodsForReplenishment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForDropShip")]
        GoodsForDropShip = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStockForDropShip")]
        NonStockForDropShip = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStockForSalesOrder")]
        NonStockForSalesOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStock")]
        NonStock = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Service")]
        Service = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Freight")]
        Freight = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Description")]
        Description = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderLineDtoReceiptAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "Reject")]
        Reject = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AcceptButWarn")]
        AcceptButWarn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Accept")]
        Accept = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderLineDtoOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderQueryParametersOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderQueryParametersOrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfPOShippingDestinationTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "CompanyLocation")]
        CompanyLocation = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Customer")]
        Customer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Vendor")]
        Vendor = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Site")]
        Site = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DiscountDetailUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfPurchaseOrderTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfPoLineTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForInventory")]
        GoodsForInventory = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForSalesOrder")]
        GoodsForSalesOrder = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForReplenishment")]
        GoodsForReplenishment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForDropShip")]
        GoodsForDropShip = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStockForDropShip")]
        NonStockForDropShip = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStockForSalesOrder")]
        NonStockForSalesOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStock")]
        NonStock = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Service")]
        Service = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Freight")]
        Freight = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Description")]
        Description = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfPurchaseOrderReceiptActionValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Reject")]
        Reject = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AcceptButWarn")]
        AcceptButWarn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Accept")]
        Accept = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderBasicDtoOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseOrderBasicDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingPrint")]
        PendingPrint = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingEmail")]
        PendingEmail = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptDtoReceiptType
    {
        [System.Runtime.Serialization.EnumMember(Value = "PoReceipt")]
        PoReceipt = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PoReturn")]
        PoReturn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReceipt")]
        TransferReceipt = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum LandedCostDtoApDocType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Check")]
        Check = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "QuickCheck")]
        QuickCheck = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidCheck")]
        VoidCheck = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidQuickCheck")]
        VoidQuickCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum LandedCostDtoInDocType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Payment")]
        Payment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidPayment")]
        VoidPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "FinCharge")]
        FinCharge = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallBalanceWo")]
        SmallBalanceWo = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SmallCreditWo")]
        SmallCreditWo = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashSale")]
        CashSale = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "CashReturn")]
        CashReturn = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoUpdate")]
        NoUpdate = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptLineDtoLineType
    {
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForInventory")]
        GoodsForInventory = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForSalesOrder")]
        GoodsForSalesOrder = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForReplenishment")]
        GoodsForReplenishment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsForDropShip")]
        GoodsForDropShip = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStockForDropShip")]
        NonStockForDropShip = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStockForSalesOrder")]
        NonStockForSalesOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "NonStock")]
        NonStock = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Service")]
        Service = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Freight")]
        Freight = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Description")]
        Description = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptLineDtoPoOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "RegularOrder")]
        RegularOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blanket")]
        Blanket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardBlanket")]
        StandardBlanket = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptLineDtoTransferOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "QuoteOrder")]
        QuoteOrder = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "RMAOrder")]
        RMAOrder = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SalesOrder")]
        SalesOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardOrder")]
        StandardOrder = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferOrder")]
        TransferOrder = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptQueryParametersReceiptType
    {
        [System.Runtime.Serialization.EnumMember(Value = "PoReceipt")]
        PoReceipt = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PoReturn")]
        PoReturn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReceipt")]
        TransferReceipt = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum LandedCostUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfPurchaseReceiptTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "PoReceipt")]
        PoReceipt = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PoReturn")]
        PoReturn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReceipt")]
        TransferReceipt = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum AllocationsUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfSalesOrderTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "CreditNote")]
        CreditNote = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitNote")]
        DebitNote = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "QuoteOrder")]
        QuoteOrder = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "RMAOrder")]
        RMAOrder = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SalesOrder")]
        SalesOrder = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardOrder")]
        StandardOrder = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferOrder")]
        TransferOrder = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfSupplierDocumentTypeValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Check")]
        Check = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "QuickCheck")]
        QuickCheck = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidCheck")]
        VoidCheck = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidQuickCheck")]
        VoidQuickCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReleasePurchaseReceiptActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptBasicDtoReceiptType
    {
        [System.Runtime.Serialization.EnumMember(Value = "PoReceipt")]
        PoReceipt = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PoReturn")]
        PoReturn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReceipt")]
        TransferReceipt = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptBasicDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Released")]
        Released = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum PurchaseReceiptLineBasicUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfSalesOrderShipCompleteStatusesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "BackOrderAllowed")]
        BackOrderAllowed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CancelRemainder")]
        CancelRemainder = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ShipComplete")]
        ShipComplete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfSalesOrderOperationsValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Issue")]
        Issue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Receipt")]
        Receipt = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfInventoryReplenishmentSourcesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "DropShipToOrder")]
        DropShipToOrder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manufactured")]
        Manufactured = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Purchased")]
        Purchased = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PurchaseToOrder")]
        PurchaseToOrder = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Transfer")]
        Transfer = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum CreateShipmentActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ShipmentDtoShipmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Issue")]
        Issue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DropShip")]
        DropShip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Transfer")]
        Transfer = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ShipmentDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Confirmed")]
        Confirmed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoiced")]
        Invoiced = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Receipted")]
        Receipted = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "AutoGenerated")]
        AutoGenerated = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "PartiallyInvoiced")]
        PartiallyInvoiced = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ShipmentDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Issue")]
        Issue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Receipt")]
        Receipt = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SalesOrderBasicLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfTransportationModesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BySea")]
        BySea = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ByRail")]
        ByRail = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ByRoad")]
        ByRoad = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ByAeroPlane")]
        ByAeroPlane = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ConsignmentsByPosts")]
        ConsignmentsByPosts = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "FixedInstallations")]
        FixedInstallations = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "InlandWaterway")]
        InlandWaterway = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ShipmentDetailLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ShipmentPackageLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ConfirmShipmentActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum StocktakeDtoSummaryStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Counting")]
        Counting = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Entering")]
        Entering = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum StocktakeLineDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "NotEntered")]
        NotEntered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Entered")]
        Entered = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Skipped")]
        Skipped = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum StocktakeLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum StocktakeQueryParametersSummaryStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Counting")]
        Counting = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Entering")]
        Entering = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum StocktakeQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "NotEntered")]
        NotEntered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Entered")]
        Entered = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Skipped")]
        Skipped = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HoldPayments")]
        HoldPayments = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierDtoChargeBearer
    {
        [System.Runtime.Serialization.EnumMember(Value = "Payer")]
        Payer = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Beneficiary")]
        Beneficiary = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shared")]
        Shared = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ServiceLevel")]
        ServiceLevel = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierDtoAccountUsedForPayment
    {
        [System.Runtime.Serialization.EnumMember(Value = "IBAN")]
        IBAN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BBAN")]
        BBAN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "BANKGIRO")]
        BANKGIRO = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PLUSGIRO")]
        PLUSGIRO = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierDtoPaymentBy
    {
        [System.Runtime.Serialization.EnumMember(Value = "DueDate")]
        DueDate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DiscountDate")]
        DiscountDate = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfSupplierStatusValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HoldPayments")]
        HoldPayments = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfSupplierChargeBearerValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Payer")]
        Payer = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Beneficiary")]
        Beneficiary = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shared")]
        Shared = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ServiceLevel")]
        ServiceLevel = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfAccountUsedForPaymentValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "IBAN")]
        IBAN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BBAN")]
        BBAN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "BANKGIRO")]
        BANKGIRO = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PLUSGIRO")]
        PLUSGIRO = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfPaymentByValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "DueDate")]
        DueDate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DiscountDate")]
        DiscountDate = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierQueryParametersStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnHold")]
        OnHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HoldPayments")]
        HoldPayments = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneTime")]
        OneTime = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierInvoiceDtoDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Check")]
        Check = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "QuickCheck")]
        QuickCheck = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidCheck")]
        VoidCheck = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidQuickCheck")]
        VoidQuickCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierInvoiceDtoApprovalStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SentToApproval")]
        SentToApproval = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReceivedByApproval")]
        ReceivedByApproval = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgressApproval")]
        InProgressApproval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "RejectedInApproval")]
        RejectedInApproval = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ApprovedInApproval")]
        ApprovedInApproval = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActiveWorkflowApproval")]
        ActiveWorkflowApproval = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierInvoiceDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prebooked")]
        Prebooked = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierDocumentDtoDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Check")]
        Check = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "QuickCheck")]
        QuickCheck = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Refund")]
        Refund = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidCheck")]
        VoidCheck = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "VoidQuickCheck")]
        VoidQuickCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierDocumentDtoApprovalStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SentToApproval")]
        SentToApproval = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReceivedByApproval")]
        ReceivedByApproval = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgressApproval")]
        InProgressApproval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "RejectedInApproval")]
        RejectedInApproval = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ApprovedInApproval")]
        ApprovedInApproval = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActiveWorkflowApproval")]
        ActiveWorkflowApproval = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierDocumentDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Hold")]
        Hold = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Balanced")]
        Balanced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voided")]
        Voided = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Scheduled")]
        Scheduled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Open")]
        Open = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
        Closed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prebooked")]
        Prebooked = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum DtoValueOfNullableOfSupplierInvoiceTypesValue
    {
        [System.Runtime.Serialization.EnumMember(Value = "Invoice")]
        Invoice = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreditAdj")]
        CreditAdj = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DebitAdj")]
        DebitAdj = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Prepayment")]
        Prepayment = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum SupplierInvoiceLineUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum ReleaseSupplierInvoiceActionResultDtoActionResult
    {
        [System.Runtime.Serialization.EnumMember(Value = "Queued")]
        Queued = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProcess")]
        InProcess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Done")]
        Done = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum TimeCardSummaryUpdateDtoOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Insert")]
        Insert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatInformationDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Sales")]
        Sales = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Use")]
        Use = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Vat")]
        Vat = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Withholding")]
        Withholding = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ExemptVat")]
        ExemptVat = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "StatisticalVat")]
        StatisticalVat = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "DirectVat")]
        DirectVat = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingVat")]
        PendingVat = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReverseVat")]
        ReverseVat = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatInformationDtoCalculateOn
    {
        [System.Runtime.Serialization.EnumMember(Value = "ExtractFromItemAmount")]
        ExtractFromItemAmount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ItemAmount")]
        ItemAmount = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ItemTaxAmount")]
        ItemTaxAmount = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DocumentAmount")]
        DocumentAmount = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "DocumenTaxAmount")]
        DocumenTaxAmount = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatInformationDtoCashDiscount
    {
        [System.Runtime.Serialization.EnumMember(Value = "ToTaxableAmount")]
        ToTaxableAmount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ToPromtPayment")]
        ToPromtPayment = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ToTaxAmount")]
        ToTaxAmount = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "AdjustTax")]
        AdjustTax = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoAdjust")]
        NoAdjust = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatInformationDtoEuReportCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "SalesOfGoods")]
        SalesOfGoods = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Triangulation")]
        Triangulation = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SalesOfService")]
        SalesOfService = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatInformationDtoDocumentText
    {
        [System.Runtime.Serialization.EnumMember(Value = "Construction")]
        Construction = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SupplyVat0")]
        SupplyVat0 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DenoteExportSales")]
        DenoteExportSales = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "EUSaleExemptFromTax")]
        EUSaleExemptFromTax = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Triangulation")]
        Triangulation = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransportOutsideEU")]
        TransportOutsideEU = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SpecialTaxFreeTransfer")]
        SpecialTaxFreeTransfer = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "MedicalServiceSales")]
        MedicalServiceSales = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "BuyerHasVATLiability")]
        BuyerHasVATLiability = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "SalesOfGold")]
        SalesOfGold = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodsServicesWithPartialDeduction")]
        GoodsServicesWithPartialDeduction = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "MargineScheme")]
        MargineScheme = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "TravelAgentsMargineScheme")]
        TravelAgentsMargineScheme = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "PartiallyNonDeductibleInUse")]
        PartiallyNonDeductibleInUse = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Vat0SalesOutsideCommunity")]
        Vat0SalesOutsideCommunity = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "SelfBilling")]
        SelfBilling = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "MargineSchemeUsedItems")]
        MargineSchemeUsedItems = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "MargineSchemeWorksOfArt")]
        MargineSchemeWorksOfArt = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "MargineSchemeCollectorsItems")]
        MargineSchemeCollectorsItems = 18,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatInformationDtoVismaXmlVatType
    {
        [System.Runtime.Serialization.EnumMember(Value = "VatTypeHigh")]
        VatTypeHigh = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "VatTypeMedium")]
        VatTypeMedium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VatTypeLow")]
        VatTypeLow = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "VatTypeZero")]
        VatTypeZero = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "VatTypeExempt")]
        VatTypeExempt = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatCategoryLineDtoType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Sales")]
        Sales = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Use")]
        Use = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Vat")]
        Vat = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Withholding")]
        Withholding = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ExemptVat")]
        ExemptVat = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "StatisticalVat")]
        StatisticalVat = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "DirectVat")]
        DirectVat = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PendingVat")]
        PendingVat = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReverseVat")]
        ReverseVat = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatCategoryLineDtoCalculateOn
    {
        [System.Runtime.Serialization.EnumMember(Value = "ExtractFromItemAmount")]
        ExtractFromItemAmount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ItemAmount")]
        ItemAmount = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ItemTaxAmount")]
        ItemTaxAmount = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DocumentAmount")]
        DocumentAmount = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "DocumenTaxAmount")]
        DocumenTaxAmount = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum VatCategoryLineDtoCashDiscount
    {
        [System.Runtime.Serialization.EnumMember(Value = "ToTaxableAmount")]
        ToTaxableAmount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ToPromtPayment")]
        ToPromtPayment = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ToTaxAmount")]
        ToTaxAmount = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "AdjustTax")]
        AdjustTax = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoAdjust")]
        NoAdjust = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum WarehouseDtoLocationEntry
    {
        [System.Runtime.Serialization.EnumMember(Value = "Validate")]
        Validate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Warn")]
        Warn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoValidate")]
        NoValidate = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum WarehouseDtoAvgDefaultCost
    {
        [System.Runtime.Serialization.EnumMember(Value = "AverageCost")]
        AverageCost = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LastCost")]
        LastCost = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum WarehouseDtoFifoDefaultCost
    {
        [System.Runtime.Serialization.EnumMember(Value = "AverageCost")]
        AverageCost = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LastCost")]
        LastCost = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.3.0.0")]
    public enum WarehouseLocationDtoPrimaryItemValid
    {
        [System.Runtime.Serialization.EnumMember(Value = "PrimaryNothing")]
        PrimaryNothing = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PrimaryItemWarning")]
        PrimaryItemWarning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PrimaryItemError")]
        PrimaryItemError = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PrimaryItemClassWarning")]
        PrimaryItemClassWarning = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PrimaryItemClassError")]
        PrimaryItemClassError = 4,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public class VismaNetException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public VismaNetException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.0.0")]
    public class VismaNetException<TResult> : VismaNetException
    {
        public TResult Result { get; private set; }

        public VismaNetException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}